
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e768  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800e948  0800e948  0000f948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef6c  0800ef6c  00010290  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef6c  0800ef6c  0000ff6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef74  0800ef74  00010290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef74  0800ef74  0000ff74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef78  0800ef78  0000ff78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800ef7c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000290  0800f20c  00010290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800f20c  0001079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b688  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003710  00000000  00000000  0002b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0002f058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001123  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a320  00000000  00000000  000317a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b629  00000000  00000000  0005bac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001146ae  00000000  00000000  000770ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b79a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007480  00000000  00000000  0018b7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00192c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e930 	.word	0x0800e930

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	0800e930 	.word	0x0800e930

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00a f8a8 	bl	800b1c2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <MX_ADC1_Init+0xe8>)
 800107c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_ADC1_Init+0xe8>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	4817      	ldr	r0, [pc, #92]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010de:	f001 fdbf 	bl	8002c60 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 fab2 	bl	8001650 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010f8:	f003 fa34 	bl	8004564 <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001102:	f000 faa5 	bl	8001650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	@ 0x7f
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001124:	f002 fc08 	bl	8003938 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800112e:	f000 fa8f 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	@ 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002ac 	.word	0x200002ac
 8001140:	21800100 	.word	0x21800100

08001144 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f00a f836 	bl	800b1c2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001158:	4a2b      	ldr	r2, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc4>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800115e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001162:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800117e:	2204      	movs	r2, #4
 8001180:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001190:	2201      	movs	r2, #1
 8001192:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011c0:	f001 fd4e 	bl	8002c60 <HAL_ADC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ca:	f000 fa41 	bl	8001650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_ADC2_Init+0xc8>)
 80011d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d2:	2306      	movs	r3, #6
 80011d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011da:	237f      	movs	r3, #127	@ 0x7f
 80011dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011de:	2304      	movs	r3, #4
 80011e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011ec:	f002 fba4 	bl	8003938 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011f6:	f000 fa2b 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000318 	.word	0x20000318
 8001208:	50000100 	.word	0x50000100
 800120c:	19200040 	.word	0x19200040

08001210 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0a4      	sub	sp, #144	@ 0x90
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f009 ffc6 	bl	800b1c2 <memset>
  if(adcHandle->Instance==ADC1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123e:	d17c      	bne.n	800133a <HAL_ADC_MspInit+0x12a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001246:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001250:	4618      	mov	r0, r3
 8001252:	f004 fc07 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800125c:	f000 f9f8 	bl	8001650 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001260:	4b6b      	ldr	r3, [pc, #428]	@ (8001410 <HAL_ADC_MspInit+0x200>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a6a      	ldr	r2, [pc, #424]	@ (8001410 <HAL_ADC_MspInit+0x200>)
 8001268:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800126a:	4b69      	ldr	r3, [pc, #420]	@ (8001410 <HAL_ADC_MspInit+0x200>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10b      	bne.n	800128a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001272:	4b68      	ldr	r3, [pc, #416]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a67      	ldr	r2, [pc, #412]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001278:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b62      	ldr	r3, [pc, #392]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a61      	ldr	r2, [pc, #388]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b5f      	ldr	r3, [pc, #380]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b59      	ldr	r3, [pc, #356]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b56      	ldr	r3, [pc, #344]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a55      	ldr	r2, [pc, #340]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d2:	2304      	movs	r3, #4
 80012d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012e6:	4619      	mov	r1, r3
 80012e8:	484b      	ldr	r0, [pc, #300]	@ (8001418 <HAL_ADC_MspInit+0x208>)
 80012ea:	f003 fbe3 	bl	8004ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012ee:	2302      	movs	r3, #2
 80012f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f003 fbd4 	bl	8004ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800130c:	2303      	movs	r3, #3
 800130e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001310:	2303      	movs	r3, #3
 8001312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001320:	4619      	mov	r1, r3
 8001322:	483e      	ldr	r0, [pc, #248]	@ (800141c <HAL_ADC_MspInit+0x20c>)
 8001324:	f003 fbc6 	bl	8004ab4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2012      	movs	r0, #18
 800132e:	f003 fad9 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001332:	2012      	movs	r0, #18
 8001334:	f003 faf0 	bl	8004918 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001338:	e066      	b.n	8001408 <HAL_ADC_MspInit+0x1f8>
  else if(adcHandle->Instance==ADC2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a38      	ldr	r2, [pc, #224]	@ (8001420 <HAL_ADC_MspInit+0x210>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d161      	bne.n	8001408 <HAL_ADC_MspInit+0x1f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001344:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800134a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800134e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001350:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fb85 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_ADC_MspInit+0x154>
      Error_Handler();
 8001360:	f000 f976 	bl	8001650 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001364:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <HAL_ADC_MspInit+0x200>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a29      	ldr	r2, [pc, #164]	@ (8001410 <HAL_ADC_MspInit+0x200>)
 800136c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800136e:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <HAL_ADC_MspInit+0x200>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10b      	bne.n	800138e <HAL_ADC_MspInit+0x17e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001376:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 800137c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a20      	ldr	r2, [pc, #128]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_ADC_MspInit+0x204>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80013be:	230b      	movs	r3, #11
 80013c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4810      	ldr	r0, [pc, #64]	@ (8001418 <HAL_ADC_MspInit+0x208>)
 80013d6:	f003 fb6d 	bl	8004ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80013da:	2301      	movs	r3, #1
 80013dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f4:	f003 fb5e 	bl	8004ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2012      	movs	r0, #18
 80013fe:	f003 fa71 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001402:	2012      	movs	r0, #18
 8001404:	f003 fa88 	bl	8004918 <HAL_NVIC_EnableIRQ>
}
 8001408:	bf00      	nop
 800140a:	3790      	adds	r7, #144	@ 0x90
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000384 	.word	0x20000384
 8001414:	40021000 	.word	0x40021000
 8001418:	48000800 	.word	0x48000800
 800141c:	48000400 	.word	0x48000400
 8001420:	50000100 	.word	0x50000100

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b3f      	ldr	r3, [pc, #252]	@ (8001538 <MX_GPIO_Init+0x114>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a3e      	ldr	r2, [pc, #248]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b3c      	ldr	r3, [pc, #240]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001452:	4b39      	ldr	r3, [pc, #228]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <MX_GPIO_Init+0x114>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a2c      	ldr	r2, [pc, #176]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <MX_GPIO_Init+0x114>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <MX_GPIO_Init+0x114>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a26      	ldr	r2, [pc, #152]	@ (8001538 <MX_GPIO_Init+0x114>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <MX_GPIO_Init+0x114>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2120      	movs	r1, #32
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ba:	f003 fc7d 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2104      	movs	r1, #4
 80014c2:	481e      	ldr	r0, [pc, #120]	@ (800153c <MX_GPIO_Init+0x118>)
 80014c4:	f003 fc78 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4818      	ldr	r0, [pc, #96]	@ (8001540 <MX_GPIO_Init+0x11c>)
 80014e0:	f003 fae8 	bl	8004ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80014e4:	2320      	movs	r3, #32
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f003 fad9 	bl	8004ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001502:	2304      	movs	r3, #4
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4808      	ldr	r0, [pc, #32]	@ (800153c <MX_GPIO_Init+0x118>)
 800151a:	f003 facb 	bl	8004ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2028      	movs	r0, #40	@ 0x28
 8001524:	f003 f9de 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001528:	2028      	movs	r0, #40	@ 0x28
 800152a:	f003 f9f5 	bl	8004918 <HAL_NVIC_EnableIRQ>

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	@ 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	48000c00 	.word	0x48000c00
 8001540:	48000800 	.word	0x48000800

08001544 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800154c:	1d39      	adds	r1, r7, #4
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	2201      	movs	r2, #1
 8001554:	4803      	ldr	r0, [pc, #12]	@ (8001564 <__io_putchar+0x20>)
 8001556:	f006 fdac 	bl	80080b2 <HAL_UART_Transmit>

	return ch;
 800155a:	687b      	ldr	r3, [r7, #4]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000470 	.word	0x20000470

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f001 f8af 	bl	80026ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f813 	bl	800159a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f7ff ff56 	bl	8001424 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001578:	f7ff fde4 	bl	8001144 <MX_ADC2_Init>
  MX_ADC1_Init();
 800157c:	f7ff fd6a 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001580:	f000 fa38 	bl	80019f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001584:	f000 fb04 	bl	8001b90 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001588:	f000 fc38 	bl	8001dfc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800158c:	f000 fc82 	bl	8001e94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8001590:	f000 fd74 	bl	800207c <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8001594:	f000 ff14 	bl	80023c0 <Shell_Loop>
 8001598:	e7fc      	b.n	8001594 <main+0x2c>

0800159a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b094      	sub	sp, #80	@ 0x50
 800159e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	2238      	movs	r2, #56	@ 0x38
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f009 fe0a 	bl	800b1c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015bc:	2000      	movs	r0, #0
 80015be:	f003 fc37 	bl	8004e30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015cc:	2302      	movs	r3, #2
 80015ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d0:	2303      	movs	r3, #3
 80015d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015d4:	2306      	movs	r3, #6
 80015d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015d8:	2355      	movs	r3, #85	@ 0x55
 80015da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015dc:	2302      	movs	r3, #2
 80015de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fcd3 	bl	8004f98 <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015f8:	f000 f82a 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	230f      	movs	r3, #15
 80015fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2303      	movs	r3, #3
 8001602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2104      	movs	r1, #4
 8001614:	4618      	mov	r0, r3
 8001616:	f003 ffd7 	bl	80055c8 <HAL_RCC_ClockConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001620:	f000 f816 	bl	8001650 <Error_Handler>
  }
}
 8001624:	bf00      	nop
 8001626:	3750      	adds	r7, #80	@ 0x50
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800163e:	f001 f85f 	bl	8002700 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40001000 	.word	0x40001000

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <Error_Handler+0x8>

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001666:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	@ 0x60
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a08      	ldr	r2, [pc, #32]	@ (80016a0 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001692:	f003 fc71 	bl	8004f78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	@ 0x30
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001768 <HAL_InitTick+0xc4>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <HAL_InitTick+0xc4>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <HAL_InitTick+0xc4>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016cc:	f107 020c 	add.w	r2, r7, #12
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 f94c 	bl	8005974 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016dc:	f004 f91e 	bl	800591c <HAL_RCC_GetPCLK1Freq>
 80016e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e4:	4a21      	ldr	r2, [pc, #132]	@ (800176c <HAL_InitTick+0xc8>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9b      	lsrs	r3, r3, #18
 80016ec:	3b01      	subs	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <HAL_InitTick+0xcc>)
 80016f2:	4a20      	ldr	r2, [pc, #128]	@ (8001774 <HAL_InitTick+0xd0>)
 80016f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <HAL_InitTick+0xcc>)
 80016f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <HAL_InitTick+0xcc>)
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_InitTick+0xcc>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_InitTick+0xcc>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001710:	4817      	ldr	r0, [pc, #92]	@ (8001770 <HAL_InitTick+0xcc>)
 8001712:	f004 fbf5 	bl	8005f00 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800171c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11b      	bne.n	800175c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001724:	4812      	ldr	r0, [pc, #72]	@ (8001770 <HAL_InitTick+0xcc>)
 8001726:	f004 fc43 	bl	8005fb0 <HAL_TIM_Base_Start_IT>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001730:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001738:	2036      	movs	r0, #54	@ 0x36
 800173a:	f003 f8ed 	bl	8004918 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d808      	bhi.n	8001756 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	2036      	movs	r0, #54	@ 0x36
 800174a:	f003 f8cb 	bl	80048e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <HAL_InitTick+0xd4>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e002      	b.n	800175c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800175c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001760:	4618      	mov	r0, r3
 8001762:	3730      	adds	r7, #48	@ 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	431bde83 	.word	0x431bde83
 8001770:	20000388 	.word	0x20000388
 8001774:	40001000 	.word	0x40001000
 8001778:	200000c0 	.word	0x200000c0

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <ADC1_2_IRQHandler+0x14>)
 80017e2:	f001 fe2b 	bl	800343c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017e6:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <ADC1_2_IRQHandler+0x18>)
 80017e8:	f001 fe28 	bl	800343c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200002ac 	.word	0x200002ac
 80017f4:	20000318 	.word	0x20000318

080017f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <USART2_IRQHandler+0x10>)
 80017fe:	f006 fd45 	bl	800828c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000470 	.word	0x20000470

0800180c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <USART3_IRQHandler+0x10>)
 8001812:	f006 fd3b 	bl	800828c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000500 	.word	0x20000500

08001820 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001824:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001828:	f003 fade 	bl	8004de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <TIM6_DAC_IRQHandler+0x10>)
 8001836:	f004 fedf 	bl	80065f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000388 	.word	0x20000388

08001844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_kill>:

int _kill(int pid, int sig)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185e:	f009 fd5f 	bl	800b320 <__errno>
 8001862:	4603      	mov	r3, r0
 8001864:	2216      	movs	r2, #22
 8001866:	601a      	str	r2, [r3, #0]
  return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_exit>:

void _exit (int status)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe7 	bl	8001854 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001886:	bf00      	nop
 8001888:	e7fd      	b.n	8001886 <_exit+0x12>

0800188a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e00a      	b.n	80018b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189c:	f3af 8000 	nop.w
 80018a0:	4601      	mov	r1, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	b2ca      	uxtb	r2, r1
 80018aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	dbf0      	blt.n	800189c <_read+0x12>
  }

  return len;
 80018ba:	687b      	ldr	r3, [r7, #4]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e009      	b.n	80018ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	60ba      	str	r2, [r7, #8]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe30 	bl	8001544 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dbf1      	blt.n	80018d6 <_write+0x12>
  }
  return len;
 80018f2:	687b      	ldr	r3, [r7, #4]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_close>:

int _close(int file)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001924:	605a      	str	r2, [r3, #4]
  return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_isatty>:

int _isatty(int file)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f009 fcc4 	bl	800b320 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20020000 	.word	0x20020000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	200003d4 	.word	0x200003d4
 80019cc:	200007a0 	.word	0x200007a0

080019d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b09c      	sub	sp, #112	@ 0x70
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2234      	movs	r2, #52	@ 0x34
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f009 fbc7 	bl	800b1c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a34:	4b54      	ldr	r3, [pc, #336]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a36:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <MX_TIM1_Init+0x198>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a3a:	4b53      	ldr	r3, [pc, #332]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a40:	4b51      	ldr	r3, [pc, #324]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a42:	2220      	movs	r2, #32
 8001a44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001a46:	4b50      	ldr	r3, [pc, #320]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a48:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a54:	4b4c      	ldr	r3, [pc, #304]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a60:	4849      	ldr	r0, [pc, #292]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a62:	f004 fa4d 	bl	8005f00 <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a6c:	f7ff fdf0 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a76:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4842      	ldr	r0, [pc, #264]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a7e:	f005 f84f 	bl	8006b20 <HAL_TIM_ConfigClockSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a88:	f7ff fde2 	bl	8001650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a8c:	483e      	ldr	r0, [pc, #248]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001a8e:	f004 fb07 	bl	80060a0 <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a98:	f7ff fdda 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aac:	4619      	mov	r1, r3
 8001aae:	4836      	ldr	r0, [pc, #216]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001ab0:	f006 f8fc 	bl	8007cac <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001aba:	f7ff fdc9 	bl	8001650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	@ 0x60
 8001ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2550;
 8001ac2:	f640 13f6 	movw	r3, #2550	@ 0x9f6
 8001ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001adc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4828      	ldr	r0, [pc, #160]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001ae6:	f004 ff07 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001af0:	f7ff fdae 	bl	8001650 <Error_Handler>
  }
  sConfigOC.Pulse = 1600;
 8001af4:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001afa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001afe:	2204      	movs	r2, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4821      	ldr	r0, [pc, #132]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001b04:	f004 fef8 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001b0e:	f7ff fd9f 	bl	8001650 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001b20:	f004 feea 	bl	80068f8 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001b2a:	f7ff fd91 	bl	8001650 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 8001b3a:	2311      	movs	r3, #17
 8001b3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001b6c:	f006 f934 	bl	8007dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8001b76:	f7ff fd6b 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b7a:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <MX_TIM1_Init+0x194>)
 8001b7c:	f000 f8d6 	bl	8001d2c <HAL_TIM_MspPostInit>

}
 8001b80:	bf00      	nop
 8001b82:	3770      	adds	r7, #112	@ 0x70
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200003d8 	.word	0x200003d8
 8001b8c:	40012c00 	.word	0x40012c00

08001b90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <MX_TIM3_Init+0x94>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4619      	mov	r1, r3
 8001bea:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001bec:	f005 fddd 	bl	80077aa <HAL_TIMEx_HallSensor_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bf6:	f7ff fd2b 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001bfa:	2350      	movs	r3, #80	@ 0x50
 8001bfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <MX_TIM3_Init+0x90>)
 8001c08:	f006 f850 	bl	8007cac <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c12:	f7ff fd1d 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000424 	.word	0x20000424
 8001c24:	40000400 	.word	0x40000400

08001c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <HAL_TIM_Base_MspInit+0x38>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10b      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_TIM_Base_MspInit+0x3c>)
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3e:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <HAL_TIM_Base_MspInit+0x3c>)
 8001c40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <HAL_TIM_Base_MspInit+0x3c>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a26      	ldr	r2, [pc, #152]	@ (8001d20 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d145      	bne.n	8001d16 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c8a:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	4a25      	ldr	r2, [pc, #148]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001cd2:	2350      	movs	r3, #80	@ 0x50
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf0:	f002 fee0 	bl	8004ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d06:	2302      	movs	r3, #2
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001d12:	f002 fecf 	bl	8004ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	@ 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000800 	.word	0x48000800

08001d2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <HAL_TIM_MspPostInit+0xc4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d14b      	bne.n	8001de6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <HAL_TIM_MspPostInit+0xc8>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	4a28      	ldr	r2, [pc, #160]	@ (8001df4 <HAL_TIM_MspPostInit+0xc8>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5a:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <HAL_TIM_MspPostInit+0xc8>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <HAL_TIM_MspPostInit+0xc8>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <HAL_TIM_MspPostInit+0xc8>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_TIM_MspPostInit+0xc8>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001d7e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d90:	2306      	movs	r3, #6
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4817      	ldr	r0, [pc, #92]	@ (8001df8 <HAL_TIM_MspPostInit+0xcc>)
 8001d9c:	f002 fe8a 	bl	8004ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001da0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001db2:	2304      	movs	r3, #4
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480e      	ldr	r0, [pc, #56]	@ (8001df8 <HAL_TIM_MspPostInit+0xcc>)
 8001dbe:	f002 fe79 	bl	8004ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001dc2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de2:	f002 fe67 	bl	8004ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	@ 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000400 	.word	0x48000400

08001dfc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e00:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e02:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <MX_USART2_UART_Init+0x94>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e06:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e44:	4811      	ldr	r0, [pc, #68]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e46:	f006 f8e4 	bl	8008012 <HAL_UART_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e50:	f7ff fbfe 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e54:	2100      	movs	r1, #0
 8001e56:	480d      	ldr	r0, [pc, #52]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e58:	f008 f887 	bl	8009f6a <HAL_UARTEx_SetTxFifoThreshold>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e62:	f7ff fbf5 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e66:	2100      	movs	r1, #0
 8001e68:	4808      	ldr	r0, [pc, #32]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e6a:	f008 f8bc 	bl	8009fe6 <HAL_UARTEx_SetRxFifoThreshold>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e74:	f7ff fbec 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e78:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <MX_USART2_UART_Init+0x90>)
 8001e7a:	f008 f83d 	bl	8009ef8 <HAL_UARTEx_DisableFifoMode>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e84:	f7ff fbe4 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000470 	.word	0x20000470
 8001e90:	40004400 	.word	0x40004400

08001e94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e98:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001e9a:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <MX_USART3_UART_Init+0x94>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001edc:	4811      	ldr	r0, [pc, #68]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ede:	f006 f898 	bl	8008012 <HAL_UART_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ee8:	f7ff fbb2 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eec:	2100      	movs	r1, #0
 8001eee:	480d      	ldr	r0, [pc, #52]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001ef0:	f008 f83b 	bl	8009f6a <HAL_UARTEx_SetTxFifoThreshold>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001efa:	f7ff fba9 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001efe:	2100      	movs	r1, #0
 8001f00:	4808      	ldr	r0, [pc, #32]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001f02:	f008 f870 	bl	8009fe6 <HAL_UARTEx_SetRxFifoThreshold>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f0c:	f7ff fba0 	bl	8001650 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	@ (8001f24 <MX_USART3_UART_Init+0x90>)
 8001f12:	f007 fff1 	bl	8009ef8 <HAL_UARTEx_DisableFifoMode>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f1c:	f7ff fb98 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000500 	.word	0x20000500
 8001f28:	40004800 	.word	0x40004800

08001f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0a0      	sub	sp, #128	@ 0x80
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	2254      	movs	r2, #84	@ 0x54
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f009 f938 	bl	800b1c2 <memset>
  if(uartHandle->Instance==USART2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a45      	ldr	r2, [pc, #276]	@ (800206c <HAL_UART_MspInit+0x140>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d13f      	bne.n	8001fdc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fd7b 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f74:	f7ff fb6c 	bl	8001650 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f78:	4b3d      	ldr	r3, [pc, #244]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8001f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f84:	4b3a      	ldr	r3, [pc, #232]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b37      	ldr	r3, [pc, #220]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f94:	4a36      	ldr	r2, [pc, #216]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9c:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc6:	f002 fd75 	bl	8004ab4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2026      	movs	r0, #38	@ 0x26
 8001fd0:	f002 fc88 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fd4:	2026      	movs	r0, #38	@ 0x26
 8001fd6:	f002 fc9f 	bl	8004918 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fda:	e043      	b.n	8002064 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a24      	ldr	r2, [pc, #144]	@ (8002074 <HAL_UART_MspInit+0x148>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d13e      	bne.n	8002064 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fd36 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001ffe:	f7ff fb27 	bl	8001650 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002002:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	4a1a      	ldr	r2, [pc, #104]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800200c:	6593      	str	r3, [r2, #88]	@ 0x58
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_UART_MspInit+0x144>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_UART_MspInit+0x144>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002032:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002036:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002044:	2307      	movs	r3, #7
 8002046:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800204c:	4619      	mov	r1, r3
 800204e:	480a      	ldr	r0, [pc, #40]	@ (8002078 <HAL_UART_MspInit+0x14c>)
 8002050:	f002 fd30 	bl	8004ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2027      	movs	r0, #39	@ 0x27
 800205a:	f002 fc43 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800205e:	2027      	movs	r0, #39	@ 0x27
 8002060:	f002 fc5a 	bl	8004918 <HAL_NVIC_EnableIRQ>
}
 8002064:	bf00      	nop
 8002066:	3780      	adds	r7, #128	@ 0x80
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40004400 	.word	0x40004400
 8002070:	40021000 	.word	0x40021000
 8002074:	40004800 	.word	0x40004800
 8002078:	48000800 	.word	0x48000800

0800207c <Shell_Init>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;
int currentSpeed = 0;  // Vitesse actuelle du moteur

void Shell_Init(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 8002080:	2224      	movs	r2, #36	@ 0x24
 8002082:	2100      	movs	r1, #0
 8002084:	4816      	ldr	r0, [pc, #88]	@ (80020e0 <Shell_Init+0x64>)
 8002086:	f009 f89c 	bl	800b1c2 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 800208a:	2240      	movs	r2, #64	@ 0x40
 800208c:	2100      	movs	r1, #0
 800208e:	4815      	ldr	r0, [pc, #84]	@ (80020e4 <Shell_Init+0x68>)
 8002090:	f009 f897 	bl	800b1c2 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 8002094:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <Shell_Init+0x6c>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	2100      	movs	r1, #0
 800209e:	4813      	ldr	r0, [pc, #76]	@ (80020ec <Shell_Init+0x70>)
 80020a0:	f009 f88f 	bl	800b1c2 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80020a4:	2201      	movs	r2, #1
 80020a6:	4910      	ldr	r1, [pc, #64]	@ (80020e8 <Shell_Init+0x6c>)
 80020a8:	4811      	ldr	r0, [pc, #68]	@ (80020f0 <Shell_Init+0x74>)
 80020aa:	f006 f899 	bl	80081e0 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80020ae:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <Shell_Init+0x78>)
 80020b0:	f7fe f916 	bl	80002e0 <strlen>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
 80020bc:	490d      	ldr	r1, [pc, #52]	@ (80020f4 <Shell_Init+0x78>)
 80020be:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <Shell_Init+0x74>)
 80020c0:	f005 fff7 	bl	80080b2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <Shell_Init+0x7c>)
 80020c6:	f7fe f90b 	bl	80002e0 <strlen>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	4909      	ldr	r1, [pc, #36]	@ (80020f8 <Shell_Init+0x7c>)
 80020d4:	4806      	ldr	r0, [pc, #24]	@ (80020f0 <Shell_Init+0x74>)
 80020d6:	f005 ffec 	bl	80080b2 <HAL_UART_Transmit>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000061c 	.word	0x2000061c
 80020e4:	200005d8 	.word	0x200005d8
 80020e8:	20000594 	.word	0x20000594
 80020ec:	20000598 	.word	0x20000598
 80020f0:	20000470 	.word	0x20000470
 80020f4:	20000020 	.word	0x20000020
 80020f8:	20000004 	.word	0x20000004

080020fc <SpeedCommand>:
// Fonction pour définir la vitesse via PWM
void SpeedCommand(int speedValue) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	// Limite la valeur de speed à la vitesse maximale autorisée
	if (speedValue > MAX_SPEED) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800210a:	dc04      	bgt.n	8002116 <SpeedCommand+0x1a>

	} else if (speedValue < 0) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	da01      	bge.n	8002116 <SpeedCommand+0x1a>

		speedValue = 0; // Assure que la valeur minimale est 0
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
                if (currentSpeed < speedValue) {
                    currentSpeed = speedValue;
                }
            }*/
	// Calcule la valeur de PWM correspondante
	uint32_t pulseValue1 = (uint32_t)((speedValue * __HAL_TIM_GET_AUTORELOAD(&htim1)) / MAX_SPEED);
 8002116:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <SpeedCommand+0xb4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	4a24      	ldr	r2, [pc, #144]	@ (80021b4 <SpeedCommand+0xb8>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	60fb      	str	r3, [r7, #12]
	uint32_t pulseValue2= (uint32_t)(((MAX_SPEED-speedValue) * __HAL_TIM_GET_AUTORELOAD(&htim1)) / MAX_SPEED);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8002132:	461a      	mov	r2, r3
 8002134:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <SpeedCommand+0xb4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <SpeedCommand+0xb8>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseValue1);
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <SpeedCommand+0xb4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulseValue2);
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <SpeedCommand+0xb4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	639a      	str	r2, [r3, #56]	@ 0x38
	if (speedValue > MAX_SPEED) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800215e:	dd11      	ble.n	8002184 <SpeedCommand+0x88>
		snprintf((char *)uartTxBuffer, sizeof(uartTxBuffer), "La vitesse a depassé la limite", speedValue);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a15      	ldr	r2, [pc, #84]	@ (80021b8 <SpeedCommand+0xbc>)
 8002164:	2140      	movs	r1, #64	@ 0x40
 8002166:	4815      	ldr	r0, [pc, #84]	@ (80021bc <SpeedCommand+0xc0>)
 8002168:	f008 ff94 	bl	800b094 <sniprintf>
		HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
 800216c:	4813      	ldr	r0, [pc, #76]	@ (80021bc <SpeedCommand+0xc0>)
 800216e:	f7fe f8b7 	bl	80002e0 <strlen>
 8002172:	4603      	mov	r3, r0
 8002174:	b29a      	uxth	r2, r3
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	4910      	ldr	r1, [pc, #64]	@ (80021bc <SpeedCommand+0xc0>)
 800217c:	4810      	ldr	r0, [pc, #64]	@ (80021c0 <SpeedCommand+0xc4>)
 800217e:	f005 ff98 	bl	80080b2 <HAL_UART_Transmit>
	}else {
		// Envoie une confirmation par UART
		snprintf((char *)uartTxBuffer, sizeof(uartTxBuffer), "Speed set to %d\r\n", speedValue);
		HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
	}
}
 8002182:	e010      	b.n	80021a6 <SpeedCommand+0xaa>
		snprintf((char *)uartTxBuffer, sizeof(uartTxBuffer), "Speed set to %d\r\n", speedValue);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <SpeedCommand+0xc8>)
 8002188:	2140      	movs	r1, #64	@ 0x40
 800218a:	480c      	ldr	r0, [pc, #48]	@ (80021bc <SpeedCommand+0xc0>)
 800218c:	f008 ff82 	bl	800b094 <sniprintf>
		HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
 8002190:	480a      	ldr	r0, [pc, #40]	@ (80021bc <SpeedCommand+0xc0>)
 8002192:	f7fe f8a5 	bl	80002e0 <strlen>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	4907      	ldr	r1, [pc, #28]	@ (80021bc <SpeedCommand+0xc0>)
 80021a0:	4807      	ldr	r0, [pc, #28]	@ (80021c0 <SpeedCommand+0xc4>)
 80021a2:	f005 ff86 	bl	80080b2 <HAL_UART_Transmit>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200003d8 	.word	0x200003d8
 80021b4:	10624dd3 	.word	0x10624dd3
 80021b8:	0800e948 	.word	0x0800e948
 80021bc:	20000598 	.word	0x20000598
 80021c0:	20000470 	.word	0x20000470
 80021c4:	0800e968 	.word	0x0800e968

080021c8 <read_current_polling>:
float read_current_polling()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af00      	add	r7, sp, #0
	uint32_t adc_value = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
	double V = 0;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double I = 0;
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double sensibilité = 0.05;
 80021ea:	a335      	add	r3, pc, #212	@ (adr r3, 80022c0 <read_current_polling+0xf8>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double VREF=3.3;
 80021f4:	a334      	add	r3, pc, #208	@ (adr r3, 80022c8 <read_current_polling+0x100>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double ADC_MAX_Value =4096.0;
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <read_current_polling+0xe8>)
 8002204:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_ADC_Start(&hadc1);
 8002208:	482a      	ldr	r0, [pc, #168]	@ (80022b4 <read_current_polling+0xec>)
 800220a:	f000 feeb 	bl	8002fe4 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 800220e:	f04f 31ff 	mov.w	r1, #4294967295
 8002212:	4828      	ldr	r0, [pc, #160]	@ (80022b4 <read_current_polling+0xec>)
 8002214:	f000 fffe 	bl	8003214 <HAL_ADC_PollForConversion>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d139      	bne.n	8002292 <read_current_polling+0xca>
	{

		adc_value = HAL_ADC_GetValue(&hadc1);
 800221e:	4825      	ldr	r0, [pc, #148]	@ (80022b4 <read_current_polling+0xec>)
 8002220:	f001 f8fe 	bl	8003420 <HAL_ADC_GetValue>
 8002224:	6278      	str	r0, [r7, #36]	@ 0x24
		//snprintf((char *)uartTxBuffer, sizeof(uartTxBuffer), "\r\nADC value: %.2f\r\n", (int)adc_value);
		//HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
		printf("\r\nADC value: %d\r\n", adc_value);
 8002226:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002228:	4823      	ldr	r0, [pc, #140]	@ (80022b8 <read_current_polling+0xf0>)
 800222a:	f008 ff21 	bl	800b070 <iprintf>


		V= (adc_value * VREF) / ADC_MAX_Value;
 800222e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002230:	f7fe f9a0 	bl	8000574 <__aeabi_ui2d>
 8002234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002238:	f7fe fa16 	bl	8000668 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002248:	f7fe fb38 	bl	80008bc <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9c7 2306 	strd	r2, r3, [r7, #24]

		I= (V - VREF/2) / (sensibilité);
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800225c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002260:	f7fe fb2c 	bl	80008bc <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800226c:	f7fe f844 	bl	80002f8 <__aeabi_dsub>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800227c:	f7fe fb1e 	bl	80008bc <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		printf("\r\nMeasured current: %.2f A\r\n", I);
 8002288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800228c:	480b      	ldr	r0, [pc, #44]	@ (80022bc <read_current_polling+0xf4>)
 800228e:	f008 feef 	bl	800b070 <iprintf>
	}

	// 6. Arrêter l'ADC
	HAL_ADC_Stop(&hadc1);
 8002292:	4808      	ldr	r0, [pc, #32]	@ (80022b4 <read_current_polling+0xec>)
 8002294:	f000 ff8a 	bl	80031ac <HAL_ADC_Stop>

	// Retourner la valeur mesurée du courant
	return (float)I;
 8002298:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800229c:	f7fe fcdc 	bl	8000c58 <__aeabi_d2f>
 80022a0:	4603      	mov	r3, r0
 80022a2:	ee07 3a90 	vmov	s15, r3
}
 80022a6:	eeb0 0a67 	vmov.f32	s0, s15
 80022aa:	3730      	adds	r7, #48	@ 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40b00000 	.word	0x40b00000
 80022b4:	200002ac 	.word	0x200002ac
 80022b8:	0800e97c 	.word	0x0800e97c
 80022bc:	0800e990 	.word	0x0800e990
 80022c0:	9999999a 	.word	0x9999999a
 80022c4:	3fa99999 	.word	0x3fa99999
 80022c8:	66666666 	.word	0x66666666
 80022cc:	400a6666 	.word	0x400a6666

080022d0 <StopMotor>:



//stop function
void StopMotor(void) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	// Arrêt du PWM
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80022d4:	2100      	movs	r1, #0
 80022d6:	4813      	ldr	r0, [pc, #76]	@ (8002324 <StopMotor+0x54>)
 80022d8:	f004 f8a4 	bl	8006424 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_1);
 80022dc:	2100      	movs	r1, #0
 80022de:	4811      	ldr	r0, [pc, #68]	@ (8002324 <StopMotor+0x54>)
 80022e0:	f005 fc28 	bl	8007b34 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80022e4:	2104      	movs	r1, #4
 80022e6:	480f      	ldr	r0, [pc, #60]	@ (8002324 <StopMotor+0x54>)
 80022e8:	f004 f89c 	bl	8006424 <HAL_TIM_PWM_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim1, TIM_CHANNEL_2);
 80022ec:	2104      	movs	r1, #4
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <StopMotor+0x54>)
 80022f0:	f005 fc20 	bl	8007b34 <HAL_TIMEx_PWMN_Stop_IT>

	snprintf((char *)uartTxBuffer, sizeof(uartTxBuffer), "Motor stopped\r\n");
 80022f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002328 <StopMotor+0x58>)
 80022f6:	2140      	movs	r1, #64	@ 0x40
 80022f8:	480c      	ldr	r0, [pc, #48]	@ (800232c <StopMotor+0x5c>)
 80022fa:	f008 fecb 	bl	800b094 <sniprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
 80022fe:	480b      	ldr	r0, [pc, #44]	@ (800232c <StopMotor+0x5c>)
 8002300:	f7fd ffee 	bl	80002e0 <strlen>
 8002304:	4603      	mov	r3, r0
 8002306:	b29a      	uxth	r2, r3
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	4907      	ldr	r1, [pc, #28]	@ (800232c <StopMotor+0x5c>)
 800230e:	4808      	ldr	r0, [pc, #32]	@ (8002330 <StopMotor+0x60>)
 8002310:	f005 fecf 	bl	80080b2 <HAL_UART_Transmit>

	// Relancer la réception UART
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002314:	2201      	movs	r2, #1
 8002316:	4907      	ldr	r1, [pc, #28]	@ (8002334 <StopMotor+0x64>)
 8002318:	4805      	ldr	r0, [pc, #20]	@ (8002330 <StopMotor+0x60>)
 800231a:	f005 ff61 	bl	80081e0 <HAL_UART_Receive_IT>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200003d8 	.word	0x200003d8
 8002328:	0800e9b0 	.word	0x0800e9b0
 800232c:	20000598 	.word	0x20000598
 8002330:	20000470 	.word	0x20000470
 8002334:	20000594 	.word	0x20000594

08002338 <StartMotor>:

//Start function
void StartMotor(void) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
	uint32_t midDutyCycle = __HAL_TIM_GET_AUTORELOAD(&htim1) / 2;
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <StartMotor+0x74>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, midDutyCycle);
 8002348:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <StartMotor+0x74>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, midDutyCycle);
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <StartMotor+0x74>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38

	// Démarrage du PWM sans arrêter les interruptions
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8002358:	2100      	movs	r1, #0
 800235a:	4814      	ldr	r0, [pc, #80]	@ (80023ac <StartMotor+0x74>)
 800235c:	f003 ff02 	bl	8006164 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8002360:	2100      	movs	r1, #0
 8002362:	4812      	ldr	r0, [pc, #72]	@ (80023ac <StartMotor+0x74>)
 8002364:	f005 fad0 	bl	8007908 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8002368:	2104      	movs	r1, #4
 800236a:	4810      	ldr	r0, [pc, #64]	@ (80023ac <StartMotor+0x74>)
 800236c:	f003 fefa 	bl	8006164 <HAL_TIM_PWM_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8002370:	2104      	movs	r1, #4
 8002372:	480e      	ldr	r0, [pc, #56]	@ (80023ac <StartMotor+0x74>)
 8002374:	f005 fac8 	bl	8007908 <HAL_TIMEx_PWMN_Start_IT>

	snprintf((char *)uartTxBuffer, sizeof(uartTxBuffer), "Motor started with 50%% duty cycle\r\n");
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <StartMotor+0x78>)
 800237a:	2140      	movs	r1, #64	@ 0x40
 800237c:	480d      	ldr	r0, [pc, #52]	@ (80023b4 <StartMotor+0x7c>)
 800237e:	f008 fe89 	bl	800b094 <sniprintf>
	HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
 8002382:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <StartMotor+0x7c>)
 8002384:	f7fd ffac 	bl	80002e0 <strlen>
 8002388:	4603      	mov	r3, r0
 800238a:	b29a      	uxth	r2, r3
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <StartMotor+0x7c>)
 8002392:	4809      	ldr	r0, [pc, #36]	@ (80023b8 <StartMotor+0x80>)
 8002394:	f005 fe8d 	bl	80080b2 <HAL_UART_Transmit>

	// Relancer la réception UART
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002398:	2201      	movs	r2, #1
 800239a:	4908      	ldr	r1, [pc, #32]	@ (80023bc <StartMotor+0x84>)
 800239c:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <StartMotor+0x80>)
 800239e:	f005 ff1f 	bl	80081e0 <HAL_UART_Receive_IT>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200003d8 	.word	0x200003d8
 80023b0:	0800e9c0 	.word	0x0800e9c0
 80023b4:	20000598 	.word	0x20000598
 80023b8:	20000470 	.word	0x20000470
 80023bc:	20000594 	.word	0x20000594

080023c0 <Shell_Loop>:

void Shell_Loop(void){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
	if(uartRxReceived){
 80023c6:	4b89      	ldr	r3, [pc, #548]	@ (80025ec <Shell_Loop+0x22c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d05b      	beq.n	8002486 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80023ce:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <Shell_Loop+0x230>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d034      	beq.n	8002440 <Shell_Loop+0x80>
 80023d6:	2b0d      	cmp	r3, #13
 80023d8:	d142      	bne.n	8002460 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	2203      	movs	r2, #3
 80023e0:	4984      	ldr	r1, [pc, #528]	@ (80025f4 <Shell_Loop+0x234>)
 80023e2:	4885      	ldr	r0, [pc, #532]	@ (80025f8 <Shell_Loop+0x238>)
 80023e4:	f005 fe65 	bl	80080b2 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80023e8:	4b84      	ldr	r3, [pc, #528]	@ (80025fc <Shell_Loop+0x23c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a84      	ldr	r2, [pc, #528]	@ (8002600 <Shell_Loop+0x240>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80023f2:	4b84      	ldr	r3, [pc, #528]	@ (8002604 <Shell_Loop+0x244>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80023f8:	4983      	ldr	r1, [pc, #524]	@ (8002608 <Shell_Loop+0x248>)
 80023fa:	4881      	ldr	r0, [pc, #516]	@ (8002600 <Shell_Loop+0x240>)
 80023fc:	f008 feea 	bl	800b1d4 <strtok>
 8002400:	4603      	mov	r3, r0
 8002402:	4a82      	ldr	r2, [pc, #520]	@ (800260c <Shell_Loop+0x24c>)
 8002404:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002406:	e010      	b.n	800242a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002408:	4b7e      	ldr	r3, [pc, #504]	@ (8002604 <Shell_Loop+0x244>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	497d      	ldr	r1, [pc, #500]	@ (8002604 <Shell_Loop+0x244>)
 8002410:	600a      	str	r2, [r1, #0]
 8002412:	4a7e      	ldr	r2, [pc, #504]	@ (800260c <Shell_Loop+0x24c>)
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	497e      	ldr	r1, [pc, #504]	@ (8002610 <Shell_Loop+0x250>)
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800241c:	497a      	ldr	r1, [pc, #488]	@ (8002608 <Shell_Loop+0x248>)
 800241e:	2000      	movs	r0, #0
 8002420:	f008 fed8 	bl	800b1d4 <strtok>
 8002424:	4603      	mov	r3, r0
 8002426:	4a79      	ldr	r2, [pc, #484]	@ (800260c <Shell_Loop+0x24c>)
 8002428:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800242a:	4b78      	ldr	r3, [pc, #480]	@ (800260c <Shell_Loop+0x24c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ea      	bne.n	8002408 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002432:	4b72      	ldr	r3, [pc, #456]	@ (80025fc <Shell_Loop+0x23c>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002438:	4b76      	ldr	r3, [pc, #472]	@ (8002614 <Shell_Loop+0x254>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]
			break;
 800243e:	e01f      	b.n	8002480 <Shell_Loop+0xc0>


		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002440:	4b6e      	ldr	r3, [pc, #440]	@ (80025fc <Shell_Loop+0x23c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	496d      	ldr	r1, [pc, #436]	@ (80025fc <Shell_Loop+0x23c>)
 8002448:	600a      	str	r2, [r1, #0]
 800244a:	4a6d      	ldr	r2, [pc, #436]	@ (8002600 <Shell_Loop+0x240>)
 800244c:	2100      	movs	r1, #0
 800244e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	2204      	movs	r2, #4
 8002456:	4970      	ldr	r1, [pc, #448]	@ (8002618 <Shell_Loop+0x258>)
 8002458:	4867      	ldr	r0, [pc, #412]	@ (80025f8 <Shell_Loop+0x238>)
 800245a:	f005 fe2a 	bl	80080b2 <HAL_UART_Transmit>
			break;
 800245e:	e00f      	b.n	8002480 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002460:	4b66      	ldr	r3, [pc, #408]	@ (80025fc <Shell_Loop+0x23c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	4965      	ldr	r1, [pc, #404]	@ (80025fc <Shell_Loop+0x23c>)
 8002468:	600a      	str	r2, [r1, #0]
 800246a:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <Shell_Loop+0x230>)
 800246c:	7811      	ldrb	r1, [r2, #0]
 800246e:	4a64      	ldr	r2, [pc, #400]	@ (8002600 <Shell_Loop+0x240>)
 8002470:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	2201      	movs	r2, #1
 8002478:	495d      	ldr	r1, [pc, #372]	@ (80025f0 <Shell_Loop+0x230>)
 800247a:	485f      	ldr	r0, [pc, #380]	@ (80025f8 <Shell_Loop+0x238>)
 800247c:	f005 fe19 	bl	80080b2 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002480:	4b5a      	ldr	r3, [pc, #360]	@ (80025ec <Shell_Loop+0x22c>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
	}


	if (newCmdReady) {
 8002486:	4b63      	ldr	r3, [pc, #396]	@ (8002614 <Shell_Loop+0x254>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a9 	beq.w	80025e2 <Shell_Loop+0x222>
		if (strcmp(argv[0], "current") == 0) {
 8002490:	4b5f      	ldr	r3, [pc, #380]	@ (8002610 <Shell_Loop+0x250>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4961      	ldr	r1, [pc, #388]	@ (800261c <Shell_Loop+0x25c>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd fec2 	bl	8000220 <strcmp>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d11b      	bne.n	80024da <Shell_Loop+0x11a>
			float currentValue = read_current_polling();
 80024a2:	f7ff fe91 	bl	80021c8 <read_current_polling>
 80024a6:	ed87 0a01 	vstr	s0, [r7, #4]
			snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Current: %.2f A\r\n", currentValue);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f884 	bl	80005b8 <__aeabi_f2d>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9cd 2300 	strd	r2, r3, [sp]
 80024b8:	4a59      	ldr	r2, [pc, #356]	@ (8002620 <Shell_Loop+0x260>)
 80024ba:	2140      	movs	r1, #64	@ 0x40
 80024bc:	4859      	ldr	r0, [pc, #356]	@ (8002624 <Shell_Loop+0x264>)
 80024be:	f008 fde9 	bl	800b094 <sniprintf>
			HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
 80024c2:	4858      	ldr	r0, [pc, #352]	@ (8002624 <Shell_Loop+0x264>)
 80024c4:	f7fd ff0c 	bl	80002e0 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	4954      	ldr	r1, [pc, #336]	@ (8002624 <Shell_Loop+0x264>)
 80024d2:	4849      	ldr	r0, [pc, #292]	@ (80025f8 <Shell_Loop+0x238>)
 80024d4:	f005 fded 	bl	80080b2 <HAL_UART_Transmit>
 80024d8:	e079      	b.n	80025ce <Shell_Loop+0x20e>
		}
		else if (strcmp(argv[0], "WhereisBrian?") == 0) {
 80024da:	4b4d      	ldr	r3, [pc, #308]	@ (8002610 <Shell_Loop+0x250>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4952      	ldr	r1, [pc, #328]	@ (8002628 <Shell_Loop+0x268>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd fe9d 	bl	8000220 <strcmp>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <Shell_Loop+0x13c>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	221a      	movs	r2, #26
 80024f2:	494e      	ldr	r1, [pc, #312]	@ (800262c <Shell_Loop+0x26c>)
 80024f4:	4840      	ldr	r0, [pc, #256]	@ (80025f8 <Shell_Loop+0x238>)
 80024f6:	f005 fddc 	bl	80080b2 <HAL_UART_Transmit>
 80024fa:	e068      	b.n	80025ce <Shell_Loop+0x20e>
		} else if (strcmp(argv[0], "help") == 0) {
 80024fc:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <Shell_Loop+0x250>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	494b      	ldr	r1, [pc, #300]	@ (8002630 <Shell_Loop+0x270>)
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd fe8c 	bl	8000220 <strcmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10e      	bne.n	800252c <Shell_Loop+0x16c>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE,
 800250e:	4a49      	ldr	r2, [pc, #292]	@ (8002634 <Shell_Loop+0x274>)
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	4844      	ldr	r0, [pc, #272]	@ (8002624 <Shell_Loop+0x264>)
 8002514:	f008 fdbe 	bl	800b094 <sniprintf>
 8002518:	60b8      	str	r0, [r7, #8]
					"Available commands:\r\n- WhereisBrian?\r\n- help\r\n- start\r\n- stop\r\n- speed <value>\r\n");
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	b29a      	uxth	r2, r3
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	4940      	ldr	r1, [pc, #256]	@ (8002624 <Shell_Loop+0x264>)
 8002524:	4834      	ldr	r0, [pc, #208]	@ (80025f8 <Shell_Loop+0x238>)
 8002526:	f005 fdc4 	bl	80080b2 <HAL_UART_Transmit>
 800252a:	e050      	b.n	80025ce <Shell_Loop+0x20e>
		} else if (strcmp(argv[0], "start") == 0) {
 800252c:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <Shell_Loop+0x250>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4941      	ldr	r1, [pc, #260]	@ (8002638 <Shell_Loop+0x278>)
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd fe74 	bl	8000220 <strcmp>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <Shell_Loop+0x18e>
			StartMotor();
 800253e:	f7ff fefb 	bl	8002338 <StartMotor>
			HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE); // Relancer la réception UART
 8002542:	2201      	movs	r2, #1
 8002544:	492a      	ldr	r1, [pc, #168]	@ (80025f0 <Shell_Loop+0x230>)
 8002546:	482c      	ldr	r0, [pc, #176]	@ (80025f8 <Shell_Loop+0x238>)
 8002548:	f005 fe4a 	bl	80081e0 <HAL_UART_Receive_IT>
 800254c:	e03f      	b.n	80025ce <Shell_Loop+0x20e>

		} else if (strcmp(argv[0], "stop") == 0) {
 800254e:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <Shell_Loop+0x250>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	493a      	ldr	r1, [pc, #232]	@ (800263c <Shell_Loop+0x27c>)
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd fe63 	bl	8000220 <strcmp>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <Shell_Loop+0x1b0>
			StopMotor();
 8002560:	f7ff feb6 	bl	80022d0 <StopMotor>
			HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE); // Relancer la réception UART
 8002564:	2201      	movs	r2, #1
 8002566:	4922      	ldr	r1, [pc, #136]	@ (80025f0 <Shell_Loop+0x230>)
 8002568:	4823      	ldr	r0, [pc, #140]	@ (80025f8 <Shell_Loop+0x238>)
 800256a:	f005 fe39 	bl	80081e0 <HAL_UART_Receive_IT>
 800256e:	e02e      	b.n	80025ce <Shell_Loop+0x20e>

		} else if (strcmp(argv[0], "speed") == 0) {
 8002570:	4b27      	ldr	r3, [pc, #156]	@ (8002610 <Shell_Loop+0x250>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4932      	ldr	r1, [pc, #200]	@ (8002640 <Shell_Loop+0x280>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd fe52 	bl	8000220 <strcmp>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11e      	bne.n	80025c0 <Shell_Loop+0x200>
			if (argc > 1) {
 8002582:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <Shell_Loop+0x244>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	dd09      	ble.n	800259e <Shell_Loop+0x1de>
				int speedValue = atoi(argv[1]);
 800258a:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <Shell_Loop+0x250>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	f007 fdb6 	bl	800a100 <atoi>
 8002594:	60f8      	str	r0, [r7, #12]
				SpeedCommand(speedValue);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fdb0 	bl	80020fc <SpeedCommand>
 800259c:	e017      	b.n	80025ce <Shell_Loop+0x20e>
			} else {
				snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Usage: speed <value>\r\n");
 800259e:	4a29      	ldr	r2, [pc, #164]	@ (8002644 <Shell_Loop+0x284>)
 80025a0:	2140      	movs	r1, #64	@ 0x40
 80025a2:	4820      	ldr	r0, [pc, #128]	@ (8002624 <Shell_Loop+0x264>)
 80025a4:	f008 fd76 	bl	800b094 <sniprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, strlen((char *)uartTxBuffer), HAL_MAX_DELAY);
 80025a8:	481e      	ldr	r0, [pc, #120]	@ (8002624 <Shell_Loop+0x264>)
 80025aa:	f7fd fe99 	bl	80002e0 <strlen>
 80025ae:	4603      	mov	r3, r0
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	491b      	ldr	r1, [pc, #108]	@ (8002624 <Shell_Loop+0x264>)
 80025b8:	480f      	ldr	r0, [pc, #60]	@ (80025f8 <Shell_Loop+0x238>)
 80025ba:	f005 fd7a 	bl	80080b2 <HAL_UART_Transmit>
 80025be:	e006      	b.n	80025ce <Shell_Loop+0x20e>
			}
		} else {
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	2214      	movs	r2, #20
 80025c6:	4920      	ldr	r1, [pc, #128]	@ (8002648 <Shell_Loop+0x288>)
 80025c8:	480b      	ldr	r0, [pc, #44]	@ (80025f8 <Shell_Loop+0x238>)
 80025ca:	f005 fd72 	bl	80080b2 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	221c      	movs	r2, #28
 80025d4:	491d      	ldr	r1, [pc, #116]	@ (800264c <Shell_Loop+0x28c>)
 80025d6:	4808      	ldr	r0, [pc, #32]	@ (80025f8 <Shell_Loop+0x238>)
 80025d8:	f005 fd6b 	bl	80080b2 <HAL_UART_Transmit>
		newCmdReady = 0;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <Shell_Loop+0x254>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
	}


}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000590 	.word	0x20000590
 80025f0:	20000594 	.word	0x20000594
 80025f4:	20000088 	.word	0x20000088
 80025f8:	20000470 	.word	0x20000470
 80025fc:	20000618 	.word	0x20000618
 8002600:	200005d8 	.word	0x200005d8
 8002604:	20000640 	.word	0x20000640
 8002608:	0800e9e8 	.word	0x0800e9e8
 800260c:	20000644 	.word	0x20000644
 8002610:	2000061c 	.word	0x2000061c
 8002614:	20000648 	.word	0x20000648
 8002618:	2000008c 	.word	0x2000008c
 800261c:	0800e9ec 	.word	0x0800e9ec
 8002620:	0800e9f4 	.word	0x0800e9f4
 8002624:	20000598 	.word	0x20000598
 8002628:	0800ea08 	.word	0x0800ea08
 800262c:	200000a4 	.word	0x200000a4
 8002630:	0800ea18 	.word	0x0800ea18
 8002634:	0800ea20 	.word	0x0800ea20
 8002638:	0800ea74 	.word	0x0800ea74
 800263c:	0800ea7c 	.word	0x0800ea7c
 8002640:	0800ea84 	.word	0x0800ea84
 8002644:	0800ea8c 	.word	0x0800ea8c
 8002648:	20000090 	.word	0x20000090
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <HAL_UART_RxCpltCallback+0x20>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE); // Relancer la réception UART
 800265e:	2201      	movs	r2, #1
 8002660:	4904      	ldr	r1, [pc, #16]	@ (8002674 <HAL_UART_RxCpltCallback+0x24>)
 8002662:	4805      	ldr	r0, [pc, #20]	@ (8002678 <HAL_UART_RxCpltCallback+0x28>)
 8002664:	f005 fdbc 	bl	80081e0 <HAL_UART_Receive_IT>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000590 	.word	0x20000590
 8002674:	20000594 	.word	0x20000594
 8002678:	20000470 	.word	0x20000470

0800267c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800267c:	480d      	ldr	r0, [pc, #52]	@ (80026b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800267e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480d      	ldr	r0, [pc, #52]	@ (80026b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002682:	490e      	ldr	r1, [pc, #56]	@ (80026bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002684:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <LoopForever+0xe>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002698:	4c0b      	ldr	r4, [pc, #44]	@ (80026c8 <LoopForever+0x16>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026a6:	f7ff f993 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026aa:	f008 fe3f 	bl	800b32c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ae:	f7fe ff5b 	bl	8001568 <main>

080026b2 <LoopForever>:

LoopForever:
    b LoopForever
 80026b2:	e7fe      	b.n	80026b2 <LoopForever>
  ldr   r0, =_estack
 80026b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80026c0:	0800ef7c 	.word	0x0800ef7c
  ldr r2, =_sbss
 80026c4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80026c8:	2000079c 	.word	0x2000079c

080026cc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC3_IRQHandler>

080026ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d8:	2003      	movs	r0, #3
 80026da:	f002 f8f8 	bl	80048ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026de:	200f      	movs	r0, #15
 80026e0:	f7fe ffe0 	bl	80016a4 <HAL_InitTick>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	71fb      	strb	r3, [r7, #7]
 80026ee:	e001      	b.n	80026f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026f0:	f7fe ffb4 	bl	800165c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f4:	79fb      	ldrb	r3, [r7, #7]

}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_IncTick+0x1c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_IncTick+0x20>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4413      	add	r3, r2
 800270e:	4a03      	ldr	r2, [pc, #12]	@ (800271c <HAL_IncTick+0x1c>)
 8002710:	6013      	str	r3, [r2, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	2000064c 	.word	0x2000064c
 8002720:	200000c4 	.word	0x200000c4

08002724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2000064c 	.word	0x2000064c

0800273c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	609a      	str	r2, [r3, #8]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3360      	adds	r3, #96	@ 0x60
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <LL_ADC_SetOffset+0x44>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	03fff000 	.word	0x03fff000

080027ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3360      	adds	r3, #96	@ 0x60
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3360      	adds	r3, #96	@ 0x60
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800284e:	b480      	push	{r7}
 8002850:	b087      	sub	sp, #28
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3360      	adds	r3, #96	@ 0x60
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	431a      	orrs	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3360      	adds	r3, #96	@ 0x60
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	615a      	str	r2, [r3, #20]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002906:	b480      	push	{r7}
 8002908:	b087      	sub	sp, #28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3330      	adds	r3, #48	@ 0x30
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	4413      	add	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	211f      	movs	r1, #31
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	401a      	ands	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 011f 	and.w	r1, r3, #31
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	431a      	orrs	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3314      	adds	r3, #20
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0e5b      	lsrs	r3, r3, #25
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0d1b      	lsrs	r3, r3, #20
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2107      	movs	r1, #7
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	0d1b      	lsrs	r3, r3, #20
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10a      	bne.n	8002a06 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002a04:	e00a      	b.n	8002a1c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	43db      	mvns	r3, r3
 8002a14:	401a      	ands	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	407f0000 	.word	0x407f0000

08002a2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 031f 	and.w	r3, r3, #31
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6093      	str	r3, [r2, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a9c:	d101      	bne.n	8002aa2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ac4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b3c:	f043 0202 	orr.w	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_IsEnabled+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_IsEnabled+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_IsDisableOngoing+0x18>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_IsDisableOngoing+0x1a>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bb0:	f043 0204 	orr.w	r2, r3, #4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bd8:	f043 0210 	orr.w	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d101      	bne.n	8002c04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b089      	sub	sp, #36	@ 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1af      	b.n	8002fda <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fe fac1 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fef1 	bl	8002a88 <LL_ADC_IsDeepPowerDownEnabled>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fed7 	bl	8002a64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff0c 	bl	8002ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fef0 	bl	8002ab0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd0:	4b9f      	ldr	r3, [pc, #636]	@ (8002f50 <HAL_ADC_Init+0x2f0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	4a9f      	ldr	r2, [pc, #636]	@ (8002f54 <HAL_ADC_Init+0x2f4>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ce4:	e002      	b.n	8002cec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f9      	bne.n	8002ce6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff feee 	bl	8002ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d06:	f043 0210 	orr.w	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff62 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 8002d28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 8148 	bne.w	8002fc8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 8144 	bne.w	8002fc8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d48:	f043 0202 	orr.w	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fefb 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d141      	bne.n	8002de4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d68:	d004      	beq.n	8002d74 <HAL_ADC_Init+0x114>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002f58 <HAL_ADC_Init+0x2f8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10f      	bne.n	8002d94 <HAL_ADC_Init+0x134>
 8002d74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d78:	f7ff feea 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	4876      	ldr	r0, [pc, #472]	@ (8002f58 <HAL_ADC_Init+0x2f8>)
 8002d80:	f7ff fee6 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4323      	orrs	r3, r4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e012      	b.n	8002dba <HAL_ADC_Init+0x15a>
 8002d94:	4871      	ldr	r0, [pc, #452]	@ (8002f5c <HAL_ADC_Init+0x2fc>)
 8002d96:	f7ff fedb 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	4870      	ldr	r0, [pc, #448]	@ (8002f60 <HAL_ADC_Init+0x300>)
 8002d9e:	f7ff fed7 	bl	8002b50 <LL_ADC_IsEnabled>
 8002da2:	4603      	mov	r3, r0
 8002da4:	431c      	orrs	r4, r3
 8002da6:	486f      	ldr	r0, [pc, #444]	@ (8002f64 <HAL_ADC_Init+0x304>)
 8002da8:	f7ff fed2 	bl	8002b50 <LL_ADC_IsEnabled>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4323      	orrs	r3, r4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d012      	beq.n	8002de4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADC_Init+0x172>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a62      	ldr	r2, [pc, #392]	@ (8002f58 <HAL_ADC_Init+0x2f8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_Init+0x176>
 8002dd2:	4a65      	ldr	r2, [pc, #404]	@ (8002f68 <HAL_ADC_Init+0x308>)
 8002dd4:	e000      	b.n	8002dd8 <HAL_ADC_Init+0x178>
 8002dd6:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_ADC_Init+0x30c>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7ff fcac 	bl	800273c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7f5b      	ldrb	r3, [r3, #29]
 8002de8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002df4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002dfa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e02:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e16:	3b01      	subs	r3, #1
 8002e18:	045b      	lsls	r3, r3, #17
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <HAL_ADC_Init+0x310>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff febe 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 8002e70:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fedf 	bl	8002c3a <LL_ADC_INJ_IsConversionOngoing>
 8002e7c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d17f      	bne.n	8002f84 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d17c      	bne.n	8002f84 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e8e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e96:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ea6:	f023 0302 	bic.w	r3, r3, #2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002eca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ed4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6911      	ldr	r1, [r2, #16]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002eea:	e013      	b.n	8002f14 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002efa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12a      	bne.n	8002f74 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f34:	4311      	orrs	r1, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f40:	430a      	orrs	r2, r1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	611a      	str	r2, [r3, #16]
 8002f4e:	e019      	b.n	8002f84 <HAL_ADC_Init+0x324>
 8002f50:	20000000 	.word	0x20000000
 8002f54:	053e2d63 	.word	0x053e2d63
 8002f58:	50000100 	.word	0x50000100
 8002f5c:	50000400 	.word	0x50000400
 8002f60:	50000500 	.word	0x50000500
 8002f64:	50000600 	.word	0x50000600
 8002f68:	50000300 	.word	0x50000300
 8002f6c:	50000700 	.word	0x50000700
 8002f70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f023 010f 	bic.w	r1, r3, #15
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fa4:	e007      	b.n	8002fb6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 020f 	bic.w	r2, r2, #15
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fc6:	e007      	b.n	8002fd8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fcc:	f043 0210 	orr.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff4:	d004      	beq.n	8003000 <HAL_ADC_Start+0x1c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a67      	ldr	r2, [pc, #412]	@ (8003198 <HAL_ADC_Start+0x1b4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_Start+0x20>
 8003000:	4b66      	ldr	r3, [pc, #408]	@ (800319c <HAL_ADC_Start+0x1b8>)
 8003002:	e000      	b.n	8003006 <HAL_ADC_Start+0x22>
 8003004:	4b66      	ldr	r3, [pc, #408]	@ (80031a0 <HAL_ADC_Start+0x1bc>)
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fd10 	bl	8002a2c <LL_ADC_GetMultimode>
 800300c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fdea 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 80b4 	bne.w	8003188 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_ADC_Start+0x4a>
 800302a:	2302      	movs	r3, #2
 800302c:	e0af      	b.n	800318e <HAL_ADC_Start+0x1aa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f001 f97a 	bl	8004330 <ADC_Enable>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 809b 	bne.w	800317e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a4d      	ldr	r2, [pc, #308]	@ (8003198 <HAL_ADC_Start+0x1b4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_ADC_Start+0x96>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4e      	ldr	r2, [pc, #312]	@ (80031a4 <HAL_ADC_Start+0x1c0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d002      	beq.n	8003076 <HAL_ADC_Start+0x92>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	e003      	b.n	800307e <HAL_ADC_Start+0x9a>
 8003076:	4b4c      	ldr	r3, [pc, #304]	@ (80031a8 <HAL_ADC_Start+0x1c4>)
 8003078:	e001      	b.n	800307e <HAL_ADC_Start+0x9a>
 800307a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	4293      	cmp	r3, r2
 8003084:	d002      	beq.n	800308c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030a4:	d106      	bne.n	80030b4 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030aa:	f023 0206 	bic.w	r2, r3, #6
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80030b2:	e002      	b.n	80030ba <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	221c      	movs	r2, #28
 80030c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a32      	ldr	r2, [pc, #200]	@ (8003198 <HAL_ADC_Start+0x1b4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_ADC_Start+0x104>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a32      	ldr	r2, [pc, #200]	@ (80031a4 <HAL_ADC_Start+0x1c0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d002      	beq.n	80030e4 <HAL_ADC_Start+0x100>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e003      	b.n	80030ec <HAL_ADC_Start+0x108>
 80030e4:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <HAL_ADC_Start+0x1c4>)
 80030e6:	e001      	b.n	80030ec <HAL_ADC_Start+0x108>
 80030e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d008      	beq.n	8003106 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d002      	beq.n	8003106 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b09      	cmp	r3, #9
 8003104:	d114      	bne.n	8003130 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800311c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fd37 	bl	8002b9c <LL_ADC_REG_StartConversion>
 800312e:	e02d      	b.n	800318c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a15      	ldr	r2, [pc, #84]	@ (8003198 <HAL_ADC_Start+0x1b4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_ADC_Start+0x176>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_ADC_Start+0x1c0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d002      	beq.n	8003156 <HAL_ADC_Start+0x172>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	e003      	b.n	800315e <HAL_ADC_Start+0x17a>
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <HAL_ADC_Start+0x1c4>)
 8003158:	e001      	b.n	800315e <HAL_ADC_Start+0x17a>
 800315a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800315e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003174:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800317c:	e006      	b.n	800318c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003186:	e001      	b.n	800318c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003188:	2302      	movs	r3, #2
 800318a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800318c:	7dfb      	ldrb	r3, [r7, #23]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	50000100 	.word	0x50000100
 800319c:	50000300 	.word	0x50000300
 80031a0:	50000700 	.word	0x50000700
 80031a4:	50000500 	.word	0x50000500
 80031a8:	50000400 	.word	0x50000400

080031ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_Stop+0x16>
 80031be:	2302      	movs	r3, #2
 80031c0:	e023      	b.n	800320a <HAL_ADC_Stop+0x5e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031ca:	2103      	movs	r1, #3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fff3 	bl	80041b8 <ADC_ConversionStop>
 80031d2:	4603      	mov	r3, r0
 80031d4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f001 f909 	bl	80043f4 <ADC_Disable>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003226:	d004      	beq.n	8003232 <HAL_ADC_PollForConversion+0x1e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a77      	ldr	r2, [pc, #476]	@ (800340c <HAL_ADC_PollForConversion+0x1f8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_ADC_PollForConversion+0x22>
 8003232:	4b77      	ldr	r3, [pc, #476]	@ (8003410 <HAL_ADC_PollForConversion+0x1fc>)
 8003234:	e000      	b.n	8003238 <HAL_ADC_PollForConversion+0x24>
 8003236:	4b77      	ldr	r3, [pc, #476]	@ (8003414 <HAL_ADC_PollForConversion+0x200>)
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fbf7 	bl	8002a2c <LL_ADC_GetMultimode>
 800323e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d102      	bne.n	800324e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003248:	2308      	movs	r3, #8
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	e037      	b.n	80032be <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b05      	cmp	r3, #5
 8003258:	d002      	beq.n	8003260 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b09      	cmp	r3, #9
 800325e:	d111      	bne.n	8003284 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0c1      	b.n	8003402 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800327e:	2304      	movs	r3, #4
 8003280:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003282:	e01c      	b.n	80032be <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800328c:	d004      	beq.n	8003298 <HAL_ADC_PollForConversion+0x84>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5e      	ldr	r2, [pc, #376]	@ (800340c <HAL_ADC_PollForConversion+0x1f8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_ADC_PollForConversion+0x88>
 8003298:	4b5d      	ldr	r3, [pc, #372]	@ (8003410 <HAL_ADC_PollForConversion+0x1fc>)
 800329a:	e000      	b.n	800329e <HAL_ADC_PollForConversion+0x8a>
 800329c:	4b5d      	ldr	r3, [pc, #372]	@ (8003414 <HAL_ADC_PollForConversion+0x200>)
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fbd2 	bl	8002a48 <LL_ADC_GetMultiDMATransfer>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0a3      	b.n	8003402 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80032ba:	2304      	movs	r3, #4
 80032bc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032be:	f7ff fa31 	bl	8002724 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032c4:	e021      	b.n	800330a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d01d      	beq.n	800330a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032ce:	f7ff fa29 	bl	8002724 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <HAL_ADC_PollForConversion+0xd0>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d112      	bne.n	800330a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	f043 0204 	orr.w	r2, r3, #4
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e07b      	b.n	8003402 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0d6      	beq.n	80032c6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fad9 	bl	80028e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01c      	beq.n	800336e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7f5b      	ldrb	r3, [r3, #29]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d118      	bne.n	800336e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d111      	bne.n	800336e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a26      	ldr	r2, [pc, #152]	@ (800340c <HAL_ADC_PollForConversion+0x1f8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_ADC_PollForConversion+0x178>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <HAL_ADC_PollForConversion+0x204>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d002      	beq.n	8003388 <HAL_ADC_PollForConversion+0x174>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	e003      	b.n	8003390 <HAL_ADC_PollForConversion+0x17c>
 8003388:	4b24      	ldr	r3, [pc, #144]	@ (800341c <HAL_ADC_PollForConversion+0x208>)
 800338a:	e001      	b.n	8003390 <HAL_ADC_PollForConversion+0x17c>
 800338c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	4293      	cmp	r3, r2
 8003396:	d008      	beq.n	80033aa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	d002      	beq.n	80033aa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b09      	cmp	r3, #9
 80033a8:	d104      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e014      	b.n	80033de <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a14      	ldr	r2, [pc, #80]	@ (800340c <HAL_ADC_PollForConversion+0x1f8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_ADC_PollForConversion+0x1be>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <HAL_ADC_PollForConversion+0x204>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d002      	beq.n	80033ce <HAL_ADC_PollForConversion+0x1ba>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	e003      	b.n	80033d6 <HAL_ADC_PollForConversion+0x1c2>
 80033ce:	4b13      	ldr	r3, [pc, #76]	@ (800341c <HAL_ADC_PollForConversion+0x208>)
 80033d0:	e001      	b.n	80033d6 <HAL_ADC_PollForConversion+0x1c2>
 80033d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d104      	bne.n	80033ee <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2208      	movs	r2, #8
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e008      	b.n	8003400 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	220c      	movs	r2, #12
 80033fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	50000100 	.word	0x50000100
 8003410:	50000300 	.word	0x50000300
 8003414:	50000700 	.word	0x50000700
 8003418:	50000500 	.word	0x50000500
 800341c:	50000400 	.word	0x50000400

08003420 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003460:	d004      	beq.n	800346c <HAL_ADC_IRQHandler+0x30>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a8e      	ldr	r2, [pc, #568]	@ (80036a0 <HAL_ADC_IRQHandler+0x264>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_ADC_IRQHandler+0x34>
 800346c:	4b8d      	ldr	r3, [pc, #564]	@ (80036a4 <HAL_ADC_IRQHandler+0x268>)
 800346e:	e000      	b.n	8003472 <HAL_ADC_IRQHandler+0x36>
 8003470:	4b8d      	ldr	r3, [pc, #564]	@ (80036a8 <HAL_ADC_IRQHandler+0x26c>)
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fada 	bl	8002a2c <LL_ADC_GetMultimode>
 8003478:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x78>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d012      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f001 f851 	bl	800454e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2202      	movs	r2, #2
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_IRQHandler+0x8c>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8094 	beq.w	80035fc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 808e 	beq.w	80035fc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f9ef 	bl	80028e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d072      	beq.n	80035ee <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a64      	ldr	r2, [pc, #400]	@ (80036a0 <HAL_ADC_IRQHandler+0x264>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_ADC_IRQHandler+0xea>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a65      	ldr	r2, [pc, #404]	@ (80036ac <HAL_ADC_IRQHandler+0x270>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d002      	beq.n	8003522 <HAL_ADC_IRQHandler+0xe6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	e003      	b.n	800352a <HAL_ADC_IRQHandler+0xee>
 8003522:	4b63      	ldr	r3, [pc, #396]	@ (80036b0 <HAL_ADC_IRQHandler+0x274>)
 8003524:	e001      	b.n	800352a <HAL_ADC_IRQHandler+0xee>
 8003526:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	4293      	cmp	r3, r2
 8003530:	d008      	beq.n	8003544 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d002      	beq.n	8003544 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b09      	cmp	r3, #9
 8003542:	d104      	bne.n	800354e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	e014      	b.n	8003578 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a53      	ldr	r2, [pc, #332]	@ (80036a0 <HAL_ADC_IRQHandler+0x264>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_ADC_IRQHandler+0x130>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a53      	ldr	r2, [pc, #332]	@ (80036ac <HAL_ADC_IRQHandler+0x270>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d002      	beq.n	8003568 <HAL_ADC_IRQHandler+0x12c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	e003      	b.n	8003570 <HAL_ADC_IRQHandler+0x134>
 8003568:	4b51      	ldr	r3, [pc, #324]	@ (80036b0 <HAL_ADC_IRQHandler+0x274>)
 800356a:	e001      	b.n	8003570 <HAL_ADC_IRQHandler+0x134>
 800356c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003570:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d135      	bne.n	80035ee <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d12e      	bne.n	80035ee <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fb29 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11a      	bne.n	80035d6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 020c 	bic.w	r2, r2, #12
 80035ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d112      	bne.n	80035ee <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035d4:	e00b      	b.n	80035ee <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035da:	f043 0210 	orr.w	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f984 	bl	80038fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	220c      	movs	r2, #12
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_ADC_IRQHandler+0x1d4>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80b3 	beq.w	8003782 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80ad 	beq.w	8003782 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff f98a 	bl	800295e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800364a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f945 	bl	80028e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003656:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a10      	ldr	r2, [pc, #64]	@ (80036a0 <HAL_ADC_IRQHandler+0x264>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_ADC_IRQHandler+0x23a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a11      	ldr	r2, [pc, #68]	@ (80036ac <HAL_ADC_IRQHandler+0x270>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d002      	beq.n	8003672 <HAL_ADC_IRQHandler+0x236>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	e003      	b.n	800367a <HAL_ADC_IRQHandler+0x23e>
 8003672:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <HAL_ADC_IRQHandler+0x274>)
 8003674:	e001      	b.n	800367a <HAL_ADC_IRQHandler+0x23e>
 8003676:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	4293      	cmp	r3, r2
 8003680:	d008      	beq.n	8003694 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b06      	cmp	r3, #6
 800368c:	d002      	beq.n	8003694 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b07      	cmp	r3, #7
 8003692:	d10f      	bne.n	80036b4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	e01f      	b.n	80036de <HAL_ADC_IRQHandler+0x2a2>
 800369e:	bf00      	nop
 80036a0:	50000100 	.word	0x50000100
 80036a4:	50000300 	.word	0x50000300
 80036a8:	50000700 	.word	0x50000700
 80036ac:	50000500 	.word	0x50000500
 80036b0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a8b      	ldr	r2, [pc, #556]	@ (80038e8 <HAL_ADC_IRQHandler+0x4ac>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_ADC_IRQHandler+0x296>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a8a      	ldr	r2, [pc, #552]	@ (80038ec <HAL_ADC_IRQHandler+0x4b0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d002      	beq.n	80036ce <HAL_ADC_IRQHandler+0x292>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e003      	b.n	80036d6 <HAL_ADC_IRQHandler+0x29a>
 80036ce:	4b88      	ldr	r3, [pc, #544]	@ (80038f0 <HAL_ADC_IRQHandler+0x4b4>)
 80036d0:	e001      	b.n	80036d6 <HAL_ADC_IRQHandler+0x29a>
 80036d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d047      	beq.n	8003774 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_ADC_IRQHandler+0x2c2>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d03f      	beq.n	8003774 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d13a      	bne.n	8003774 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003708:	2b40      	cmp	r3, #64	@ 0x40
 800370a:	d133      	bne.n	8003774 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d12e      	bne.n	8003774 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fa8d 	bl	8002c3a <LL_ADC_INJ_IsConversionOngoing>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11a      	bne.n	800375c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003734:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d112      	bne.n	8003774 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	65da      	str	r2, [r3, #92]	@ 0x5c
 800375a:	e00b      	b.n	8003774 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f043 0210 	orr.w	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fec2 	bl	80044fe <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2260      	movs	r2, #96	@ 0x60
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d011      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x374>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00c      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8b4 	bl	8003910 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2280      	movs	r2, #128	@ 0x80
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x3a4>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fea8 	bl	8004526 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <HAL_ADC_IRQHandler+0x3d4>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fe9a 	bl	800453a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d043      	beq.n	80038a2 <HAL_ADC_IRQHandler+0x466>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03e      	beq.n	80038a2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800382c:	2301      	movs	r3, #1
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003830:	e021      	b.n	8003876 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003840:	d004      	beq.n	800384c <HAL_ADC_IRQHandler+0x410>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a28      	ldr	r2, [pc, #160]	@ (80038e8 <HAL_ADC_IRQHandler+0x4ac>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_ADC_IRQHandler+0x414>
 800384c:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <HAL_ADC_IRQHandler+0x4b8>)
 800384e:	e000      	b.n	8003852 <HAL_ADC_IRQHandler+0x416>
 8003850:	4b29      	ldr	r3, [pc, #164]	@ (80038f8 <HAL_ADC_IRQHandler+0x4bc>)
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff f8f8 	bl	8002a48 <LL_ADC_GetMultiDMATransfer>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800385e:	2301      	movs	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	e008      	b.n	8003876 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003872:	2301      	movs	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10e      	bne.n	800389a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388c:	f043 0202 	orr.w	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f845 	bl	8003924 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2210      	movs	r2, #16
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d018      	beq.n	80038de <HAL_ADC_IRQHandler+0x4a2>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	f043 0208 	orr.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fe1a 	bl	8004512 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	@ 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	50000100 	.word	0x50000100
 80038ec:	50000500 	.word	0x50000500
 80038f0:	50000400 	.word	0x50000400
 80038f4:	50000300 	.word	0x50000300
 80038f8:	50000700 	.word	0x50000700

080038fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0b6      	sub	sp, #216	@ 0xd8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_ADC_ConfigChannel+0x24>
 8003956:	2302      	movs	r3, #2
 8003958:	f000 bc13 	b.w	8004182 <HAL_ADC_ConfigChannel+0x84a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f93f 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 83f3 	bne.w	800415c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f7fe ffbf 	bl	8002906 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff f92d 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 8003992:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f94d 	bl	8002c3a <LL_ADC_INJ_IsConversionOngoing>
 80039a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 81d9 	bne.w	8003d60 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 81d4 	bne.w	8003d60 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039c0:	d10f      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7fe ffd9 	bl	8002984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe ff6d 	bl	80028ba <LL_ADC_SetSamplingTimeCommonConfig>
 80039e0:	e00e      	b.n	8003a00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7fe ffc8 	bl	8002984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe ff5d 	bl	80028ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d022      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6919      	ldr	r1, [r3, #16]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a32:	f7fe feb7 	bl	80027a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6919      	ldr	r1, [r3, #16]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	461a      	mov	r2, r3
 8003a44:	f7fe ff03 	bl	800284e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6919      	ldr	r1, [r3, #16]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	7f1b      	ldrb	r3, [r3, #28]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x126>
 8003a58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a5c:	e000      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x128>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	461a      	mov	r2, r3
 8003a62:	f7fe ff0f 	bl	8002884 <LL_ADC_SetOffsetSaturation>
 8003a66:	e17b      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe febc 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x15c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe feb1 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	0e9b      	lsrs	r3, r3, #26
 8003a8e:	f003 021f 	and.w	r2, r3, #31
 8003a92:	e01e      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x19a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fea6 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	e004      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d105      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x1b2>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	e018      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x1e4>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e004      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d106      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fe75 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fe59 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x222>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fe4e 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003b50:	4603      	mov	r3, r0
 8003b52:	0e9b      	lsrs	r3, r3, #26
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	e01e      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x260>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fe43 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003b88:	2320      	movs	r3, #32
 8003b8a:	e004      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b90:	fab3 f383 	clz	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x278>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	e018      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x2aa>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	e004      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d106      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fe12 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fdf6 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x2e8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe fdeb 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003c16:	4603      	mov	r3, r0
 8003c18:	0e9b      	lsrs	r3, r3, #26
 8003c1a:	f003 021f 	and.w	r2, r3, #31
 8003c1e:	e01e      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x326>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2102      	movs	r1, #2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fde0 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003c4e:	2320      	movs	r3, #32
 8003c50:	e004      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x33e>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	0e9b      	lsrs	r3, r3, #26
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	e016      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x36c>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003c96:	2320      	movs	r3, #32
 8003c98:	e004      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fdb1 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2103      	movs	r1, #3
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fd95 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x3aa>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2103      	movs	r1, #3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fd8a 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	0e9b      	lsrs	r3, r3, #26
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	e017      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x3da>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2103      	movs	r1, #3
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fd7f 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003d04:	2320      	movs	r3, #32
 8003d06:	e003      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x3f2>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0e9b      	lsrs	r3, r3, #26
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	e011      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x416>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003d42:	2320      	movs	r3, #32
 8003d44:	e003      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d106      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	2103      	movs	r1, #3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fd5c 	bl	8002818 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fef3 	bl	8002b50 <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 813d 	bne.w	8003fec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fe fe2c 	bl	80029dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4aa2      	ldr	r2, [pc, #648]	@ (8004014 <HAL_ADC_ConfigChannel+0x6dc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	f040 812e 	bne.w	8003fec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x480>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	3301      	adds	r3, #1
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	bf94      	ite	ls
 8003db0:	2301      	movls	r3, #1
 8003db2:	2300      	movhi	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e019      	b.n	8003dec <HAL_ADC_ConfigChannel+0x4b4>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	e003      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	2b09      	cmp	r3, #9
 8003de4:	bf94      	ite	ls
 8003de6:	2301      	movls	r3, #1
 8003de8:	2300      	movhi	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d079      	beq.n	8003ee4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x4d4>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	3301      	adds	r3, #1
 8003e04:	069b      	lsls	r3, r3, #26
 8003e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e0a:	e015      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x500>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e003      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	069b      	lsls	r3, r3, #26
 8003e34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x520>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	0e9b      	lsrs	r3, r3, #26
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	e017      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x550>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003e70:	2320      	movs	r3, #32
 8003e72:	e003      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2101      	movs	r1, #1
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	ea42 0103 	orr.w	r1, r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x576>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	0e9b      	lsrs	r3, r3, #26
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f003 021f 	and.w	r2, r3, #31
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	051b      	lsls	r3, r3, #20
 8003eac:	e018      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x5a8>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	e003      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	e07e      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x5c8>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	0e9b      	lsrs	r3, r3, #26
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	069b      	lsls	r3, r3, #26
 8003efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003efe:	e015      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x5f4>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	e003      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	3301      	adds	r3, #1
 8003f26:	069b      	lsls	r3, r3, #26
 8003f28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x614>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	e017      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x644>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	61fb      	str	r3, [r7, #28]
  return result;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e003      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	ea42 0103 	orr.w	r1, r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x670>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	3301      	adds	r3, #1
 8003f94:	f003 021f 	and.w	r2, r3, #31
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3b1e      	subs	r3, #30
 8003fa0:	051b      	lsls	r3, r3, #20
 8003fa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fa6:	e01b      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x6a8>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	613b      	str	r3, [r7, #16]
  return result;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e003      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f003 021f 	and.w	r2, r3, #31
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3b1e      	subs	r3, #30
 8003fda:	051b      	lsls	r3, r3, #20
 8003fdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f7fe fccc 	bl	8002984 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_ADC_ConfigChannel+0x6e0>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80be 	beq.w	8004176 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004002:	d004      	beq.n	800400e <HAL_ADC_ConfigChannel+0x6d6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a04      	ldr	r2, [pc, #16]	@ (800401c <HAL_ADC_ConfigChannel+0x6e4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x6ec>
 800400e:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <HAL_ADC_ConfigChannel+0x6e8>)
 8004010:	e009      	b.n	8004026 <HAL_ADC_ConfigChannel+0x6ee>
 8004012:	bf00      	nop
 8004014:	407f0000 	.word	0x407f0000
 8004018:	80080000 	.word	0x80080000
 800401c:	50000100 	.word	0x50000100
 8004020:	50000300 	.word	0x50000300
 8004024:	4b59      	ldr	r3, [pc, #356]	@ (800418c <HAL_ADC_ConfigChannel+0x854>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fbae 	bl	8002788 <LL_ADC_GetCommonPathInternalCh>
 800402c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a56      	ldr	r2, [pc, #344]	@ (8004190 <HAL_ADC_ConfigChannel+0x858>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_ADC_ConfigChannel+0x70c>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a55      	ldr	r2, [pc, #340]	@ (8004194 <HAL_ADC_ConfigChannel+0x85c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d13a      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d134      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004058:	d005      	beq.n	8004066 <HAL_ADC_ConfigChannel+0x72e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <HAL_ADC_ConfigChannel+0x860>)
 8004060:	4293      	cmp	r3, r2
 8004062:	f040 8085 	bne.w	8004170 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800406e:	d004      	beq.n	800407a <HAL_ADC_ConfigChannel+0x742>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a49      	ldr	r2, [pc, #292]	@ (800419c <HAL_ADC_ConfigChannel+0x864>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_ADC_ConfigChannel+0x746>
 800407a:	4a49      	ldr	r2, [pc, #292]	@ (80041a0 <HAL_ADC_ConfigChannel+0x868>)
 800407c:	e000      	b.n	8004080 <HAL_ADC_ConfigChannel+0x748>
 800407e:	4a43      	ldr	r2, [pc, #268]	@ (800418c <HAL_ADC_ConfigChannel+0x854>)
 8004080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004084:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f7fe fb69 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004090:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <HAL_ADC_ConfigChannel+0x86c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	4a44      	ldr	r2, [pc, #272]	@ (80041a8 <HAL_ADC_ConfigChannel+0x870>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b8:	e05a      	b.n	8004170 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3b      	ldr	r2, [pc, #236]	@ (80041ac <HAL_ADC_ConfigChannel+0x874>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d125      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x7d8>
 80040c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11f      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a31      	ldr	r2, [pc, #196]	@ (800419c <HAL_ADC_ConfigChannel+0x864>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d104      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x7ac>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a34      	ldr	r2, [pc, #208]	@ (80041b0 <HAL_ADC_ConfigChannel+0x878>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d047      	beq.n	8004174 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ec:	d004      	beq.n	80040f8 <HAL_ADC_ConfigChannel+0x7c0>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2a      	ldr	r2, [pc, #168]	@ (800419c <HAL_ADC_ConfigChannel+0x864>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x7c4>
 80040f8:	4a29      	ldr	r2, [pc, #164]	@ (80041a0 <HAL_ADC_ConfigChannel+0x868>)
 80040fa:	e000      	b.n	80040fe <HAL_ADC_ConfigChannel+0x7c6>
 80040fc:	4a23      	ldr	r2, [pc, #140]	@ (800418c <HAL_ADC_ConfigChannel+0x854>)
 80040fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7fe fb2a 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800410e:	e031      	b.n	8004174 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a27      	ldr	r2, [pc, #156]	@ (80041b4 <HAL_ADC_ConfigChannel+0x87c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d12d      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800411a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800411e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d127      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1c      	ldr	r2, [pc, #112]	@ (800419c <HAL_ADC_ConfigChannel+0x864>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004138:	d004      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x80c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a17      	ldr	r2, [pc, #92]	@ (800419c <HAL_ADC_ConfigChannel+0x864>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x810>
 8004144:	4a16      	ldr	r2, [pc, #88]	@ (80041a0 <HAL_ADC_ConfigChannel+0x868>)
 8004146:	e000      	b.n	800414a <HAL_ADC_ConfigChannel+0x812>
 8004148:	4a10      	ldr	r2, [pc, #64]	@ (800418c <HAL_ADC_ConfigChannel+0x854>)
 800414a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800414e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f7fe fb04 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
 800415a:	e00c      	b.n	8004176 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800416e:	e002      	b.n	8004176 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004174:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800417e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004182:	4618      	mov	r0, r3
 8004184:	37d8      	adds	r7, #216	@ 0xd8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	50000700 	.word	0x50000700
 8004190:	c3210000 	.word	0xc3210000
 8004194:	90c00010 	.word	0x90c00010
 8004198:	50000600 	.word	0x50000600
 800419c:	50000100 	.word	0x50000100
 80041a0:	50000300 	.word	0x50000300
 80041a4:	20000000 	.word	0x20000000
 80041a8:	053e2d63 	.word	0x053e2d63
 80041ac:	c7520000 	.word	0xc7520000
 80041b0:	50000500 	.word	0x50000500
 80041b4:	cb840000 	.word	0xcb840000

080041b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fd0c 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 80041d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe fd2d 	bl	8002c3a <LL_ADC_INJ_IsConversionOngoing>
 80041e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8098 	beq.w	8004320 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02a      	beq.n	8004254 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7f5b      	ldrb	r3, [r3, #29]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d126      	bne.n	8004254 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7f1b      	ldrb	r3, [r3, #28]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d122      	bne.n	8004254 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004212:	e014      	b.n	800423e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4a45      	ldr	r2, [pc, #276]	@ (800432c <ADC_ConversionStop+0x174>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d90d      	bls.n	8004238 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004220:	f043 0210 	orr.w	r2, r3, #16
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	f043 0201 	orr.w	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e074      	b.n	8004322 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3301      	adds	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	d1e3      	bne.n	8004214 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2240      	movs	r2, #64	@ 0x40
 8004252:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d014      	beq.n	8004284 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fcc4 	bl	8002bec <LL_ADC_REG_IsConversionOngoing>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fc81 	bl	8002b76 <LL_ADC_IsDisableOngoing>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fca0 	bl	8002bc4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d014      	beq.n	80042b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fcd3 	bl	8002c3a <LL_ADC_INJ_IsConversionOngoing>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00c      	beq.n	80042b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fc69 	bl	8002b76 <LL_ADC_IsDisableOngoing>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fcaf 	bl	8002c12 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d005      	beq.n	80042c6 <ADC_ConversionStop+0x10e>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d105      	bne.n	80042cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80042c0:	230c      	movs	r3, #12
 80042c2:	617b      	str	r3, [r7, #20]
        break;
 80042c4:	e005      	b.n	80042d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80042c6:	2308      	movs	r3, #8
 80042c8:	617b      	str	r3, [r7, #20]
        break;
 80042ca:	e002      	b.n	80042d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80042cc:	2304      	movs	r3, #4
 80042ce:	617b      	str	r3, [r7, #20]
        break;
 80042d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80042d2:	f7fe fa27 	bl	8002724 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042d8:	e01b      	b.n	8004312 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80042da:	f7fe fa23 	bl	8002724 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d914      	bls.n	8004312 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	f043 0210 	orr.w	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f043 0201 	orr.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e007      	b.n	8004322 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1dc      	bne.n	80042da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	a33fffff 	.word	0xa33fffff

08004330 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fc07 	bl	8002b50 <LL_ADC_IsEnabled>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d14d      	bne.n	80043e4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	4b28      	ldr	r3, [pc, #160]	@ (80043f0 <ADC_Enable+0xc0>)
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435a:	f043 0210 	orr.w	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e039      	b.n	80043e6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fbc2 	bl	8002b00 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800437c:	f7fe f9d2 	bl	8002724 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004382:	e028      	b.n	80043d6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fbe1 	bl	8002b50 <LL_ADC_IsEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fbb1 	bl	8002b00 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800439e:	f7fe f9c1 	bl	8002724 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d914      	bls.n	80043d6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d00d      	beq.n	80043d6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e007      	b.n	80043e6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d1cf      	bne.n	8004384 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	8000003f 	.word	0x8000003f

080043f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fbb8 	bl	8002b76 <LL_ADC_IsDisableOngoing>
 8004406:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fb9f 	bl	8002b50 <LL_ADC_IsEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d047      	beq.n	80044a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d144      	bne.n	80044a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 030d 	and.w	r3, r3, #13
 8004428:	2b01      	cmp	r3, #1
 800442a:	d10c      	bne.n	8004446 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fb79 	bl	8002b28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2203      	movs	r2, #3
 800443c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800443e:	f7fe f971 	bl	8002724 <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004444:	e029      	b.n	800449a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444a:	f043 0210 	orr.w	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004456:	f043 0201 	orr.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e023      	b.n	80044aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004462:	f7fe f95f 	bl	8002724 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d914      	bls.n	800449a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004482:	f043 0210 	orr.w	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e007      	b.n	80044aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1dc      	bne.n	8004462 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <LL_ADC_IsEnabled>:
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <LL_ADC_IsEnabled+0x18>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <LL_ADC_IsEnabled+0x1a>
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <LL_ADC_REG_IsConversionOngoing>:
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d101      	bne.n	80044f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b0a1      	sub	sp, #132	@ 0x84
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800457e:	2302      	movs	r3, #2
 8004580:	e0e7      	b.n	8004752 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800458a:	2300      	movs	r3, #0
 800458c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800458e:	2300      	movs	r3, #0
 8004590:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459a:	d102      	bne.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800459c:	4b6f      	ldr	r3, [pc, #444]	@ (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	e009      	b.n	80045b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6e      	ldr	r2, [pc, #440]	@ (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d102      	bne.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80045ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	e001      	b.n	80045b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0be      	b.n	8004752 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ff7e 	bl	80044d8 <LL_ADC_REG_IsConversionOngoing>
 80045dc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ff78 	bl	80044d8 <LL_ADC_REG_IsConversionOngoing>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 80a0 	bne.w	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 809c 	bne.w	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004600:	d004      	beq.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a55      	ldr	r2, [pc, #340]	@ (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800460c:	4b56      	ldr	r3, [pc, #344]	@ (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800460e:	e000      	b.n	8004612 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004610:	4b56      	ldr	r3, [pc, #344]	@ (800476c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004612:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d04b      	beq.n	80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800461c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800462e:	035b      	lsls	r3, r3, #13
 8004630:	430b      	orrs	r3, r1
 8004632:	431a      	orrs	r2, r3
 8004634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004636:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004640:	d004      	beq.n	800464c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a45      	ldr	r2, [pc, #276]	@ (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d10f      	bne.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800464c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004650:	f7ff ff2f 	bl	80044b2 <LL_ADC_IsEnabled>
 8004654:	4604      	mov	r4, r0
 8004656:	4841      	ldr	r0, [pc, #260]	@ (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004658:	f7ff ff2b 	bl	80044b2 <LL_ADC_IsEnabled>
 800465c:	4603      	mov	r3, r0
 800465e:	4323      	orrs	r3, r4
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e012      	b.n	8004692 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800466c:	483c      	ldr	r0, [pc, #240]	@ (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800466e:	f7ff ff20 	bl	80044b2 <LL_ADC_IsEnabled>
 8004672:	4604      	mov	r4, r0
 8004674:	483b      	ldr	r0, [pc, #236]	@ (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004676:	f7ff ff1c 	bl	80044b2 <LL_ADC_IsEnabled>
 800467a:	4603      	mov	r3, r0
 800467c:	431c      	orrs	r4, r3
 800467e:	483c      	ldr	r0, [pc, #240]	@ (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004680:	f7ff ff17 	bl	80044b2 <LL_ADC_IsEnabled>
 8004684:	4603      	mov	r3, r0
 8004686:	4323      	orrs	r3, r4
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d056      	beq.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800469e:	f023 030f 	bic.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	6811      	ldr	r1, [r2, #0]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	6892      	ldr	r2, [r2, #8]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	431a      	orrs	r2, r3
 80046ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046b2:	e047      	b.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046c8:	d004      	beq.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a23      	ldr	r2, [pc, #140]	@ (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10f      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80046d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046d8:	f7ff feeb 	bl	80044b2 <LL_ADC_IsEnabled>
 80046dc:	4604      	mov	r4, r0
 80046de:	481f      	ldr	r0, [pc, #124]	@ (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046e0:	f7ff fee7 	bl	80044b2 <LL_ADC_IsEnabled>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4323      	orrs	r3, r4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e012      	b.n	800471a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80046f4:	481a      	ldr	r0, [pc, #104]	@ (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046f6:	f7ff fedc 	bl	80044b2 <LL_ADC_IsEnabled>
 80046fa:	4604      	mov	r4, r0
 80046fc:	4819      	ldr	r0, [pc, #100]	@ (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046fe:	f7ff fed8 	bl	80044b2 <LL_ADC_IsEnabled>
 8004702:	4603      	mov	r3, r0
 8004704:	431c      	orrs	r4, r3
 8004706:	481a      	ldr	r0, [pc, #104]	@ (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004708:	f7ff fed3 	bl	80044b2 <LL_ADC_IsEnabled>
 800470c:	4603      	mov	r3, r0
 800470e:	4323      	orrs	r3, r4
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800471e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004726:	f023 030f 	bic.w	r3, r3, #15
 800472a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800472c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800472e:	e009      	b.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004742:	e000      	b.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004744:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800474e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004752:	4618      	mov	r0, r3
 8004754:	3784      	adds	r7, #132	@ 0x84
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	bf00      	nop
 800475c:	50000100 	.word	0x50000100
 8004760:	50000400 	.word	0x50000400
 8004764:	50000500 	.word	0x50000500
 8004768:	50000300 	.word	0x50000300
 800476c:	50000700 	.word	0x50000700
 8004770:	50000600 	.word	0x50000600

08004774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800479c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a6:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	60d3      	str	r3, [r2, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c0:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <__NVIC_GetPriorityGrouping+0x18>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0307 	and.w	r3, r3, #7
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	4907      	ldr	r1, [pc, #28]	@ (8004810 <__NVIC_EnableIRQ+0x38>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db0a      	blt.n	800483e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	490c      	ldr	r1, [pc, #48]	@ (8004860 <__NVIC_SetPriority+0x4c>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	440b      	add	r3, r1
 8004838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800483c:	e00a      	b.n	8004854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4908      	ldr	r1, [pc, #32]	@ (8004864 <__NVIC_SetPriority+0x50>)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3b04      	subs	r3, #4
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	440b      	add	r3, r1
 8004852:	761a      	strb	r2, [r3, #24]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	@ 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf28      	it	cs
 8004886:	2304      	movcs	r3, #4
 8004888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3304      	adds	r3, #4
 800488e:	2b06      	cmp	r3, #6
 8004890:	d902      	bls.n	8004898 <NVIC_EncodePriority+0x30>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3b03      	subs	r3, #3
 8004896:	e000      	b.n	800489a <NVIC_EncodePriority+0x32>
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	4313      	orrs	r3, r2
         );
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	@ 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff4c 	bl	8004774 <__NVIC_SetPriorityGrouping>
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048f2:	f7ff ff63 	bl	80047bc <__NVIC_GetPriorityGrouping>
 80048f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	f7ff ffb3 	bl	8004868 <NVIC_EncodePriority>
 8004902:	4602      	mov	r2, r0
 8004904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff82 	bl	8004814 <__NVIC_SetPriority>
}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff ff56 	bl	80047d8 <__NVIC_EnableIRQ>
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d005      	beq.n	8004958 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2204      	movs	r2, #4
 8004950:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
 8004956:	e037      	b.n	80049c8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 020e 	bic.w	r2, r2, #14
 8004966:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004972:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004976:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0201 	bic.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f202 	lsl.w	r2, r1, r2
 800499a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049a4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049bc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049c6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d00d      	beq.n	8004a1a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	e047      	b.n	8004aaa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 020e 	bic.w	r2, r2, #14
 8004a28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f003 021f 	and.w	r2, r3, #31
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
    }
  }
  return status;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ac2:	e15a      	b.n	8004d7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2101      	movs	r1, #1
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 814c 	beq.w	8004d74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d005      	beq.n	8004af4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d130      	bne.n	8004b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	2203      	movs	r2, #3
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0201 	and.w	r2, r3, #1
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d017      	beq.n	8004b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4013      	ands	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d123      	bne.n	8004be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	08da      	lsrs	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3208      	adds	r2, #8
 8004ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	08da      	lsrs	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3208      	adds	r2, #8
 8004be0:	6939      	ldr	r1, [r7, #16]
 8004be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80a6 	beq.w	8004d74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c28:	4b5b      	ldr	r3, [pc, #364]	@ (8004d98 <HAL_GPIO_Init+0x2e4>)
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8004d98 <HAL_GPIO_Init+0x2e4>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c34:	4b58      	ldr	r3, [pc, #352]	@ (8004d98 <HAL_GPIO_Init+0x2e4>)
 8004c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c40:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <HAL_GPIO_Init+0x2e8>)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	3302      	adds	r3, #2
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	220f      	movs	r2, #15
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c6a:	d01f      	beq.n	8004cac <HAL_GPIO_Init+0x1f8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004da0 <HAL_GPIO_Init+0x2ec>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d019      	beq.n	8004ca8 <HAL_GPIO_Init+0x1f4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a4b      	ldr	r2, [pc, #300]	@ (8004da4 <HAL_GPIO_Init+0x2f0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_GPIO_Init+0x1f0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004da8 <HAL_GPIO_Init+0x2f4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00d      	beq.n	8004ca0 <HAL_GPIO_Init+0x1ec>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a49      	ldr	r2, [pc, #292]	@ (8004dac <HAL_GPIO_Init+0x2f8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <HAL_GPIO_Init+0x1e8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a48      	ldr	r2, [pc, #288]	@ (8004db0 <HAL_GPIO_Init+0x2fc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d101      	bne.n	8004c98 <HAL_GPIO_Init+0x1e4>
 8004c94:	2305      	movs	r3, #5
 8004c96:	e00a      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004c98:	2306      	movs	r3, #6
 8004c9a:	e008      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e006      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e004      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e002      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <HAL_GPIO_Init+0x1fa>
 8004cac:	2300      	movs	r3, #0
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	f002 0203 	and.w	r2, r2, #3
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	4093      	lsls	r3, r2
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cbe:	4937      	ldr	r1, [pc, #220]	@ (8004d9c <HAL_GPIO_Init+0x2e8>)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ccc:	4b39      	ldr	r3, [pc, #228]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cf0:	4a30      	ldr	r2, [pc, #192]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4013      	ands	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d1a:	4a26      	ldr	r2, [pc, #152]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d20:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d44:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d6e:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <HAL_GPIO_Init+0x300>)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3301      	adds	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f47f ae9d 	bne.w	8004ac4 <HAL_GPIO_Init+0x10>
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	48000400 	.word	0x48000400
 8004da4:	48000800 	.word	0x48000800
 8004da8:	48000c00 	.word	0x48000c00
 8004dac:	48001000 	.word	0x48001000
 8004db0:	48001400 	.word	0x48001400
 8004db4:	40010400 	.word	0x40010400

08004db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dc8:	787b      	ldrb	r3, [r7, #1]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dd4:	e002      	b.n	8004ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004df2:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dfe:	4a05      	ldr	r2, [pc, #20]	@ (8004e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f806 	bl	8004e18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40010400 	.word	0x40010400

08004e18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d141      	bne.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4a:	d131      	bne.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e4c:	4b47      	ldr	r3, [pc, #284]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e52:	4a46      	ldr	r2, [pc, #280]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e5c:	4b43      	ldr	r3, [pc, #268]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e64:	4a41      	ldr	r2, [pc, #260]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e6c:	4b40      	ldr	r3, [pc, #256]	@ (8004f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2232      	movs	r2, #50	@ 0x32
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	4a3f      	ldr	r2, [pc, #252]	@ (8004f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0c9b      	lsrs	r3, r3, #18
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e82:	e002      	b.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e8a:	4b38      	ldr	r3, [pc, #224]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e96:	d102      	bne.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f2      	bne.n	8004e84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e9e:	4b33      	ldr	r3, [pc, #204]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eaa:	d158      	bne.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e057      	b.n	8004f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ec0:	e04d      	b.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec8:	d141      	bne.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eca:	4b28      	ldr	r3, [pc, #160]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed6:	d131      	bne.n	8004f3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed8:	4b24      	ldr	r3, [pc, #144]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ede:	4a23      	ldr	r2, [pc, #140]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ee8:	4b20      	ldr	r3, [pc, #128]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2232      	movs	r2, #50	@ 0x32
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	4a1c      	ldr	r2, [pc, #112]	@ (8004f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	0c9b      	lsrs	r3, r3, #18
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0e:	e002      	b.n	8004f16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f16:	4b15      	ldr	r3, [pc, #84]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f22:	d102      	bne.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f2      	bne.n	8004f10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f2a:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f36:	d112      	bne.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e011      	b.n	8004f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f42:	4a0a      	ldr	r2, [pc, #40]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f4c:	e007      	b.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f4e:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f56:	4a05      	ldr	r2, [pc, #20]	@ (8004f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	20000000 	.word	0x20000000
 8004f74:	431bde83 	.word	0x431bde83

08004f78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f7c:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4a04      	ldr	r2, [pc, #16]	@ (8004f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f86:	6093      	str	r3, [r2, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40007000 	.word	0x40007000

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e306      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d075      	beq.n	80050a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb6:	4b97      	ldr	r3, [pc, #604]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc0:	4b94      	ldr	r3, [pc, #592]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x3e>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCC_OscConfig+0x44>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d05b      	beq.n	80050a0 <HAL_RCC_OscConfig+0x108>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d157      	bne.n	80050a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e2e1      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffc:	d106      	bne.n	800500c <HAL_RCC_OscConfig+0x74>
 8004ffe:	4b85      	ldr	r3, [pc, #532]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a84      	ldr	r2, [pc, #528]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	e01d      	b.n	8005048 <HAL_RCC_OscConfig+0xb0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x98>
 8005016:	4b7f      	ldr	r3, [pc, #508]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7e      	ldr	r2, [pc, #504]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 800501c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b7c      	ldr	r3, [pc, #496]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a7b      	ldr	r2, [pc, #492]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e00b      	b.n	8005048 <HAL_RCC_OscConfig+0xb0>
 8005030:	4b78      	ldr	r3, [pc, #480]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a77      	ldr	r2, [pc, #476]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b75      	ldr	r3, [pc, #468]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a74      	ldr	r2, [pc, #464]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d013      	beq.n	8005078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fd fb68 	bl	8002724 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005058:	f7fd fb64 	bl	8002724 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	@ 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e2a6      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800506a:	4b6a      	ldr	r3, [pc, #424]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0xc0>
 8005076:	e014      	b.n	80050a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fd fb54 	bl	8002724 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005080:	f7fd fb50 	bl	8002724 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e292      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005092:	4b60      	ldr	r3, [pc, #384]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0xe8>
 800509e:	e000      	b.n	80050a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d075      	beq.n	800519a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ae:	4b59      	ldr	r3, [pc, #356]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050b8:	4b56      	ldr	r3, [pc, #344]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d102      	bne.n	80050ce <HAL_RCC_OscConfig+0x136>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d002      	beq.n	80050d4 <HAL_RCC_OscConfig+0x13c>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11f      	bne.n	8005114 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_OscConfig+0x154>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e265      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ec:	4b49      	ldr	r3, [pc, #292]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	061b      	lsls	r3, r3, #24
 80050fa:	4946      	ldr	r1, [pc, #280]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005100:	4b45      	ldr	r3, [pc, #276]	@ (8005218 <HAL_RCC_OscConfig+0x280>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7fc facd 	bl	80016a4 <HAL_InitTick>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d043      	beq.n	8005198 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e251      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d023      	beq.n	8005164 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800511c:	4b3d      	ldr	r3, [pc, #244]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a3c      	ldr	r2, [pc, #240]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd fafc 	bl	8002724 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005130:	f7fd faf8 	bl	8002724 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e23a      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005142:	4b34      	ldr	r3, [pc, #208]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514e:	4b31      	ldr	r3, [pc, #196]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	061b      	lsls	r3, r3, #24
 800515c:	492d      	ldr	r1, [pc, #180]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	604b      	str	r3, [r1, #4]
 8005162:	e01a      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005164:	4b2b      	ldr	r3, [pc, #172]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2a      	ldr	r2, [pc, #168]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 800516a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800516e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fd fad8 	bl	8002724 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005178:	f7fd fad4 	bl	8002724 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e216      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x1e0>
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d041      	beq.n	800522a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01c      	beq.n	80051e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ae:	4b19      	ldr	r3, [pc, #100]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80051b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b4:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051be:	f7fd fab1 	bl	8002724 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c6:	f7fd faad 	bl	8002724 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e1ef      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80051da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ef      	beq.n	80051c6 <HAL_RCC_OscConfig+0x22e>
 80051e6:	e020      	b.n	800522a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ee:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd fa94 	bl	8002724 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051fe:	e00d      	b.n	800521c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005200:	f7fd fa90 	bl	8002724 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d906      	bls.n	800521c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e1d2      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800521c:	4b8c      	ldr	r3, [pc, #560]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 800521e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ea      	bne.n	8005200 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a6 	beq.w	8005384 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005238:	2300      	movs	r3, #0
 800523a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800523c:	4b84      	ldr	r3, [pc, #528]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_OscConfig+0x2b4>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x2b6>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005252:	4b7f      	ldr	r3, [pc, #508]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005256:	4a7e      	ldr	r2, [pc, #504]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800525c:	6593      	str	r3, [r2, #88]	@ 0x58
 800525e:	4b7c      	ldr	r3, [pc, #496]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800526a:	2301      	movs	r3, #1
 800526c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800526e:	4b79      	ldr	r3, [pc, #484]	@ (8005454 <HAL_RCC_OscConfig+0x4bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d118      	bne.n	80052ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800527a:	4b76      	ldr	r3, [pc, #472]	@ (8005454 <HAL_RCC_OscConfig+0x4bc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a75      	ldr	r2, [pc, #468]	@ (8005454 <HAL_RCC_OscConfig+0x4bc>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005286:	f7fd fa4d 	bl	8002724 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fd fa49 	bl	8002724 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e18b      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005454 <HAL_RCC_OscConfig+0x4bc>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d108      	bne.n	80052c6 <HAL_RCC_OscConfig+0x32e>
 80052b4:	4b66      	ldr	r3, [pc, #408]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	4a65      	ldr	r2, [pc, #404]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052c4:	e024      	b.n	8005310 <HAL_RCC_OscConfig+0x378>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d110      	bne.n	80052f0 <HAL_RCC_OscConfig+0x358>
 80052ce:	4b60      	ldr	r3, [pc, #384]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	f043 0304 	orr.w	r3, r3, #4
 80052da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052de:	4b5c      	ldr	r3, [pc, #368]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e4:	4a5a      	ldr	r2, [pc, #360]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052ee:	e00f      	b.n	8005310 <HAL_RCC_OscConfig+0x378>
 80052f0:	4b57      	ldr	r3, [pc, #348]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f6:	4a56      	ldr	r2, [pc, #344]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005300:	4b53      	ldr	r3, [pc, #332]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005306:	4a52      	ldr	r2, [pc, #328]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005308:	f023 0304 	bic.w	r3, r3, #4
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d016      	beq.n	8005346 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005318:	f7fd fa04 	bl	8002724 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531e:	e00a      	b.n	8005336 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fd fa00 	bl	8002724 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e140      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005336:	4b46      	ldr	r3, [pc, #280]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ed      	beq.n	8005320 <HAL_RCC_OscConfig+0x388>
 8005344:	e015      	b.n	8005372 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005346:	f7fd f9ed 	bl	8002724 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fd f9e9 	bl	8002724 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e129      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005364:	4b3a      	ldr	r3, [pc, #232]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ed      	bne.n	800534e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005372:	7ffb      	ldrb	r3, [r7, #31]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005378:	4b35      	ldr	r3, [pc, #212]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 800537a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537c:	4a34      	ldr	r2, [pc, #208]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 800537e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005382:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d03c      	beq.n	800540a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01c      	beq.n	80053d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005398:	4b2d      	ldr	r3, [pc, #180]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 800539a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800539e:	4a2c      	ldr	r2, [pc, #176]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fd f9bc 	bl	8002724 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053b0:	f7fd f9b8 	bl	8002724 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e0fa      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053c2:	4b23      	ldr	r3, [pc, #140]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80053c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ef      	beq.n	80053b0 <HAL_RCC_OscConfig+0x418>
 80053d0:	e01b      	b.n	800540a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80053d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7fd f99f 	bl	8002724 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ea:	f7fd f99b 	bl	8002724 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e0dd      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053fc:	4b14      	ldr	r3, [pc, #80]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ef      	bne.n	80053ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80d1 	beq.w	80055b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005414:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b0c      	cmp	r3, #12
 800541e:	f000 808b 	beq.w	8005538 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d15e      	bne.n	80054e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542a:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a08      	ldr	r2, [pc, #32]	@ (8005450 <HAL_RCC_OscConfig+0x4b8>)
 8005430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005436:	f7fd f975 	bl	8002724 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800543c:	e00c      	b.n	8005458 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543e:	f7fd f971 	bl	8002724 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d905      	bls.n	8005458 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e0b3      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
 8005450:	40021000 	.word	0x40021000
 8005454:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005458:	4b59      	ldr	r3, [pc, #356]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ec      	bne.n	800543e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005464:	4b56      	ldr	r3, [pc, #344]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	4b56      	ldr	r3, [pc, #344]	@ (80055c4 <HAL_RCC_OscConfig+0x62c>)
 800546a:	4013      	ands	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6a11      	ldr	r1, [r2, #32]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005474:	3a01      	subs	r2, #1
 8005476:	0112      	lsls	r2, r2, #4
 8005478:	4311      	orrs	r1, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800547e:	0212      	lsls	r2, r2, #8
 8005480:	4311      	orrs	r1, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005486:	0852      	lsrs	r2, r2, #1
 8005488:	3a01      	subs	r2, #1
 800548a:	0552      	lsls	r2, r2, #21
 800548c:	4311      	orrs	r1, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005492:	0852      	lsrs	r2, r2, #1
 8005494:	3a01      	subs	r2, #1
 8005496:	0652      	lsls	r2, r2, #25
 8005498:	4311      	orrs	r1, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800549e:	06d2      	lsls	r2, r2, #27
 80054a0:	430a      	orrs	r2, r1
 80054a2:	4947      	ldr	r1, [pc, #284]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a8:	4b45      	ldr	r3, [pc, #276]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a44      	ldr	r2, [pc, #272]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054b4:	4b42      	ldr	r3, [pc, #264]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a41      	ldr	r2, [pc, #260]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fd f930 	bl	8002724 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fd f92c 	bl	8002724 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e06e      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054da:	4b39      	ldr	r3, [pc, #228]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x530>
 80054e6:	e066      	b.n	80055b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e8:	4b35      	ldr	r3, [pc, #212]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a34      	ldr	r2, [pc, #208]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80054f4:	4b32      	ldr	r3, [pc, #200]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a31      	ldr	r2, [pc, #196]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005500:	4b2f      	ldr	r3, [pc, #188]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	4a2e      	ldr	r2, [pc, #184]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 8005506:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800550a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fd f908 	bl	8002724 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005518:	f7fd f904 	bl	8002724 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e046      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552a:	4b25      	ldr	r3, [pc, #148]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x580>
 8005536:	e03e      	b.n	80055b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e039      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005544:	4b1e      	ldr	r3, [pc, #120]	@ (80055c0 <HAL_RCC_OscConfig+0x628>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0203 	and.w	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	429a      	cmp	r2, r3
 8005556:	d12c      	bne.n	80055b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	3b01      	subs	r3, #1
 8005564:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	429a      	cmp	r2, r3
 8005568:	d123      	bne.n	80055b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d11b      	bne.n	80055b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d113      	bne.n	80055b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005594:	085b      	lsrs	r3, r3, #1
 8005596:	3b01      	subs	r3, #1
 8005598:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800559a:	429a      	cmp	r2, r3
 800559c:	d109      	bne.n	80055b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	3b01      	subs	r3, #1
 80055ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d001      	beq.n	80055b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40021000 	.word	0x40021000
 80055c4:	019f800c 	.word	0x019f800c

080055c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e11e      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e0:	4b91      	ldr	r3, [pc, #580]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d910      	bls.n	8005610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b8e      	ldr	r3, [pc, #568]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 020f 	bic.w	r2, r3, #15
 80055f6:	498c      	ldr	r1, [pc, #560]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e106      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d073      	beq.n	8005704 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d129      	bne.n	8005678 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005624:	4b81      	ldr	r3, [pc, #516]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0f4      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005634:	f000 f9d0 	bl	80059d8 <RCC_GetSysClockFreqFromPLLSource>
 8005638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4a7c      	ldr	r2, [pc, #496]	@ (8005830 <HAL_RCC_ClockConfig+0x268>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d93f      	bls.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005642:	4b7a      	ldr	r3, [pc, #488]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005656:	2b00      	cmp	r3, #0
 8005658:	d033      	beq.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800565e:	2b00      	cmp	r3, #0
 8005660:	d12f      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005662:	4b72      	ldr	r3, [pc, #456]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800566a:	4a70      	ldr	r2, [pc, #448]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 800566c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005670:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005672:	2380      	movs	r3, #128	@ 0x80
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e024      	b.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d107      	bne.n	8005690 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005680:	4b6a      	ldr	r3, [pc, #424]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0c6      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b66      	ldr	r3, [pc, #408]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0be      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056a0:	f000 f8ce 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4a61      	ldr	r2, [pc, #388]	@ (8005830 <HAL_RCC_ClockConfig+0x268>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d909      	bls.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ae:	4b5f      	ldr	r3, [pc, #380]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056b6:	4a5d      	ldr	r2, [pc, #372]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80056b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056be:	2380      	movs	r3, #128	@ 0x80
 80056c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056c2:	4b5a      	ldr	r3, [pc, #360]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 0203 	bic.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4957      	ldr	r1, [pc, #348]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d4:	f7fd f826 	bl	8002724 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fd f822 	bl	8002724 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e095      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f2:	4b4e      	ldr	r3, [pc, #312]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 020c 	and.w	r2, r3, #12
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	429a      	cmp	r2, r3
 8005702:	d1eb      	bne.n	80056dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d023      	beq.n	8005758 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800571c:	4b43      	ldr	r3, [pc, #268]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4a42      	ldr	r2, [pc, #264]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005726:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005734:	4b3d      	ldr	r3, [pc, #244]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800573c:	4a3b      	ldr	r2, [pc, #236]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 800573e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005742:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005744:	4b39      	ldr	r3, [pc, #228]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4936      	ldr	r1, [pc, #216]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
 8005756:	e008      	b.n	800576a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b80      	cmp	r3, #128	@ 0x80
 800575c:	d105      	bne.n	800576a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800575e:	4b33      	ldr	r3, [pc, #204]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4a32      	ldr	r2, [pc, #200]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 8005764:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005768:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800576a:	4b2f      	ldr	r3, [pc, #188]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d21d      	bcs.n	80057b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005778:	4b2b      	ldr	r3, [pc, #172]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f023 020f 	bic.w	r2, r3, #15
 8005780:	4929      	ldr	r1, [pc, #164]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005788:	f7fc ffcc 	bl	8002724 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fc ffc8 	bl	8002724 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e03b      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	@ (8005828 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d1ed      	bne.n	8005790 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c0:	4b1a      	ldr	r3, [pc, #104]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4917      	ldr	r1, [pc, #92]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057de:	4b13      	ldr	r3, [pc, #76]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	490f      	ldr	r1, [pc, #60]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057f2:	f000 f825 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057f6:	4602      	mov	r2, r0
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <HAL_RCC_ClockConfig+0x264>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	490c      	ldr	r1, [pc, #48]	@ (8005834 <HAL_RCC_ClockConfig+0x26c>)
 8005804:	5ccb      	ldrb	r3, [r1, r3]
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a0a      	ldr	r2, [pc, #40]	@ (8005838 <HAL_RCC_ClockConfig+0x270>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005812:	4b0a      	ldr	r3, [pc, #40]	@ (800583c <HAL_RCC_ClockConfig+0x274>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fb ff44 	bl	80016a4 <HAL_InitTick>
 800581c:	4603      	mov	r3, r0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40022000 	.word	0x40022000
 800582c:	40021000 	.word	0x40021000
 8005830:	04c4b400 	.word	0x04c4b400
 8005834:	0800eaa4 	.word	0x0800eaa4
 8005838:	20000000 	.word	0x20000000
 800583c:	200000c0 	.word	0x200000c0

08005840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005846:	4b2c      	ldr	r3, [pc, #176]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b04      	cmp	r3, #4
 8005850:	d102      	bne.n	8005858 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005852:	4b2a      	ldr	r3, [pc, #168]	@ (80058fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	e047      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005858:	4b27      	ldr	r3, [pc, #156]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d102      	bne.n	800586a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005864:	4b26      	ldr	r3, [pc, #152]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	e03e      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800586a:	4b23      	ldr	r3, [pc, #140]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d136      	bne.n	80058e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005876:	4b20      	ldr	r3, [pc, #128]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005880:	4b1d      	ldr	r3, [pc, #116]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3301      	adds	r3, #1
 800588c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d10c      	bne.n	80058ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005894:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	4a16      	ldr	r2, [pc, #88]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800589e:	68d2      	ldr	r2, [r2, #12]
 80058a0:	0a12      	lsrs	r2, r2, #8
 80058a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	617b      	str	r3, [r7, #20]
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ae:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	4a10      	ldr	r2, [pc, #64]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b8:	68d2      	ldr	r2, [r2, #12]
 80058ba:	0a12      	lsrs	r2, r2, #8
 80058bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]
      break;
 80058c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0e5b      	lsrs	r3, r3, #25
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	3301      	adds	r3, #1
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	e001      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058e8:	693b      	ldr	r3, [r7, #16]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000
 80058fc:	00f42400 	.word	0x00f42400
 8005900:	016e3600 	.word	0x016e3600

08005904 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005908:	4b03      	ldr	r3, [pc, #12]	@ (8005918 <HAL_RCC_GetHCLKFreq+0x14>)
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	4618      	mov	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000000 	.word	0x20000000

0800591c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005920:	f7ff fff0 	bl	8005904 <HAL_RCC_GetHCLKFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4904      	ldr	r1, [pc, #16]	@ (8005944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	0800eab4 	.word	0x0800eab4

08005948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800594c:	f7ff ffda 	bl	8005904 <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b06      	ldr	r3, [pc, #24]	@ (800596c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	0adb      	lsrs	r3, r3, #11
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4904      	ldr	r1, [pc, #16]	@ (8005970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40021000 	.word	0x40021000
 8005970:	0800eab4 	.word	0x0800eab4

08005974 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	220f      	movs	r2, #15
 8005982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005984:	4b12      	ldr	r3, [pc, #72]	@ (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005990:	4b0f      	ldr	r3, [pc, #60]	@ (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800599c:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059a8:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059b6:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <HAL_RCC_GetClockConfig+0x60>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	40022000 	.word	0x40022000

080059d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059de:	4b1e      	ldr	r3, [pc, #120]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d10c      	bne.n	8005a16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059fc:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	4a14      	ldr	r2, [pc, #80]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a06:	68d2      	ldr	r2, [r2, #12]
 8005a08:	0a12      	lsrs	r2, r2, #8
 8005a0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
    break;
 8005a14:	e00c      	b.n	8005a30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a16:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a20:	68d2      	ldr	r2, [r2, #12]
 8005a22:	0a12      	lsrs	r2, r2, #8
 8005a24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
    break;
 8005a2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a30:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	0e5b      	lsrs	r3, r3, #25
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a4a:	687b      	ldr	r3, [r7, #4]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	016e3600 	.word	0x016e3600
 8005a60:	00f42400 	.word	0x00f42400

08005a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a70:	2300      	movs	r3, #0
 8005a72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8098 	beq.w	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a82:	2300      	movs	r3, #0
 8005a84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a86:	4b43      	ldr	r3, [pc, #268]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10d      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a92:	4b40      	ldr	r3, [pc, #256]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	4a3f      	ldr	r2, [pc, #252]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aae:	4b3a      	ldr	r3, [pc, #232]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a39      	ldr	r2, [pc, #228]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aba:	f7fc fe33 	bl	8002724 <HAL_GetTick>
 8005abe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ac0:	e009      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac2:	f7fc fe2f 	bl	8002724 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d902      	bls.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	74fb      	strb	r3, [r7, #19]
        break;
 8005ad4:	e005      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad6:	4b30      	ldr	r3, [pc, #192]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0ef      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d159      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01e      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d019      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b04:	4b23      	ldr	r3, [pc, #140]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b10:	4b20      	ldr	r3, [pc, #128]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	4a1f      	ldr	r2, [pc, #124]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b20:	4b1c      	ldr	r3, [pc, #112]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	4a1b      	ldr	r2, [pc, #108]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b30:	4a18      	ldr	r2, [pc, #96]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d016      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fc fdef 	bl	8002724 <HAL_GetTick>
 8005b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b48:	e00b      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4a:	f7fc fdeb 	bl	8002724 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d902      	bls.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b60:	e006      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b62:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0ec      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b76:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b84:	4903      	ldr	r1, [pc, #12]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	74bb      	strb	r3, [r7, #18]
 8005b92:	e005      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ba0:	7c7b      	ldrb	r3, [r7, #17]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d105      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba6:	4ba7      	ldr	r3, [pc, #668]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005baa:	4aa6      	ldr	r2, [pc, #664]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bbe:	4ba1      	ldr	r3, [pc, #644]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f023 0203 	bic.w	r2, r3, #3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	499d      	ldr	r1, [pc, #628]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005be0:	4b98      	ldr	r3, [pc, #608]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be6:	f023 020c 	bic.w	r2, r3, #12
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	4995      	ldr	r1, [pc, #596]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c02:	4b90      	ldr	r3, [pc, #576]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	498c      	ldr	r1, [pc, #560]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c24:	4b87      	ldr	r3, [pc, #540]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	4984      	ldr	r1, [pc, #528]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c46:	4b7f      	ldr	r3, [pc, #508]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	497b      	ldr	r1, [pc, #492]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c68:	4b76      	ldr	r3, [pc, #472]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	4973      	ldr	r1, [pc, #460]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	496a      	ldr	r1, [pc, #424]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cac:	4b65      	ldr	r3, [pc, #404]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	4962      	ldr	r1, [pc, #392]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cce:	4b5d      	ldr	r3, [pc, #372]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	4959      	ldr	r1, [pc, #356]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cf0:	4b54      	ldr	r3, [pc, #336]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cf6:	f023 0203 	bic.w	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	4951      	ldr	r1, [pc, #324]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d12:	4b4c      	ldr	r3, [pc, #304]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	4948      	ldr	r1, [pc, #288]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d015      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d34:	4b43      	ldr	r3, [pc, #268]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	4940      	ldr	r1, [pc, #256]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d52:	d105      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d54:	4b3b      	ldr	r3, [pc, #236]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a3a      	ldr	r2, [pc, #232]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d6c:	4b35      	ldr	r3, [pc, #212]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7a:	4932      	ldr	r1, [pc, #200]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a2c      	ldr	r2, [pc, #176]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d015      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005da4:	4b27      	ldr	r3, [pc, #156]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	4924      	ldr	r1, [pc, #144]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ddc:	4b19      	ldr	r3, [pc, #100]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dea:	4916      	ldr	r1, [pc, #88]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dfa:	d105      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dfc:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4a10      	ldr	r2, [pc, #64]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d019      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e14:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	4908      	ldr	r1, [pc, #32]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e32:	d109      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e34:	4b03      	ldr	r3, [pc, #12]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a02      	ldr	r2, [pc, #8]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e3e:	60d3      	str	r3, [r2, #12]
 8005e40:	e002      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e54:	4b29      	ldr	r3, [pc, #164]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e62:	4926      	ldr	r1, [pc, #152]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e72:	d105      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e74:	4b21      	ldr	r3, [pc, #132]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a20      	ldr	r2, [pc, #128]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9a:	4918      	ldr	r1, [pc, #96]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005eac:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a12      	ldr	r2, [pc, #72]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed2:	490a      	ldr	r1, [pc, #40]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a04      	ldr	r2, [pc, #16]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ef0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000

08005f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e049      	b.n	8005fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fe7e 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f000 ff2c 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e054      	b.n	8006072 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a26      	ldr	r2, [pc, #152]	@ (8006080 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x80>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff2:	d01d      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x80>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a22      	ldr	r2, [pc, #136]	@ (8006084 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x80>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a21      	ldr	r2, [pc, #132]	@ (8006088 <HAL_TIM_Base_Start_IT+0xd8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x80>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1f      	ldr	r2, [pc, #124]	@ (800608c <HAL_TIM_Base_Start_IT+0xdc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x80>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1e      	ldr	r2, [pc, #120]	@ (8006090 <HAL_TIM_Base_Start_IT+0xe0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x80>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <HAL_TIM_Base_Start_IT+0xe4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x80>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1b      	ldr	r2, [pc, #108]	@ (8006098 <HAL_TIM_Base_Start_IT+0xe8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d115      	bne.n	800605c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	4b19      	ldr	r3, [pc, #100]	@ (800609c <HAL_TIM_Base_Start_IT+0xec>)
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b06      	cmp	r3, #6
 8006040:	d015      	beq.n	800606e <HAL_TIM_Base_Start_IT+0xbe>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006048:	d011      	beq.n	800606e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	e008      	b.n	800606e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e000      	b.n	8006070 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40000c00 	.word	0x40000c00
 8006090:	40013400 	.word	0x40013400
 8006094:	40014000 	.word	0x40014000
 8006098:	40015000 	.word	0x40015000
 800609c:	00010007 	.word	0x00010007

080060a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e049      	b.n	8006146 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f841 	bl	800614e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f000 fe5c 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <HAL_TIM_PWM_Start_IT+0x28>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e03c      	b.n	8006206 <HAL_TIM_PWM_Start_IT+0xa2>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b04      	cmp	r3, #4
 8006190:	d109      	bne.n	80061a6 <HAL_TIM_PWM_Start_IT+0x42>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e02f      	b.n	8006206 <HAL_TIM_PWM_Start_IT+0xa2>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d109      	bne.n	80061c0 <HAL_TIM_PWM_Start_IT+0x5c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e022      	b.n	8006206 <HAL_TIM_PWM_Start_IT+0xa2>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d109      	bne.n	80061da <HAL_TIM_PWM_Start_IT+0x76>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	bf14      	ite	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	2300      	moveq	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e015      	b.n	8006206 <HAL_TIM_PWM_Start_IT+0xa2>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d109      	bne.n	80061f4 <HAL_TIM_PWM_Start_IT+0x90>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bf14      	ite	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	2300      	moveq	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e008      	b.n	8006206 <HAL_TIM_PWM_Start_IT+0xa2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	bf14      	ite	ne
 8006200:	2301      	movne	r3, #1
 8006202:	2300      	moveq	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e0f1      	b.n	80063f2 <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start_IT+0xba>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800621c:	e023      	b.n	8006266 <HAL_TIM_PWM_Start_IT+0x102>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start_IT+0xca>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800622c:	e01b      	b.n	8006266 <HAL_TIM_PWM_Start_IT+0x102>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start_IT+0xda>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800623c:	e013      	b.n	8006266 <HAL_TIM_PWM_Start_IT+0x102>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b0c      	cmp	r3, #12
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start_IT+0xea>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800624c:	e00b      	b.n	8006266 <HAL_TIM_PWM_Start_IT+0x102>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b10      	cmp	r3, #16
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start_IT+0xfa>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800625c:	e003      	b.n	8006266 <HAL_TIM_PWM_Start_IT+0x102>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b0c      	cmp	r3, #12
 800626a:	d841      	bhi.n	80062f0 <HAL_TIM_PWM_Start_IT+0x18c>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <HAL_TIM_PWM_Start_IT+0x110>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062a9 	.word	0x080062a9
 8006278:	080062f1 	.word	0x080062f1
 800627c:	080062f1 	.word	0x080062f1
 8006280:	080062f1 	.word	0x080062f1
 8006284:	080062bb 	.word	0x080062bb
 8006288:	080062f1 	.word	0x080062f1
 800628c:	080062f1 	.word	0x080062f1
 8006290:	080062f1 	.word	0x080062f1
 8006294:	080062cd 	.word	0x080062cd
 8006298:	080062f1 	.word	0x080062f1
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	080062f1 	.word	0x080062f1
 80062a4:	080062df 	.word	0x080062df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0202 	orr.w	r2, r2, #2
 80062b6:	60da      	str	r2, [r3, #12]
      break;
 80062b8:	e01d      	b.n	80062f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0204 	orr.w	r2, r2, #4
 80062c8:	60da      	str	r2, [r3, #12]
      break;
 80062ca:	e014      	b.n	80062f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0208 	orr.w	r2, r2, #8
 80062da:	60da      	str	r2, [r3, #12]
      break;
 80062dc:	e00b      	b.n	80062f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0210 	orr.w	r2, r2, #16
 80062ec:	60da      	str	r2, [r3, #12]
      break;
 80062ee:	e002      	b.n	80062f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
      break;
 80062f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d179      	bne.n	80063f0 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fa2b 	bl	8007760 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a3b      	ldr	r2, [pc, #236]	@ (80063fc <HAL_TIM_PWM_Start_IT+0x298>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_TIM_PWM_Start_IT+0x1e2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a39      	ldr	r2, [pc, #228]	@ (8006400 <HAL_TIM_PWM_Start_IT+0x29c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_TIM_PWM_Start_IT+0x1e2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a38      	ldr	r2, [pc, #224]	@ (8006404 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_TIM_PWM_Start_IT+0x1e2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a36      	ldr	r2, [pc, #216]	@ (8006408 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_TIM_PWM_Start_IT+0x1e2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a35      	ldr	r2, [pc, #212]	@ (800640c <HAL_TIM_PWM_Start_IT+0x2a8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIM_PWM_Start_IT+0x1e2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a33      	ldr	r2, [pc, #204]	@ (8006410 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_TIM_PWM_Start_IT+0x1e6>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_TIM_PWM_Start_IT+0x1e8>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800635e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a25      	ldr	r2, [pc, #148]	@ (80063fc <HAL_TIM_PWM_Start_IT+0x298>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d022      	beq.n	80063b0 <HAL_TIM_PWM_Start_IT+0x24c>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006372:	d01d      	beq.n	80063b0 <HAL_TIM_PWM_Start_IT+0x24c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a26      	ldr	r2, [pc, #152]	@ (8006414 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d018      	beq.n	80063b0 <HAL_TIM_PWM_Start_IT+0x24c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <HAL_TIM_PWM_Start_IT+0x2b4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <HAL_TIM_PWM_Start_IT+0x24c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a23      	ldr	r2, [pc, #140]	@ (800641c <HAL_TIM_PWM_Start_IT+0x2b8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00e      	beq.n	80063b0 <HAL_TIM_PWM_Start_IT+0x24c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1a      	ldr	r2, [pc, #104]	@ (8006400 <HAL_TIM_PWM_Start_IT+0x29c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d009      	beq.n	80063b0 <HAL_TIM_PWM_Start_IT+0x24c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a18      	ldr	r2, [pc, #96]	@ (8006404 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_TIM_PWM_Start_IT+0x24c>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d115      	bne.n	80063dc <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006420 <HAL_TIM_PWM_Start_IT+0x2bc>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b06      	cmp	r3, #6
 80063c0:	d015      	beq.n	80063ee <HAL_TIM_PWM_Start_IT+0x28a>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c8:	d011      	beq.n	80063ee <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	e008      	b.n	80063ee <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	e000      	b.n	80063f0 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40013400 	.word	0x40013400
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800
 8006410:	40015000 	.word	0x40015000
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	00010007 	.word	0x00010007

08006424 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d841      	bhi.n	80064bc <HAL_TIM_PWM_Stop_IT+0x98>
 8006438:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006475 	.word	0x08006475
 8006444:	080064bd 	.word	0x080064bd
 8006448:	080064bd 	.word	0x080064bd
 800644c:	080064bd 	.word	0x080064bd
 8006450:	08006487 	.word	0x08006487
 8006454:	080064bd 	.word	0x080064bd
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080064bd 	.word	0x080064bd
 8006460:	08006499 	.word	0x08006499
 8006464:	080064bd 	.word	0x080064bd
 8006468:	080064bd 	.word	0x080064bd
 800646c:	080064bd 	.word	0x080064bd
 8006470:	080064ab 	.word	0x080064ab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0202 	bic.w	r2, r2, #2
 8006482:	60da      	str	r2, [r3, #12]
      break;
 8006484:	e01d      	b.n	80064c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0204 	bic.w	r2, r2, #4
 8006494:	60da      	str	r2, [r3, #12]
      break;
 8006496:	e014      	b.n	80064c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0208 	bic.w	r2, r2, #8
 80064a6:	60da      	str	r2, [r3, #12]
      break;
 80064a8:	e00b      	b.n	80064c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0210 	bic.w	r2, r2, #16
 80064b8:	60da      	str	r2, [r3, #12]
      break;
 80064ba:	e002      	b.n	80064c2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
      break;
 80064c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 8086 	bne.w	80065d6 <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 f944 	bl	8007760 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a40      	ldr	r2, [pc, #256]	@ (80065e0 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d018      	beq.n	8006514 <HAL_TIM_PWM_Stop_IT+0xf0>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a3f      	ldr	r2, [pc, #252]	@ (80065e4 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <HAL_TIM_PWM_Stop_IT+0xf0>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a3d      	ldr	r2, [pc, #244]	@ (80065e8 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_TIM_PWM_Stop_IT+0xf0>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3c      	ldr	r2, [pc, #240]	@ (80065ec <HAL_TIM_PWM_Stop_IT+0x1c8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_TIM_PWM_Stop_IT+0xf0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a3a      	ldr	r2, [pc, #232]	@ (80065f0 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_TIM_PWM_Stop_IT+0xf0>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a39      	ldr	r2, [pc, #228]	@ (80065f4 <HAL_TIM_PWM_Stop_IT+0x1d0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d101      	bne.n	8006518 <HAL_TIM_PWM_Stop_IT+0xf4>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <HAL_TIM_PWM_Stop_IT+0xf6>
 8006518:	2300      	movs	r3, #0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d017      	beq.n	800654e <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10f      	bne.n	800654e <HAL_TIM_PWM_Stop_IT+0x12a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d107      	bne.n	800654e <HAL_TIM_PWM_Stop_IT+0x12a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800654c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6a1a      	ldr	r2, [r3, #32]
 8006554:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10f      	bne.n	800657e <HAL_TIM_PWM_Stop_IT+0x15a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1a      	ldr	r2, [r3, #32]
 8006564:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d107      	bne.n	800657e <HAL_TIM_PWM_Stop_IT+0x15a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Stop_IT+0x16a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800658c:	e023      	b.n	80065d6 <HAL_TIM_PWM_Stop_IT+0x1b2>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Stop_IT+0x17a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800659c:	e01b      	b.n	80065d6 <HAL_TIM_PWM_Stop_IT+0x1b2>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Stop_IT+0x18a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065ac:	e013      	b.n	80065d6 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b0c      	cmp	r3, #12
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Stop_IT+0x19a>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065bc:	e00b      	b.n	80065d6 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Stop_IT+0x1aa>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065cc:	e003      	b.n	80065d6 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800
 80065f4:	40015000 	.word	0x40015000

080065f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b02      	cmp	r3, #2
 800660c:	d122      	bne.n	8006654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b02      	cmp	r3, #2
 800661a:	d11b      	bne.n	8006654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0202 	mvn.w	r2, #2
 8006624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fb90 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 8006640:	e005      	b.n	800664e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fb82 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fb93 	bl	8006d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b04      	cmp	r3, #4
 8006660:	d122      	bne.n	80066a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d11b      	bne.n	80066a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0204 	mvn.w	r2, #4
 8006678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fb66 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fb58 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fb69 	bl	8006d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d122      	bne.n	80066fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d11b      	bne.n	80066fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0208 	mvn.w	r2, #8
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2204      	movs	r2, #4
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fb3c 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fb2e 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fb3f 	bl	8006d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b10      	cmp	r3, #16
 8006708:	d122      	bne.n	8006750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b10      	cmp	r3, #16
 8006716:	d11b      	bne.n	8006750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0210 	mvn.w	r2, #16
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2208      	movs	r2, #8
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fb12 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fb04 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fb15 	bl	8006d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b01      	cmp	r3, #1
 800675c:	d10e      	bne.n	800677c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b01      	cmp	r3, #1
 800676a:	d107      	bne.n	800677c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0201 	mvn.w	r2, #1
 8006774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fa ff58 	bl	800162c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006786:	2b80      	cmp	r3, #128	@ 0x80
 8006788:	d10e      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006794:	2b80      	cmp	r3, #128	@ 0x80
 8006796:	d107      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fbd4 	bl	8007f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067b6:	d10e      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c2:	2b80      	cmp	r3, #128	@ 0x80
 80067c4:	d107      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 fbc7 	bl	8007f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d10e      	bne.n	8006802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ee:	2b40      	cmp	r3, #64	@ 0x40
 80067f0:	d107      	bne.n	8006802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fac3 	bl	8006d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b20      	cmp	r3, #32
 800680e:	d10e      	bne.n	800682e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b20      	cmp	r3, #32
 800681c:	d107      	bne.n	800682e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f06f 0220 	mvn.w	r2, #32
 8006826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fb87 	bl	8007f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800683c:	d10f      	bne.n	800685e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800684c:	d107      	bne.n	800685e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 fb8d 	bl	8007f78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006868:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800686c:	d10f      	bne.n	800688e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006878:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800687c:	d107      	bne.n	800688e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f001 fb7f 	bl	8007f8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800689c:	d10f      	bne.n	80068be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068ac:	d107      	bne.n	80068be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80068b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fb71 	bl	8007fa0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068cc:	d10f      	bne.n	80068ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068dc:	d107      	bne.n	80068ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80068e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 fb63 	bl	8007fb4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ee:	bf00      	nop
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006912:	2302      	movs	r3, #2
 8006914:	e0ff      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b14      	cmp	r3, #20
 8006922:	f200 80f0 	bhi.w	8006b06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006926:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	08006981 	.word	0x08006981
 8006930:	08006b07 	.word	0x08006b07
 8006934:	08006b07 	.word	0x08006b07
 8006938:	08006b07 	.word	0x08006b07
 800693c:	080069c1 	.word	0x080069c1
 8006940:	08006b07 	.word	0x08006b07
 8006944:	08006b07 	.word	0x08006b07
 8006948:	08006b07 	.word	0x08006b07
 800694c:	08006a03 	.word	0x08006a03
 8006950:	08006b07 	.word	0x08006b07
 8006954:	08006b07 	.word	0x08006b07
 8006958:	08006b07 	.word	0x08006b07
 800695c:	08006a43 	.word	0x08006a43
 8006960:	08006b07 	.word	0x08006b07
 8006964:	08006b07 	.word	0x08006b07
 8006968:	08006b07 	.word	0x08006b07
 800696c:	08006a85 	.word	0x08006a85
 8006970:	08006b07 	.word	0x08006b07
 8006974:	08006b07 	.word	0x08006b07
 8006978:	08006b07 	.word	0x08006b07
 800697c:	08006ac5 	.word	0x08006ac5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fab0 	bl	8006eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0208 	orr.w	r2, r2, #8
 800699a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0204 	bic.w	r2, r2, #4
 80069aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6999      	ldr	r1, [r3, #24]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	619a      	str	r2, [r3, #24]
      break;
 80069be:	e0a5      	b.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fb2a 	bl	8007020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6999      	ldr	r1, [r3, #24]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	021a      	lsls	r2, r3, #8
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	619a      	str	r2, [r3, #24]
      break;
 8006a00:	e084      	b.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb9d 	bl	8007148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0208 	orr.w	r2, r2, #8
 8006a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0204 	bic.w	r2, r2, #4
 8006a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69d9      	ldr	r1, [r3, #28]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	61da      	str	r2, [r3, #28]
      break;
 8006a40:	e064      	b.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fc0f 	bl	800726c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69d9      	ldr	r1, [r3, #28]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	021a      	lsls	r2, r3, #8
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	61da      	str	r2, [r3, #28]
      break;
 8006a82:	e043      	b.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fc82 	bl	8007394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0208 	orr.w	r2, r2, #8
 8006a9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0204 	bic.w	r2, r2, #4
 8006aae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006ac2:	e023      	b.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fccc 	bl	8007468 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ade:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	021a      	lsls	r2, r3, #8
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006b04:	e002      	b.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
      break;
 8006b0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIM_ConfigClockSource+0x1c>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e0f6      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x20a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006b5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a6f      	ldr	r2, [pc, #444]	@ (8006d34 <HAL_TIM_ConfigClockSource+0x214>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	f000 80c1 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006b7c:	4a6d      	ldr	r2, [pc, #436]	@ (8006d34 <HAL_TIM_ConfigClockSource+0x214>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	f200 80c6 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b84:	4a6c      	ldr	r2, [pc, #432]	@ (8006d38 <HAL_TIM_ConfigClockSource+0x218>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	f000 80b9 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006b8c:	4a6a      	ldr	r2, [pc, #424]	@ (8006d38 <HAL_TIM_ConfigClockSource+0x218>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	f200 80be 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b94:	4a69      	ldr	r2, [pc, #420]	@ (8006d3c <HAL_TIM_ConfigClockSource+0x21c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	f000 80b1 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006b9c:	4a67      	ldr	r2, [pc, #412]	@ (8006d3c <HAL_TIM_ConfigClockSource+0x21c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	f200 80b6 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ba4:	4a66      	ldr	r2, [pc, #408]	@ (8006d40 <HAL_TIM_ConfigClockSource+0x220>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	f000 80a9 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006bac:	4a64      	ldr	r2, [pc, #400]	@ (8006d40 <HAL_TIM_ConfigClockSource+0x220>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	f200 80ae 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bb4:	4a63      	ldr	r2, [pc, #396]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x224>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	f000 80a1 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006bbc:	4a61      	ldr	r2, [pc, #388]	@ (8006d44 <HAL_TIM_ConfigClockSource+0x224>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	f200 80a6 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bc4:	4a60      	ldr	r2, [pc, #384]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x228>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	f000 8099 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006bcc:	4a5e      	ldr	r2, [pc, #376]	@ (8006d48 <HAL_TIM_ConfigClockSource+0x228>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	f200 809e 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006bd8:	f000 8091 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006bdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006be0:	f200 8096 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be8:	f000 8089 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006bec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bf0:	f200 808e 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf8:	d03e      	beq.n	8006c78 <HAL_TIM_ConfigClockSource+0x158>
 8006bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bfe:	f200 8087 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c06:	f000 8086 	beq.w	8006d16 <HAL_TIM_ConfigClockSource+0x1f6>
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c0e:	d87f      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c10:	2b70      	cmp	r3, #112	@ 0x70
 8006c12:	d01a      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x12a>
 8006c14:	2b70      	cmp	r3, #112	@ 0x70
 8006c16:	d87b      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c18:	2b60      	cmp	r3, #96	@ 0x60
 8006c1a:	d050      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x19e>
 8006c1c:	2b60      	cmp	r3, #96	@ 0x60
 8006c1e:	d877      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c20:	2b50      	cmp	r3, #80	@ 0x50
 8006c22:	d03c      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x17e>
 8006c24:	2b50      	cmp	r3, #80	@ 0x50
 8006c26:	d873      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c28:	2b40      	cmp	r3, #64	@ 0x40
 8006c2a:	d058      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x1be>
 8006c2c:	2b40      	cmp	r3, #64	@ 0x40
 8006c2e:	d86f      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c30:	2b30      	cmp	r3, #48	@ 0x30
 8006c32:	d064      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006c34:	2b30      	cmp	r3, #48	@ 0x30
 8006c36:	d86b      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d060      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d867      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d05c      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d05a      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x1de>
 8006c48:	e062      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6899      	ldr	r1, [r3, #8]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f000 fd61 	bl	8007720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	609a      	str	r2, [r3, #8]
      break;
 8006c76:	e04f      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	6899      	ldr	r1, [r3, #8]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f000 fd4a 	bl	8007720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c9a:	609a      	str	r2, [r3, #8]
      break;
 8006c9c:	e03c      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6859      	ldr	r1, [r3, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f000 fcbc 	bl	8007628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2150      	movs	r1, #80	@ 0x50
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fd15 	bl	80076e6 <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e02c      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6859      	ldr	r1, [r3, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f000 fcdb 	bl	8007686 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2160      	movs	r1, #96	@ 0x60
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fd05 	bl	80076e6 <TIM_ITRx_SetConfig>
      break;
 8006cdc:	e01c      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6859      	ldr	r1, [r3, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f000 fc9c 	bl	8007628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2140      	movs	r1, #64	@ 0x40
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fcf5 	bl	80076e6 <TIM_ITRx_SetConfig>
      break;
 8006cfc:	e00c      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f000 fcec 	bl	80076e6 <TIM_ITRx_SetConfig>
      break;
 8006d0e:	e003      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	73fb      	strb	r3, [r7, #15]
      break;
 8006d14:	e000      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	00100070 	.word	0x00100070
 8006d38:	00100060 	.word	0x00100060
 8006d3c:	00100050 	.word	0x00100050
 8006d40:	00100040 	.word	0x00100040
 8006d44:	00100030 	.word	0x00100030
 8006d48:	00100020 	.word	0x00100020

08006d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a46      	ldr	r2, [pc, #280]	@ (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d017      	beq.n	8006de4 <TIM_Base_SetConfig+0x48>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dba:	d013      	beq.n	8006de4 <TIM_Base_SetConfig+0x48>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a43      	ldr	r2, [pc, #268]	@ (8006ecc <TIM_Base_SetConfig+0x130>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00f      	beq.n	8006de4 <TIM_Base_SetConfig+0x48>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a42      	ldr	r2, [pc, #264]	@ (8006ed0 <TIM_Base_SetConfig+0x134>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <TIM_Base_SetConfig+0x48>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a41      	ldr	r2, [pc, #260]	@ (8006ed4 <TIM_Base_SetConfig+0x138>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_Base_SetConfig+0x48>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a40      	ldr	r2, [pc, #256]	@ (8006ed8 <TIM_Base_SetConfig+0x13c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_Base_SetConfig+0x48>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a3f      	ldr	r2, [pc, #252]	@ (8006edc <TIM_Base_SetConfig+0x140>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d108      	bne.n	8006df6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a33      	ldr	r2, [pc, #204]	@ (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d023      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e04:	d01f      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a30      	ldr	r2, [pc, #192]	@ (8006ecc <TIM_Base_SetConfig+0x130>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01b      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a2f      	ldr	r2, [pc, #188]	@ (8006ed0 <TIM_Base_SetConfig+0x134>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d017      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a2e      	ldr	r2, [pc, #184]	@ (8006ed4 <TIM_Base_SetConfig+0x138>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d013      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a2d      	ldr	r2, [pc, #180]	@ (8006ed8 <TIM_Base_SetConfig+0x13c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00f      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2d      	ldr	r2, [pc, #180]	@ (8006ee0 <TIM_Base_SetConfig+0x144>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00b      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee4 <TIM_Base_SetConfig+0x148>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d007      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2b      	ldr	r2, [pc, #172]	@ (8006ee8 <TIM_Base_SetConfig+0x14c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_Base_SetConfig+0xaa>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a26      	ldr	r2, [pc, #152]	@ (8006edc <TIM_Base_SetConfig+0x140>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d108      	bne.n	8006e58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a12      	ldr	r2, [pc, #72]	@ (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d013      	beq.n	8006eac <TIM_Base_SetConfig+0x110>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <TIM_Base_SetConfig+0x13c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00f      	beq.n	8006eac <TIM_Base_SetConfig+0x110>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a14      	ldr	r2, [pc, #80]	@ (8006ee0 <TIM_Base_SetConfig+0x144>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00b      	beq.n	8006eac <TIM_Base_SetConfig+0x110>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a13      	ldr	r2, [pc, #76]	@ (8006ee4 <TIM_Base_SetConfig+0x148>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d007      	beq.n	8006eac <TIM_Base_SetConfig+0x110>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ee8 <TIM_Base_SetConfig+0x14c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_Base_SetConfig+0x110>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8006edc <TIM_Base_SetConfig+0x140>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d103      	bne.n	8006eb4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	615a      	str	r2, [r3, #20]
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40012c00 	.word	0x40012c00
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40000c00 	.word	0x40000c00
 8006ed8:	40013400 	.word	0x40013400
 8006edc:	40015000 	.word	0x40015000
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800

08006eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f023 0201 	bic.w	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 0302 	bic.w	r3, r3, #2
 8006f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a30      	ldr	r2, [pc, #192]	@ (8007008 <TIM_OC1_SetConfig+0x11c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <TIM_OC1_SetConfig+0x88>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800700c <TIM_OC1_SetConfig+0x120>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00f      	beq.n	8006f74 <TIM_OC1_SetConfig+0x88>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a2e      	ldr	r2, [pc, #184]	@ (8007010 <TIM_OC1_SetConfig+0x124>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00b      	beq.n	8006f74 <TIM_OC1_SetConfig+0x88>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8007014 <TIM_OC1_SetConfig+0x128>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d007      	beq.n	8006f74 <TIM_OC1_SetConfig+0x88>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a2c      	ldr	r2, [pc, #176]	@ (8007018 <TIM_OC1_SetConfig+0x12c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_OC1_SetConfig+0x88>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800701c <TIM_OC1_SetConfig+0x130>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d10c      	bne.n	8006f8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0308 	bic.w	r3, r3, #8
 8006f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 0304 	bic.w	r3, r3, #4
 8006f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <TIM_OC1_SetConfig+0x11c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <TIM_OC1_SetConfig+0xd2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <TIM_OC1_SetConfig+0x120>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00f      	beq.n	8006fbe <TIM_OC1_SetConfig+0xd2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8007010 <TIM_OC1_SetConfig+0x124>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00b      	beq.n	8006fbe <TIM_OC1_SetConfig+0xd2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8007014 <TIM_OC1_SetConfig+0x128>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <TIM_OC1_SetConfig+0xd2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a19      	ldr	r2, [pc, #100]	@ (8007018 <TIM_OC1_SetConfig+0x12c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d003      	beq.n	8006fbe <TIM_OC1_SetConfig+0xd2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	@ (800701c <TIM_OC1_SetConfig+0x130>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d111      	bne.n	8006fe2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	621a      	str	r2, [r3, #32]
}
 8006ffc:	bf00      	nop
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40013400 	.word	0x40013400
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800
 800701c:	40015000 	.word	0x40015000

08007020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0210 	bic.w	r2, r3, #16
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800705a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0320 	bic.w	r3, r3, #32
 800706e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a2c      	ldr	r2, [pc, #176]	@ (8007130 <TIM_OC2_SetConfig+0x110>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d007      	beq.n	8007094 <TIM_OC2_SetConfig+0x74>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a2b      	ldr	r2, [pc, #172]	@ (8007134 <TIM_OC2_SetConfig+0x114>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <TIM_OC2_SetConfig+0x74>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a2a      	ldr	r2, [pc, #168]	@ (8007138 <TIM_OC2_SetConfig+0x118>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d10d      	bne.n	80070b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800709a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007130 <TIM_OC2_SetConfig+0x110>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <TIM_OC2_SetConfig+0xc0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007134 <TIM_OC2_SetConfig+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00f      	beq.n	80070e0 <TIM_OC2_SetConfig+0xc0>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a1e      	ldr	r2, [pc, #120]	@ (800713c <TIM_OC2_SetConfig+0x11c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00b      	beq.n	80070e0 <TIM_OC2_SetConfig+0xc0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007140 <TIM_OC2_SetConfig+0x120>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d007      	beq.n	80070e0 <TIM_OC2_SetConfig+0xc0>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <TIM_OC2_SetConfig+0x124>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_OC2_SetConfig+0xc0>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <TIM_OC2_SetConfig+0x118>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d113      	bne.n	8007108 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40013400 	.word	0x40013400
 8007138:	40015000 	.word	0x40015000
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400
 8007144:	40014800 	.word	0x40014800

08007148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007254 <TIM_OC3_SetConfig+0x10c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_OC3_SetConfig+0x72>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007258 <TIM_OC3_SetConfig+0x110>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_OC3_SetConfig+0x72>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a29      	ldr	r2, [pc, #164]	@ (800725c <TIM_OC3_SetConfig+0x114>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d10d      	bne.n	80071d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007254 <TIM_OC3_SetConfig+0x10c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <TIM_OC3_SetConfig+0xbe>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007258 <TIM_OC3_SetConfig+0x110>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00f      	beq.n	8007206 <TIM_OC3_SetConfig+0xbe>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007260 <TIM_OC3_SetConfig+0x118>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00b      	beq.n	8007206 <TIM_OC3_SetConfig+0xbe>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007264 <TIM_OC3_SetConfig+0x11c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d007      	beq.n	8007206 <TIM_OC3_SetConfig+0xbe>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007268 <TIM_OC3_SetConfig+0x120>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_OC3_SetConfig+0xbe>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a16      	ldr	r2, [pc, #88]	@ (800725c <TIM_OC3_SetConfig+0x114>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d113      	bne.n	800722e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800720c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	621a      	str	r2, [r3, #32]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40012c00 	.word	0x40012c00
 8007258:	40013400 	.word	0x40013400
 800725c:	40015000 	.word	0x40015000
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800

0800726c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800729a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	031b      	lsls	r3, r3, #12
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a2c      	ldr	r2, [pc, #176]	@ (800737c <TIM_OC4_SetConfig+0x110>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC4_SetConfig+0x74>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007380 <TIM_OC4_SetConfig+0x114>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC4_SetConfig+0x74>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2a      	ldr	r2, [pc, #168]	@ (8007384 <TIM_OC4_SetConfig+0x118>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10d      	bne.n	80072fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	031b      	lsls	r3, r3, #12
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1f      	ldr	r2, [pc, #124]	@ (800737c <TIM_OC4_SetConfig+0x110>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <TIM_OC4_SetConfig+0xc0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a1e      	ldr	r2, [pc, #120]	@ (8007380 <TIM_OC4_SetConfig+0x114>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00f      	beq.n	800732c <TIM_OC4_SetConfig+0xc0>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1e      	ldr	r2, [pc, #120]	@ (8007388 <TIM_OC4_SetConfig+0x11c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_OC4_SetConfig+0xc0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <TIM_OC4_SetConfig+0x120>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_OC4_SetConfig+0xc0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <TIM_OC4_SetConfig+0x124>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC4_SetConfig+0xc0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a17      	ldr	r2, [pc, #92]	@ (8007384 <TIM_OC4_SetConfig+0x118>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d113      	bne.n	8007354 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007332:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800733a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	019b      	lsls	r3, r3, #6
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40013400 	.word	0x40013400
 8007384:	40015000 	.word	0x40015000
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80073d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	041b      	lsls	r3, r3, #16
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a19      	ldr	r2, [pc, #100]	@ (8007450 <TIM_OC5_SetConfig+0xbc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d013      	beq.n	8007416 <TIM_OC5_SetConfig+0x82>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a18      	ldr	r2, [pc, #96]	@ (8007454 <TIM_OC5_SetConfig+0xc0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00f      	beq.n	8007416 <TIM_OC5_SetConfig+0x82>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a17      	ldr	r2, [pc, #92]	@ (8007458 <TIM_OC5_SetConfig+0xc4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00b      	beq.n	8007416 <TIM_OC5_SetConfig+0x82>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a16      	ldr	r2, [pc, #88]	@ (800745c <TIM_OC5_SetConfig+0xc8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d007      	beq.n	8007416 <TIM_OC5_SetConfig+0x82>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a15      	ldr	r2, [pc, #84]	@ (8007460 <TIM_OC5_SetConfig+0xcc>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_OC5_SetConfig+0x82>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a14      	ldr	r2, [pc, #80]	@ (8007464 <TIM_OC5_SetConfig+0xd0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d109      	bne.n	800742a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800741c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40012c00 	.word	0x40012c00
 8007454:	40013400 	.word	0x40013400
 8007458:	40014000 	.word	0x40014000
 800745c:	40014400 	.word	0x40014400
 8007460:	40014800 	.word	0x40014800
 8007464:	40015000 	.word	0x40015000

08007468 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	021b      	lsls	r3, r3, #8
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	051b      	lsls	r3, r3, #20
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <TIM_OC6_SetConfig+0xc0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <TIM_OC6_SetConfig+0x84>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a19      	ldr	r2, [pc, #100]	@ (800752c <TIM_OC6_SetConfig+0xc4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00f      	beq.n	80074ec <TIM_OC6_SetConfig+0x84>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <TIM_OC6_SetConfig+0xc8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00b      	beq.n	80074ec <TIM_OC6_SetConfig+0x84>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a17      	ldr	r2, [pc, #92]	@ (8007534 <TIM_OC6_SetConfig+0xcc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d007      	beq.n	80074ec <TIM_OC6_SetConfig+0x84>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a16      	ldr	r2, [pc, #88]	@ (8007538 <TIM_OC6_SetConfig+0xd0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC6_SetConfig+0x84>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a15      	ldr	r2, [pc, #84]	@ (800753c <TIM_OC6_SetConfig+0xd4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d109      	bne.n	8007500 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	029b      	lsls	r3, r3, #10
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40013400 	.word	0x40013400
 8007530:	40014000 	.word	0x40014000
 8007534:	40014400 	.word	0x40014400
 8007538:	40014800 	.word	0x40014800
 800753c:	40015000 	.word	0x40015000

08007540 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f023 0201 	bic.w	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4a28      	ldr	r2, [pc, #160]	@ (800760c <TIM_TI1_SetConfig+0xcc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01b      	beq.n	80075a6 <TIM_TI1_SetConfig+0x66>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007574:	d017      	beq.n	80075a6 <TIM_TI1_SetConfig+0x66>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a25      	ldr	r2, [pc, #148]	@ (8007610 <TIM_TI1_SetConfig+0xd0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d013      	beq.n	80075a6 <TIM_TI1_SetConfig+0x66>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4a24      	ldr	r2, [pc, #144]	@ (8007614 <TIM_TI1_SetConfig+0xd4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00f      	beq.n	80075a6 <TIM_TI1_SetConfig+0x66>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a23      	ldr	r2, [pc, #140]	@ (8007618 <TIM_TI1_SetConfig+0xd8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00b      	beq.n	80075a6 <TIM_TI1_SetConfig+0x66>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4a22      	ldr	r2, [pc, #136]	@ (800761c <TIM_TI1_SetConfig+0xdc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d007      	beq.n	80075a6 <TIM_TI1_SetConfig+0x66>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a21      	ldr	r2, [pc, #132]	@ (8007620 <TIM_TI1_SetConfig+0xe0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d003      	beq.n	80075a6 <TIM_TI1_SetConfig+0x66>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a20      	ldr	r2, [pc, #128]	@ (8007624 <TIM_TI1_SetConfig+0xe4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d101      	bne.n	80075aa <TIM_TI1_SetConfig+0x6a>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <TIM_TI1_SetConfig+0x6c>
 80075aa:	2300      	movs	r3, #0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d008      	beq.n	80075c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	e003      	b.n	80075ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f023 030a 	bic.w	r3, r3, #10
 80075e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 030a 	and.w	r3, r3, #10
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	621a      	str	r2, [r3, #32]
}
 80075fe:	bf00      	nop
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40012c00 	.word	0x40012c00
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40000c00 	.word	0x40000c00
 800761c:	40013400 	.word	0x40013400
 8007620:	40014000 	.word	0x40014000
 8007624:	40015000 	.word	0x40015000

08007628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	f023 0201 	bic.w	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f023 030a 	bic.w	r3, r3, #10
 8007664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	621a      	str	r2, [r3, #32]
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007686:	b480      	push	{r7}
 8007688:	b087      	sub	sp, #28
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f023 0210 	bic.w	r2, r3, #16
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	031b      	lsls	r3, r3, #12
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80076fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	f043 0307 	orr.w	r3, r3, #7
 800770c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	609a      	str	r2, [r3, #8]
}
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800773a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	021a      	lsls	r2, r3, #8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	431a      	orrs	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4313      	orrs	r3, r2
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	609a      	str	r2, [r3, #8]
}
 8007754:	bf00      	nop
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2201      	movs	r2, #1
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a1a      	ldr	r2, [r3, #32]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	43db      	mvns	r3, r3
 8007782:	401a      	ands	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a1a      	ldr	r2, [r3, #32]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	fa01 f303 	lsl.w	r3, r1, r3
 8007798:	431a      	orrs	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	621a      	str	r2, [r3, #32]
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b08a      	sub	sp, #40	@ 0x28
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e0a0      	b.n	8007900 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fa fa48 	bl	8001c68 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f7ff fad6 	bl	8006d9c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	6819      	ldr	r1, [r3, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2203      	movs	r2, #3
 80077fe:	f7ff fe9f 	bl	8007540 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 020c 	bic.w	r2, r2, #12
 8007810:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6999      	ldr	r1, [r3, #24]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007832:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007846:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007856:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6812      	ldr	r2, [r2, #0]
 8007862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007866:	f023 0307 	bic.w	r3, r3, #7
 800786a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0204 	orr.w	r2, r2, #4
 800787a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800787c:	2300      	movs	r3, #0
 800787e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007880:	2300      	movs	r3, #0
 8007882:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007884:	2370      	movs	r3, #112	@ 0x70
 8007886:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007888:	2300      	movs	r3, #0
 800788a:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800788c:	2300      	movs	r3, #0
 800788e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007890:	2300      	movs	r3, #0
 8007892:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f107 020c 	add.w	r2, r7, #12
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fbbb 	bl	8007020 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80078b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078bc:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80078cc:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3728      	adds	r7, #40	@ 0x28
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d109      	bne.n	8007930 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	bf14      	ite	ne
 8007928:	2301      	movne	r3, #1
 800792a:	2300      	moveq	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	e022      	b.n	8007976 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b04      	cmp	r3, #4
 8007934:	d109      	bne.n	800794a <HAL_TIMEx_PWMN_Start_IT+0x42>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b01      	cmp	r3, #1
 8007940:	bf14      	ite	ne
 8007942:	2301      	movne	r3, #1
 8007944:	2300      	moveq	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	e015      	b.n	8007976 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b08      	cmp	r3, #8
 800794e:	d109      	bne.n	8007964 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	bf14      	ite	ne
 800795c:	2301      	movne	r3, #1
 800795e:	2300      	moveq	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	e008      	b.n	8007976 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	bf14      	ite	ne
 8007970:	2301      	movne	r3, #1
 8007972:	2300      	moveq	r3, #0
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e0c6      	b.n	8007b0c <HAL_TIMEx_PWMN_Start_IT+0x204>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <HAL_TIMEx_PWMN_Start_IT+0x86>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800798c:	e013      	b.n	80079b6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b04      	cmp	r3, #4
 8007992:	d104      	bne.n	800799e <HAL_TIMEx_PWMN_Start_IT+0x96>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800799c:	e00b      	b.n	80079b6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d104      	bne.n	80079ae <HAL_TIMEx_PWMN_Start_IT+0xa6>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079ac:	e003      	b.n	80079b6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b0c      	cmp	r3, #12
 80079ba:	d841      	bhi.n	8007a40 <HAL_TIMEx_PWMN_Start_IT+0x138>
 80079bc:	a201      	add	r2, pc, #4	@ (adr r2, 80079c4 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079f9 	.word	0x080079f9
 80079c8:	08007a41 	.word	0x08007a41
 80079cc:	08007a41 	.word	0x08007a41
 80079d0:	08007a41 	.word	0x08007a41
 80079d4:	08007a0b 	.word	0x08007a0b
 80079d8:	08007a41 	.word	0x08007a41
 80079dc:	08007a41 	.word	0x08007a41
 80079e0:	08007a41 	.word	0x08007a41
 80079e4:	08007a1d 	.word	0x08007a1d
 80079e8:	08007a41 	.word	0x08007a41
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	08007a41 	.word	0x08007a41
 80079f4:	08007a2f 	.word	0x08007a2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0202 	orr.w	r2, r2, #2
 8007a06:	60da      	str	r2, [r3, #12]
      break;
 8007a08:	e01d      	b.n	8007a46 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0204 	orr.w	r2, r2, #4
 8007a18:	60da      	str	r2, [r3, #12]
      break;
 8007a1a:	e014      	b.n	8007a46 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0208 	orr.w	r2, r2, #8
 8007a2a:	60da      	str	r2, [r3, #12]
      break;
 8007a2c:	e00b      	b.n	8007a46 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0210 	orr.w	r2, r2, #16
 8007a3c:	60da      	str	r2, [r3, #12]
      break;
 8007a3e:	e002      	b.n	8007a46 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
      break;
 8007a44:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d15e      	bne.n	8007b0a <HAL_TIMEx_PWMN_Start_IT+0x202>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a5a:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2204      	movs	r2, #4
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 faaf 	bl	8007fc8 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a25      	ldr	r2, [pc, #148]	@ (8007b14 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d022      	beq.n	8007aca <HAL_TIMEx_PWMN_Start_IT+0x1c2>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8c:	d01d      	beq.n	8007aca <HAL_TIMEx_PWMN_Start_IT+0x1c2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a21      	ldr	r2, [pc, #132]	@ (8007b18 <HAL_TIMEx_PWMN_Start_IT+0x210>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d018      	beq.n	8007aca <HAL_TIMEx_PWMN_Start_IT+0x1c2>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8007b1c <HAL_TIMEx_PWMN_Start_IT+0x214>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <HAL_TIMEx_PWMN_Start_IT+0x1c2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b20 <HAL_TIMEx_PWMN_Start_IT+0x218>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <HAL_TIMEx_PWMN_Start_IT+0x1c2>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b24 <HAL_TIMEx_PWMN_Start_IT+0x21c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d009      	beq.n	8007aca <HAL_TIMEx_PWMN_Start_IT+0x1c2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1b      	ldr	r2, [pc, #108]	@ (8007b28 <HAL_TIMEx_PWMN_Start_IT+0x220>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <HAL_TIMEx_PWMN_Start_IT+0x1c2>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a19      	ldr	r2, [pc, #100]	@ (8007b2c <HAL_TIMEx_PWMN_Start_IT+0x224>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d115      	bne.n	8007af6 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	4b17      	ldr	r3, [pc, #92]	@ (8007b30 <HAL_TIMEx_PWMN_Start_IT+0x228>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b06      	cmp	r3, #6
 8007ada:	d015      	beq.n	8007b08 <HAL_TIMEx_PWMN_Start_IT+0x200>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae2:	d011      	beq.n	8007b08 <HAL_TIMEx_PWMN_Start_IT+0x200>
      {
        __HAL_TIM_ENABLE(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af4:	e008      	b.n	8007b08 <HAL_TIMEx_PWMN_Start_IT+0x200>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0201 	orr.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	e000      	b.n	8007b0a <HAL_TIMEx_PWMN_Start_IT+0x202>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b08:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40000400 	.word	0x40000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	40013400 	.word	0x40013400
 8007b28:	40014000 	.word	0x40014000
 8007b2c:	40015000 	.word	0x40015000
 8007b30:	00010007 	.word	0x00010007

08007b34 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b0c      	cmp	r3, #12
 8007b46:	d841      	bhi.n	8007bcc <HAL_TIMEx_PWMN_Stop_IT+0x98>
 8007b48:	a201      	add	r2, pc, #4	@ (adr r2, 8007b50 <HAL_TIMEx_PWMN_Stop_IT+0x1c>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b85 	.word	0x08007b85
 8007b54:	08007bcd 	.word	0x08007bcd
 8007b58:	08007bcd 	.word	0x08007bcd
 8007b5c:	08007bcd 	.word	0x08007bcd
 8007b60:	08007b97 	.word	0x08007b97
 8007b64:	08007bcd 	.word	0x08007bcd
 8007b68:	08007bcd 	.word	0x08007bcd
 8007b6c:	08007bcd 	.word	0x08007bcd
 8007b70:	08007ba9 	.word	0x08007ba9
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007bcd 	.word	0x08007bcd
 8007b80:	08007bbb 	.word	0x08007bbb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0202 	bic.w	r2, r2, #2
 8007b92:	60da      	str	r2, [r3, #12]
      break;
 8007b94:	e01d      	b.n	8007bd2 <HAL_TIMEx_PWMN_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0204 	bic.w	r2, r2, #4
 8007ba4:	60da      	str	r2, [r3, #12]
      break;
 8007ba6:	e014      	b.n	8007bd2 <HAL_TIMEx_PWMN_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0208 	bic.w	r2, r2, #8
 8007bb6:	60da      	str	r2, [r3, #12]
      break;
 8007bb8:	e00b      	b.n	8007bd2 <HAL_TIMEx_PWMN_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0210 	bic.w	r2, r2, #16
 8007bc8:	60da      	str	r2, [r3, #12]
      break;
 8007bca:	e002      	b.n	8007bd2 <HAL_TIMEx_PWMN_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d164      	bne.n	8007ca2 <HAL_TIMEx_PWMN_Stop_IT+0x16e>
  {
    /* Disable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f9f1 	bl	8007fc8 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE  | TIM_CCER_CC4NE)) == (uint32_t)RESET)
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d107      	bne.n	8007c0a <HAL_TIMEx_PWMN_Stop_IT+0xd6>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c08:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10f      	bne.n	8007c3a <HAL_TIMEx_PWMN_Stop_IT+0x106>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a1a      	ldr	r2, [r3, #32]
 8007c20:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d107      	bne.n	8007c3a <HAL_TIMEx_PWMN_Stop_IT+0x106>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c44:	4013      	ands	r3, r2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10f      	bne.n	8007c6a <HAL_TIMEx_PWMN_Stop_IT+0x136>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6a1a      	ldr	r2, [r3, #32]
 8007c50:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c54:	4013      	ands	r3, r2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d107      	bne.n	8007c6a <HAL_TIMEx_PWMN_Stop_IT+0x136>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0201 	bic.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d104      	bne.n	8007c7a <HAL_TIMEx_PWMN_Stop_IT+0x146>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c78:	e013      	b.n	8007ca2 <HAL_TIMEx_PWMN_Stop_IT+0x16e>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d104      	bne.n	8007c8a <HAL_TIMEx_PWMN_Stop_IT+0x156>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c88:	e00b      	b.n	8007ca2 <HAL_TIMEx_PWMN_Stop_IT+0x16e>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d104      	bne.n	8007c9a <HAL_TIMEx_PWMN_Stop_IT+0x166>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c98:	e003      	b.n	8007ca2 <HAL_TIMEx_PWMN_Stop_IT+0x16e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e074      	b.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a34      	ldr	r2, [pc, #208]	@ (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a33      	ldr	r2, [pc, #204]	@ (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a31      	ldr	r2, [pc, #196]	@ (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d108      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007d08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a21      	ldr	r2, [pc, #132]	@ (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d022      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d44:	d01d      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d018      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1d      	ldr	r2, [pc, #116]	@ (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00e      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a15      	ldr	r2, [pc, #84]	@ (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d004      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a11      	ldr	r2, [pc, #68]	@ (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d10c      	bne.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40012c00 	.word	0x40012c00
 8007dc0:	40013400 	.word	0x40013400
 8007dc4:	40015000 	.word	0x40015000
 8007dc8:	40000400 	.word	0x40000400
 8007dcc:	40000800 	.word	0x40000800
 8007dd0:	40000c00 	.word	0x40000c00
 8007dd4:	40014000 	.word	0x40014000

08007dd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e096      	b.n	8007f22 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a2f      	ldr	r2, [pc, #188]	@ (8007f30 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d009      	beq.n	8007e8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8007f34 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d004      	beq.n	8007e8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a2c      	ldr	r2, [pc, #176]	@ (8007f38 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d106      	bne.n	8007e9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a24      	ldr	r2, [pc, #144]	@ (8007f30 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d009      	beq.n	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a22      	ldr	r2, [pc, #136]	@ (8007f34 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d004      	beq.n	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a21      	ldr	r2, [pc, #132]	@ (8007f38 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d12b      	bne.n	8007f10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec2:	051b      	lsls	r3, r3, #20
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a11      	ldr	r2, [pc, #68]	@ (8007f30 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d009      	beq.n	8007f02 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a10      	ldr	r2, [pc, #64]	@ (8007f34 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a0e      	ldr	r2, [pc, #56]	@ (8007f38 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d106      	bne.n	8007f10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40012c00 	.word	0x40012c00
 8007f34:	40013400 	.word	0x40013400
 8007f38:	40015000 	.word	0x40015000

08007f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	2204      	movs	r2, #4
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1a      	ldr	r2, [r3, #32]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	401a      	ands	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1a      	ldr	r2, [r3, #32]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8008000:	431a      	orrs	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e042      	b.n	80080aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f9 ff78 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2224      	movs	r2, #36	@ 0x24
 8008040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fc51 	bl	80088fc <UART_SetConfig>
 800805a:	4603      	mov	r3, r0
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e022      	b.n	80080aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 ff41 	bl	8008ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008080:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008090:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0201 	orr.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 ffc8 	bl	8009038 <UART_CheckIdleState>
 80080a8:	4603      	mov	r3, r0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b08a      	sub	sp, #40	@ 0x28
 80080b6:	af02      	add	r7, sp, #8
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	f040 8083 	bne.w	80081d4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_UART_Transmit+0x28>
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e07b      	b.n	80081d6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_UART_Transmit+0x3a>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e074      	b.n	80081d6 <HAL_UART_Transmit+0x124>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2221      	movs	r2, #33	@ 0x21
 8008100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008104:	f7fa fb0e 	bl	8002724 <HAL_GetTick>
 8008108:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	88fa      	ldrh	r2, [r7, #6]
 800810e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	88fa      	ldrh	r2, [r7, #6]
 8008116:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008122:	d108      	bne.n	8008136 <HAL_UART_Transmit+0x84>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800812c:	2300      	movs	r3, #0
 800812e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	e003      	b.n	800813e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800813a:	2300      	movs	r3, #0
 800813c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8008146:	e02c      	b.n	80081a2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2200      	movs	r2, #0
 8008150:	2180      	movs	r1, #128	@ 0x80
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 ffbb 	bl	80090ce <UART_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e039      	b.n	80081d6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10b      	bne.n	8008180 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008176:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	3302      	adds	r3, #2
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	e007      	b.n	8008190 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3301      	adds	r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1cc      	bne.n	8008148 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2200      	movs	r2, #0
 80081b6:	2140      	movs	r1, #64	@ 0x40
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 ff88 	bl	80090ce <UART_WaitOnFlagUntilTimeout>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e006      	b.n	80081d6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e000      	b.n	80081d6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80081d4:	2302      	movs	r3, #2
  }
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3720      	adds	r7, #32
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	@ 0x28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4613      	mov	r3, r2
 80081ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d142      	bne.n	800827e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_UART_Receive_IT+0x24>
 80081fe:	88fb      	ldrh	r3, [r7, #6]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e03b      	b.n	8008280 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_UART_Receive_IT+0x36>
 8008212:	2302      	movs	r3, #2
 8008214:	e034      	b.n	8008280 <HAL_UART_Receive_IT+0xa0>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a17      	ldr	r2, [pc, #92]	@ (8008288 <HAL_UART_Receive_IT+0xa8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d01f      	beq.n	800826e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d018      	beq.n	800826e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	613b      	str	r3, [r7, #16]
   return(result);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008250:	627b      	str	r3, [r7, #36]	@ 0x24
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	623b      	str	r3, [r7, #32]
 800825c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	69f9      	ldr	r1, [r7, #28]
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	61bb      	str	r3, [r7, #24]
   return(result);
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e6      	bne.n	800823c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	461a      	mov	r2, r3
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fff3 	bl	8009260 <UART_Start_Receive_IT>
 800827a:	4603      	mov	r3, r0
 800827c:	e000      	b.n	8008280 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800827e:	2302      	movs	r3, #2
  }
}
 8008280:	4618      	mov	r0, r3
 8008282:	3728      	adds	r7, #40	@ 0x28
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40008000 	.word	0x40008000

0800828c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b0ba      	sub	sp, #232	@ 0xe8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80082b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80082ba:	4013      	ands	r3, r2
 80082bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80082c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d11b      	bne.n	8008300 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d015      	beq.n	8008300 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d105      	bne.n	80082ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d009      	beq.n	8008300 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 82d6 	beq.w	80088a2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
      }
      return;
 80082fe:	e2d0      	b.n	80088a2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 811f 	beq.w	8008548 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800830a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800830e:	4b8b      	ldr	r3, [pc, #556]	@ (800853c <HAL_UART_IRQHandler+0x2b0>)
 8008310:	4013      	ands	r3, r2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d106      	bne.n	8008324 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008316:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800831a:	4b89      	ldr	r3, [pc, #548]	@ (8008540 <HAL_UART_IRQHandler+0x2b4>)
 800831c:	4013      	ands	r3, r2
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 8112 	beq.w	8008548 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d011      	beq.n	8008354 <HAL_UART_IRQHandler+0xc8>
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2201      	movs	r2, #1
 8008342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800834a:	f043 0201 	orr.w	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d011      	beq.n	8008384 <HAL_UART_IRQHandler+0xf8>
 8008360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2202      	movs	r2, #2
 8008372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800837a:	f043 0204 	orr.w	r2, r3, #4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d011      	beq.n	80083b4 <HAL_UART_IRQHandler+0x128>
 8008390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2204      	movs	r2, #4
 80083a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083aa:	f043 0202 	orr.w	r2, r3, #2
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d017      	beq.n	80083f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d105      	bne.n	80083d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80083cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80083d0:	4b5a      	ldr	r3, [pc, #360]	@ (800853c <HAL_UART_IRQHandler+0x2b0>)
 80083d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2208      	movs	r2, #8
 80083de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083e6:	f043 0208 	orr.w	r2, r3, #8
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d012      	beq.n	8008422 <HAL_UART_IRQHandler+0x196>
 80083fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008400:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00c      	beq.n	8008422 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008418:	f043 0220 	orr.w	r2, r3, #32
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 823c 	beq.w	80088a6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800842e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d013      	beq.n	8008462 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800843a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d105      	bne.n	8008452 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800844a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008476:	2b40      	cmp	r3, #64	@ 0x40
 8008478:	d005      	beq.n	8008486 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800847a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800847e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008482:	2b00      	cmp	r3, #0
 8008484:	d04f      	beq.n	8008526 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 f814 	bl	80094b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008496:	2b40      	cmp	r3, #64	@ 0x40
 8008498:	d141      	bne.n	800851e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3308      	adds	r3, #8
 80084a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80084d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80084de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1d9      	bne.n	800849a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d013      	beq.n	8008516 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084f2:	4a14      	ldr	r2, [pc, #80]	@ (8008544 <HAL_UART_IRQHandler+0x2b8>)
 80084f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fc fa73 	bl	80049e6 <HAL_DMA_Abort_IT>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d017      	beq.n	8008536 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008514:	e00f      	b.n	8008536 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f9da 	bl	80088d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851c:	e00b      	b.n	8008536 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f9d6 	bl	80088d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008524:	e007      	b.n	8008536 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f9d2 	bl	80088d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8008534:	e1b7      	b.n	80088a6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008536:	bf00      	nop
    return;
 8008538:	e1b5      	b.n	80088a6 <HAL_UART_IRQHandler+0x61a>
 800853a:	bf00      	nop
 800853c:	10000001 	.word	0x10000001
 8008540:	04000120 	.word	0x04000120
 8008544:	08009581 	.word	0x08009581

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854c:	2b01      	cmp	r3, #1
 800854e:	f040 814a 	bne.w	80087e6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008556:	f003 0310 	and.w	r3, r3, #16
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 8143 	beq.w	80087e6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 813c 	beq.w	80087e6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2210      	movs	r2, #16
 8008574:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b40      	cmp	r3, #64	@ 0x40
 8008582:	f040 80b5 	bne.w	80086f0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008592:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8187 	beq.w	80088aa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085a6:	429a      	cmp	r2, r3
 80085a8:	f080 817f 	bcs.w	80088aa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f040 8086 	bne.w	80086d4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80085dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80085f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80085fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800860a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1da      	bne.n	80085c8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008636:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800863a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800863e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e1      	bne.n	8008612 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800865e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008672:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008674:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e3      	bne.n	800864e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086a4:	f023 0310 	bic.w	r3, r3, #16
 80086a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e4      	bne.n	8008694 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fc f930 	bl	8004934 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f8fb 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086ee:	e0dc      	b.n	80088aa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800870a:	b29b      	uxth	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80ce 	beq.w	80088ae <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80c9 	beq.w	80088ae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800872a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800873e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008740:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800874c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e4      	bne.n	800871c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	623b      	str	r3, [r7, #32]
   return(result);
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008768:	f023 0301 	bic.w	r3, r3, #1
 800876c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800877a:	633a      	str	r2, [r7, #48]	@ 0x30
 800877c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e1      	bne.n	8008752 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0310 	bic.w	r3, r3, #16
 80087b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	69b9      	ldr	r1, [r7, #24]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	617b      	str	r3, [r7, #20]
   return(result);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e4      	bne.n	80087a2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f880 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087e4:	e063      	b.n	80088ae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <HAL_UART_IRQHandler+0x584>
 80087f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d008      	beq.n	8008810 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008806:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 fb57 	bl	8009ebc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800880e:	e051      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008818:	2b00      	cmp	r3, #0
 800881a:	d014      	beq.n	8008846 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800881c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008824:	2b00      	cmp	r3, #0
 8008826:	d105      	bne.n	8008834 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800882c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d008      	beq.n	8008846 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008838:	2b00      	cmp	r3, #0
 800883a:	d03a      	beq.n	80088b2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
    }
    return;
 8008844:	e035      	b.n	80088b2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800884e:	2b00      	cmp	r3, #0
 8008850:	d009      	beq.n	8008866 <HAL_UART_IRQHandler+0x5da>
 8008852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fea4 	bl	80095ac <UART_EndTransmit_IT>
    return;
 8008864:	e026      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800886a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d009      	beq.n	8008886 <HAL_UART_IRQHandler+0x5fa>
 8008872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008876:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fb30 	bl	8009ee4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008884:	e016      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d010      	beq.n	80088b4 <HAL_UART_IRQHandler+0x628>
 8008892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008896:	2b00      	cmp	r3, #0
 8008898:	da0c      	bge.n	80088b4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 fb18 	bl	8009ed0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088a0:	e008      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
      return;
 80088a2:	bf00      	nop
 80088a4:	e006      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
    return;
 80088a6:	bf00      	nop
 80088a8:	e004      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
      return;
 80088aa:	bf00      	nop
 80088ac:	e002      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
      return;
 80088ae:	bf00      	nop
 80088b0:	e000      	b.n	80088b4 <HAL_UART_IRQHandler+0x628>
    return;
 80088b2:	bf00      	nop
  }
}
 80088b4:	37e8      	adds	r7, #232	@ 0xe8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop

080088bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008900:	b08c      	sub	sp, #48	@ 0x30
 8008902:	af00      	add	r7, sp, #0
 8008904:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	689a      	ldr	r2, [r3, #8]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	431a      	orrs	r2, r3
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	431a      	orrs	r2, r3
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	4313      	orrs	r3, r2
 8008922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	4baa      	ldr	r3, [pc, #680]	@ (8008bd4 <UART_SetConfig+0x2d8>)
 800892c:	4013      	ands	r3, r2
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008934:	430b      	orrs	r3, r1
 8008936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a9f      	ldr	r2, [pc, #636]	@ (8008bd8 <UART_SetConfig+0x2dc>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d004      	beq.n	8008968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008964:	4313      	orrs	r3, r2
 8008966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008972:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800897c:	430b      	orrs	r3, r1
 800897e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	f023 010f 	bic.w	r1, r3, #15
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a90      	ldr	r2, [pc, #576]	@ (8008bdc <UART_SetConfig+0x2e0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d125      	bne.n	80089ec <UART_SetConfig+0xf0>
 80089a0:	4b8f      	ldr	r3, [pc, #572]	@ (8008be0 <UART_SetConfig+0x2e4>)
 80089a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d81a      	bhi.n	80089e4 <UART_SetConfig+0xe8>
 80089ae:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <UART_SetConfig+0xb8>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089c5 	.word	0x080089c5
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	080089cd 	.word	0x080089cd
 80089c0:	080089dd 	.word	0x080089dd
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ca:	e116      	b.n	8008bfa <UART_SetConfig+0x2fe>
 80089cc:	2302      	movs	r3, #2
 80089ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d2:	e112      	b.n	8008bfa <UART_SetConfig+0x2fe>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089da:	e10e      	b.n	8008bfa <UART_SetConfig+0x2fe>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e2:	e10a      	b.n	8008bfa <UART_SetConfig+0x2fe>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ea:	e106      	b.n	8008bfa <UART_SetConfig+0x2fe>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a7c      	ldr	r2, [pc, #496]	@ (8008be4 <UART_SetConfig+0x2e8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d138      	bne.n	8008a68 <UART_SetConfig+0x16c>
 80089f6:	4b7a      	ldr	r3, [pc, #488]	@ (8008be0 <UART_SetConfig+0x2e4>)
 80089f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089fc:	f003 030c 	and.w	r3, r3, #12
 8008a00:	2b0c      	cmp	r3, #12
 8008a02:	d82d      	bhi.n	8008a60 <UART_SetConfig+0x164>
 8008a04:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <UART_SetConfig+0x110>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a41 	.word	0x08008a41
 8008a10:	08008a61 	.word	0x08008a61
 8008a14:	08008a61 	.word	0x08008a61
 8008a18:	08008a61 	.word	0x08008a61
 8008a1c:	08008a51 	.word	0x08008a51
 8008a20:	08008a61 	.word	0x08008a61
 8008a24:	08008a61 	.word	0x08008a61
 8008a28:	08008a61 	.word	0x08008a61
 8008a2c:	08008a49 	.word	0x08008a49
 8008a30:	08008a61 	.word	0x08008a61
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	08008a59 	.word	0x08008a59
 8008a40:	2300      	movs	r3, #0
 8008a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a46:	e0d8      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a4e:	e0d4      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a56:	e0d0      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5e:	e0cc      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a66:	e0c8      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8008be8 <UART_SetConfig+0x2ec>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d125      	bne.n	8008abe <UART_SetConfig+0x1c2>
 8008a72:	4b5b      	ldr	r3, [pc, #364]	@ (8008be0 <UART_SetConfig+0x2e4>)
 8008a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a7c:	2b30      	cmp	r3, #48	@ 0x30
 8008a7e:	d016      	beq.n	8008aae <UART_SetConfig+0x1b2>
 8008a80:	2b30      	cmp	r3, #48	@ 0x30
 8008a82:	d818      	bhi.n	8008ab6 <UART_SetConfig+0x1ba>
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d00a      	beq.n	8008a9e <UART_SetConfig+0x1a2>
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	d814      	bhi.n	8008ab6 <UART_SetConfig+0x1ba>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <UART_SetConfig+0x19a>
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d008      	beq.n	8008aa6 <UART_SetConfig+0x1aa>
 8008a94:	e00f      	b.n	8008ab6 <UART_SetConfig+0x1ba>
 8008a96:	2300      	movs	r3, #0
 8008a98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a9c:	e0ad      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa4:	e0a9      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008aa6:	2304      	movs	r3, #4
 8008aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aac:	e0a5      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008aae:	2308      	movs	r3, #8
 8008ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab4:	e0a1      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008ab6:	2310      	movs	r3, #16
 8008ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008abc:	e09d      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8008bec <UART_SetConfig+0x2f0>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d125      	bne.n	8008b14 <UART_SetConfig+0x218>
 8008ac8:	4b45      	ldr	r3, [pc, #276]	@ (8008be0 <UART_SetConfig+0x2e4>)
 8008aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ace:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ad4:	d016      	beq.n	8008b04 <UART_SetConfig+0x208>
 8008ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ad8:	d818      	bhi.n	8008b0c <UART_SetConfig+0x210>
 8008ada:	2b80      	cmp	r3, #128	@ 0x80
 8008adc:	d00a      	beq.n	8008af4 <UART_SetConfig+0x1f8>
 8008ade:	2b80      	cmp	r3, #128	@ 0x80
 8008ae0:	d814      	bhi.n	8008b0c <UART_SetConfig+0x210>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <UART_SetConfig+0x1f0>
 8008ae6:	2b40      	cmp	r3, #64	@ 0x40
 8008ae8:	d008      	beq.n	8008afc <UART_SetConfig+0x200>
 8008aea:	e00f      	b.n	8008b0c <UART_SetConfig+0x210>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af2:	e082      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008af4:	2302      	movs	r3, #2
 8008af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afa:	e07e      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008afc:	2304      	movs	r3, #4
 8008afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b02:	e07a      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b04:	2308      	movs	r3, #8
 8008b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b0a:	e076      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b12:	e072      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a35      	ldr	r2, [pc, #212]	@ (8008bf0 <UART_SetConfig+0x2f4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d12a      	bne.n	8008b74 <UART_SetConfig+0x278>
 8008b1e:	4b30      	ldr	r3, [pc, #192]	@ (8008be0 <UART_SetConfig+0x2e4>)
 8008b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b2c:	d01a      	beq.n	8008b64 <UART_SetConfig+0x268>
 8008b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b32:	d81b      	bhi.n	8008b6c <UART_SetConfig+0x270>
 8008b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b38:	d00c      	beq.n	8008b54 <UART_SetConfig+0x258>
 8008b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b3e:	d815      	bhi.n	8008b6c <UART_SetConfig+0x270>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <UART_SetConfig+0x250>
 8008b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b48:	d008      	beq.n	8008b5c <UART_SetConfig+0x260>
 8008b4a:	e00f      	b.n	8008b6c <UART_SetConfig+0x270>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b52:	e052      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b54:	2302      	movs	r3, #2
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5a:	e04e      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b62:	e04a      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b64:	2308      	movs	r3, #8
 8008b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6a:	e046      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b72:	e042      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a17      	ldr	r2, [pc, #92]	@ (8008bd8 <UART_SetConfig+0x2dc>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d13a      	bne.n	8008bf4 <UART_SetConfig+0x2f8>
 8008b7e:	4b18      	ldr	r3, [pc, #96]	@ (8008be0 <UART_SetConfig+0x2e4>)
 8008b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b8c:	d01a      	beq.n	8008bc4 <UART_SetConfig+0x2c8>
 8008b8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b92:	d81b      	bhi.n	8008bcc <UART_SetConfig+0x2d0>
 8008b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b98:	d00c      	beq.n	8008bb4 <UART_SetConfig+0x2b8>
 8008b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b9e:	d815      	bhi.n	8008bcc <UART_SetConfig+0x2d0>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <UART_SetConfig+0x2b0>
 8008ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ba8:	d008      	beq.n	8008bbc <UART_SetConfig+0x2c0>
 8008baa:	e00f      	b.n	8008bcc <UART_SetConfig+0x2d0>
 8008bac:	2300      	movs	r3, #0
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb2:	e022      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bba:	e01e      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc2:	e01a      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bca:	e016      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bd2:	e012      	b.n	8008bfa <UART_SetConfig+0x2fe>
 8008bd4:	cfff69f3 	.word	0xcfff69f3
 8008bd8:	40008000 	.word	0x40008000
 8008bdc:	40013800 	.word	0x40013800
 8008be0:	40021000 	.word	0x40021000
 8008be4:	40004400 	.word	0x40004400
 8008be8:	40004800 	.word	0x40004800
 8008bec:	40004c00 	.word	0x40004c00
 8008bf0:	40005000 	.word	0x40005000
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4aae      	ldr	r2, [pc, #696]	@ (8008eb8 <UART_SetConfig+0x5bc>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	f040 8097 	bne.w	8008d34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d823      	bhi.n	8008c56 <UART_SetConfig+0x35a>
 8008c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c14 <UART_SetConfig+0x318>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c57 	.word	0x08008c57
 8008c1c:	08008c41 	.word	0x08008c41
 8008c20:	08008c57 	.word	0x08008c57
 8008c24:	08008c47 	.word	0x08008c47
 8008c28:	08008c57 	.word	0x08008c57
 8008c2c:	08008c57 	.word	0x08008c57
 8008c30:	08008c57 	.word	0x08008c57
 8008c34:	08008c4f 	.word	0x08008c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c38:	f7fc fe70 	bl	800591c <HAL_RCC_GetPCLK1Freq>
 8008c3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c3e:	e010      	b.n	8008c62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c40:	4b9e      	ldr	r3, [pc, #632]	@ (8008ebc <UART_SetConfig+0x5c0>)
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c44:	e00d      	b.n	8008c62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c46:	f7fc fdfb 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8008c4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c4c:	e009      	b.n	8008c62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c54:	e005      	b.n	8008c62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 8130 	beq.w	8008eca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6e:	4a94      	ldr	r2, [pc, #592]	@ (8008ec0 <UART_SetConfig+0x5c4>)
 8008c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4413      	add	r3, r2
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d305      	bcc.n	8008c9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d903      	bls.n	8008ca2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ca0:	e113      	b.n	8008eca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	60bb      	str	r3, [r7, #8]
 8008ca8:	60fa      	str	r2, [r7, #12]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cae:	4a84      	ldr	r2, [pc, #528]	@ (8008ec0 <UART_SetConfig+0x5c4>)
 8008cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	603b      	str	r3, [r7, #0]
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cc4:	f7f8 f818 	bl	8000cf8 <__aeabi_uldivmod>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	020b      	lsls	r3, r1, #8
 8008cda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cde:	0202      	lsls	r2, r0, #8
 8008ce0:	6979      	ldr	r1, [r7, #20]
 8008ce2:	6849      	ldr	r1, [r1, #4]
 8008ce4:	0849      	lsrs	r1, r1, #1
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	460c      	mov	r4, r1
 8008cea:	4605      	mov	r5, r0
 8008cec:	eb12 0804 	adds.w	r8, r2, r4
 8008cf0:	eb43 0905 	adc.w	r9, r3, r5
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	469a      	mov	sl, r3
 8008cfc:	4693      	mov	fp, r2
 8008cfe:	4652      	mov	r2, sl
 8008d00:	465b      	mov	r3, fp
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 fff7 	bl	8000cf8 <__aeabi_uldivmod>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4613      	mov	r3, r2
 8008d10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d18:	d308      	bcc.n	8008d2c <UART_SetConfig+0x430>
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d20:	d204      	bcs.n	8008d2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6a3a      	ldr	r2, [r7, #32]
 8008d28:	60da      	str	r2, [r3, #12]
 8008d2a:	e0ce      	b.n	8008eca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d32:	e0ca      	b.n	8008eca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d3c:	d166      	bne.n	8008e0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d42:	2b08      	cmp	r3, #8
 8008d44:	d827      	bhi.n	8008d96 <UART_SetConfig+0x49a>
 8008d46:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <UART_SetConfig+0x450>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008d79 	.word	0x08008d79
 8008d54:	08008d81 	.word	0x08008d81
 8008d58:	08008d97 	.word	0x08008d97
 8008d5c:	08008d87 	.word	0x08008d87
 8008d60:	08008d97 	.word	0x08008d97
 8008d64:	08008d97 	.word	0x08008d97
 8008d68:	08008d97 	.word	0x08008d97
 8008d6c:	08008d8f 	.word	0x08008d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d70:	f7fc fdd4 	bl	800591c <HAL_RCC_GetPCLK1Freq>
 8008d74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d76:	e014      	b.n	8008da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d78:	f7fc fde6 	bl	8005948 <HAL_RCC_GetPCLK2Freq>
 8008d7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d7e:	e010      	b.n	8008da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d80:	4b4e      	ldr	r3, [pc, #312]	@ (8008ebc <UART_SetConfig+0x5c0>)
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d84:	e00d      	b.n	8008da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d86:	f7fc fd5b 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8008d8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d8c:	e009      	b.n	8008da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d94:	e005      	b.n	8008da2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8090 	beq.w	8008eca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dae:	4a44      	ldr	r2, [pc, #272]	@ (8008ec0 <UART_SetConfig+0x5c4>)
 8008db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db4:	461a      	mov	r2, r3
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dbc:	005a      	lsls	r2, r3, #1
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	441a      	add	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	2b0f      	cmp	r3, #15
 8008dd4:	d916      	bls.n	8008e04 <UART_SetConfig+0x508>
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ddc:	d212      	bcs.n	8008e04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f023 030f 	bic.w	r3, r3, #15
 8008de6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	085b      	lsrs	r3, r3, #1
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	8bfb      	ldrh	r3, [r7, #30]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	8bfa      	ldrh	r2, [r7, #30]
 8008e00:	60da      	str	r2, [r3, #12]
 8008e02:	e062      	b.n	8008eca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e0a:	e05e      	b.n	8008eca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d828      	bhi.n	8008e66 <UART_SetConfig+0x56a>
 8008e14:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <UART_SetConfig+0x520>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e49 	.word	0x08008e49
 8008e24:	08008e51 	.word	0x08008e51
 8008e28:	08008e67 	.word	0x08008e67
 8008e2c:	08008e57 	.word	0x08008e57
 8008e30:	08008e67 	.word	0x08008e67
 8008e34:	08008e67 	.word	0x08008e67
 8008e38:	08008e67 	.word	0x08008e67
 8008e3c:	08008e5f 	.word	0x08008e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e40:	f7fc fd6c 	bl	800591c <HAL_RCC_GetPCLK1Freq>
 8008e44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e46:	e014      	b.n	8008e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e48:	f7fc fd7e 	bl	8005948 <HAL_RCC_GetPCLK2Freq>
 8008e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e4e:	e010      	b.n	8008e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e50:	4b1a      	ldr	r3, [pc, #104]	@ (8008ebc <UART_SetConfig+0x5c0>)
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e54:	e00d      	b.n	8008e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e56:	f7fc fcf3 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8008e5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e5c:	e009      	b.n	8008e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e64:	e005      	b.n	8008e72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e70:	bf00      	nop
    }

    if (pclk != 0U)
 8008e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d028      	beq.n	8008eca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	4a10      	ldr	r2, [pc, #64]	@ (8008ec0 <UART_SetConfig+0x5c4>)
 8008e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e82:	461a      	mov	r2, r3
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	085b      	lsrs	r3, r3, #1
 8008e90:	441a      	add	r2, r3
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	d910      	bls.n	8008ec4 <UART_SetConfig+0x5c8>
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea8:	d20c      	bcs.n	8008ec4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60da      	str	r2, [r3, #12]
 8008eb4:	e009      	b.n	8008eca <UART_SetConfig+0x5ce>
 8008eb6:	bf00      	nop
 8008eb8:	40008000 	.word	0x40008000
 8008ebc:	00f42400 	.word	0x00f42400
 8008ec0:	0800eabc 	.word	0x0800eabc
      }
      else
      {
        ret = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2200      	movs	r2, #0
 8008ede:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008ee6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3730      	adds	r7, #48	@ 0x30
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f88:	f003 0310 	and.w	r3, r3, #16
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d01a      	beq.n	800900a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ff2:	d10a      	bne.n	800900a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	430a      	orrs	r2, r1
 800902a:	605a      	str	r2, [r3, #4]
  }
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af02      	add	r7, sp, #8
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009048:	f7f9 fb6c 	bl	8002724 <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0308 	and.w	r3, r3, #8
 8009058:	2b08      	cmp	r3, #8
 800905a:	d10e      	bne.n	800907a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800905c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f82f 	bl	80090ce <UART_WaitOnFlagUntilTimeout>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e025      	b.n	80090c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b04      	cmp	r3, #4
 8009086:	d10e      	bne.n	80090a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f819 	bl	80090ce <UART_WaitOnFlagUntilTimeout>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e00f      	b.n	80090c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2220      	movs	r2, #32
 80090aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b09c      	sub	sp, #112	@ 0x70
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	603b      	str	r3, [r7, #0]
 80090da:	4613      	mov	r3, r2
 80090dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090de:	e0a9      	b.n	8009234 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	f000 80a5 	beq.w	8009234 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ea:	f7f9 fb1b 	bl	8002724 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d302      	bcc.n	8009100 <UART_WaitOnFlagUntilTimeout+0x32>
 80090fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d140      	bne.n	8009182 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800910e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009110:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009114:	667b      	str	r3, [r7, #100]	@ 0x64
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800911e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009120:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009124:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800912c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e6      	bne.n	8009100 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009144:	f023 0301 	bic.w	r3, r3, #1
 8009148:	663b      	str	r3, [r7, #96]	@ 0x60
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009152:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009154:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e069      	b.n	8009256 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	d051      	beq.n	8009234 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800919a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800919e:	d149      	bne.n	8009234 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ba:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80091be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ca:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80091d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e6      	bne.n	80091aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	613b      	str	r3, [r7, #16]
   return(result);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f023 0301 	bic.w	r3, r3, #1
 80091f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3308      	adds	r3, #8
 80091fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091fc:	623a      	str	r2, [r7, #32]
 80091fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	69f9      	ldr	r1, [r7, #28]
 8009202:	6a3a      	ldr	r2, [r7, #32]
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	61bb      	str	r3, [r7, #24]
   return(result);
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e5      	bne.n	80091dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2220      	movs	r2, #32
 8009214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2220      	movs	r2, #32
 800921c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2220      	movs	r2, #32
 8009224:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e010      	b.n	8009256 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69da      	ldr	r2, [r3, #28]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	4013      	ands	r3, r2
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	429a      	cmp	r2, r3
 8009242:	bf0c      	ite	eq
 8009244:	2301      	moveq	r3, #1
 8009246:	2300      	movne	r3, #0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	429a      	cmp	r2, r3
 8009250:	f43f af46 	beq.w	80090e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3770      	adds	r7, #112	@ 0x70
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009260:	b480      	push	{r7}
 8009262:	b0a3      	sub	sp, #140	@ 0x8c
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	4613      	mov	r3, r2
 800926c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009292:	d10e      	bne.n	80092b2 <UART_Start_Receive_IT+0x52>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d105      	bne.n	80092a8 <UART_Start_Receive_IT+0x48>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80092a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092a6:	e02d      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	22ff      	movs	r2, #255	@ 0xff
 80092ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092b0:	e028      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10d      	bne.n	80092d6 <UART_Start_Receive_IT+0x76>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d104      	bne.n	80092cc <UART_Start_Receive_IT+0x6c>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	22ff      	movs	r2, #255	@ 0xff
 80092c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092ca:	e01b      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	227f      	movs	r2, #127	@ 0x7f
 80092d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092d4:	e016      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092de:	d10d      	bne.n	80092fc <UART_Start_Receive_IT+0x9c>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d104      	bne.n	80092f2 <UART_Start_Receive_IT+0x92>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	227f      	movs	r2, #127	@ 0x7f
 80092ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092f0:	e008      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	223f      	movs	r2, #63	@ 0x3f
 80092f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092fa:	e003      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2222      	movs	r2, #34	@ 0x22
 8009310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009326:	f043 0301 	orr.w	r3, r3, #1
 800932a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009338:	673a      	str	r2, [r7, #112]	@ 0x70
 800933a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800933e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e3      	bne.n	8009314 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009354:	d153      	bne.n	80093fe <UART_Start_Receive_IT+0x19e>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800935c:	88fa      	ldrh	r2, [r7, #6]
 800935e:	429a      	cmp	r2, r3
 8009360:	d34d      	bcc.n	80093fe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800936a:	d107      	bne.n	800937c <UART_Start_Receive_IT+0x11c>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4a4b      	ldr	r2, [pc, #300]	@ (80094a4 <UART_Start_Receive_IT+0x244>)
 8009378:	671a      	str	r2, [r3, #112]	@ 0x70
 800937a:	e002      	b.n	8009382 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a4a      	ldr	r2, [pc, #296]	@ (80094a8 <UART_Start_Receive_IT+0x248>)
 8009380:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d01a      	beq.n	80093c8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80093a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093b6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80093ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80093c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e4      	bne.n	8009392 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80093e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80093ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80093f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e5      	bne.n	80093c8 <UART_Start_Receive_IT+0x168>
 80093fc:	e04a      	b.n	8009494 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009406:	d107      	bne.n	8009418 <UART_Start_Receive_IT+0x1b8>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a26      	ldr	r2, [pc, #152]	@ (80094ac <UART_Start_Receive_IT+0x24c>)
 8009414:	671a      	str	r2, [r3, #112]	@ 0x70
 8009416:	e002      	b.n	800941e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4a25      	ldr	r2, [pc, #148]	@ (80094b0 <UART_Start_Receive_IT+0x250>)
 800941c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d019      	beq.n	8009462 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009442:	677b      	str	r3, [r7, #116]	@ 0x74
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
 800944e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800945a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e6      	bne.n	800942e <UART_Start_Receive_IT+0x1ce>
 8009460:	e018      	b.n	8009494 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	613b      	str	r3, [r7, #16]
   return(result);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f043 0320 	orr.w	r3, r3, #32
 8009476:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009480:	623b      	str	r3, [r7, #32]
 8009482:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	69f9      	ldr	r1, [r7, #28]
 8009486:	6a3a      	ldr	r2, [r7, #32]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	61bb      	str	r3, [r7, #24]
   return(result);
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e6      	bne.n	8009462 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	378c      	adds	r7, #140	@ 0x8c
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	08009bbd 	.word	0x08009bbd
 80094a8:	080098c5 	.word	0x080098c5
 80094ac:	08009763 	.word	0x08009763
 80094b0:	08009603 	.word	0x08009603

080094b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b095      	sub	sp, #84	@ 0x54
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094da:	643b      	str	r3, [r7, #64]	@ 0x40
 80094dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e6      	bne.n	80094bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009504:	f023 0301 	bic.w	r3, r3, #1
 8009508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009514:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800951a:	e841 2300 	strex	r3, r2, [r1]
 800951e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e3      	bne.n	80094ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800952a:	2b01      	cmp	r3, #1
 800952c:	d118      	bne.n	8009560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	60bb      	str	r3, [r7, #8]
   return(result);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f023 0310 	bic.w	r3, r3, #16
 8009542:	647b      	str	r3, [r7, #68]	@ 0x44
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800954c:	61bb      	str	r3, [r7, #24]
 800954e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6979      	ldr	r1, [r7, #20]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	613b      	str	r3, [r7, #16]
   return(result);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009574:	bf00      	nop
 8009576:	3754      	adds	r7, #84	@ 0x54
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff f996 	bl	80088d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a4:	bf00      	nop
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095c8:	61fb      	str	r3, [r7, #28]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	61bb      	str	r3, [r7, #24]
 80095d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6979      	ldr	r1, [r7, #20]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	613b      	str	r3, [r7, #16]
   return(result);
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e6      	bne.n	80095b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2220      	movs	r2, #32
 80095ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff f961 	bl	80088bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fa:	bf00      	nop
 80095fc:	3720      	adds	r7, #32
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b096      	sub	sp, #88	@ 0x58
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009610:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961a:	2b22      	cmp	r3, #34	@ 0x22
 800961c:	f040 8095 	bne.w	800974a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009626:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800962a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800962e:	b2d9      	uxtb	r1, r3
 8009630:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009634:	b2da      	uxtb	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800963a:	400a      	ands	r2, r1
 800963c:	b2d2      	uxtb	r2, r2
 800963e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009650:	b29b      	uxth	r3, r3
 8009652:	3b01      	subs	r3, #1
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009662:	b29b      	uxth	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d178      	bne.n	800975a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800967c:	653b      	str	r3, [r7, #80]	@ 0x50
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009686:	647b      	str	r3, [r7, #68]	@ 0x44
 8009688:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800968c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e6      	bne.n	8009668 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	623b      	str	r3, [r7, #32]
   return(result);
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	f023 0301 	bic.w	r3, r3, #1
 80096b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80096bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e5      	bne.n	800969a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d12e      	bne.n	8009742 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 0310 	bic.w	r3, r3, #16
 80096fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	69b9      	ldr	r1, [r7, #24]
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	617b      	str	r3, [r7, #20]
   return(result);
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e6      	bne.n	80096ea <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	f003 0310 	and.w	r3, r3, #16
 8009726:	2b10      	cmp	r3, #16
 8009728:	d103      	bne.n	8009732 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2210      	movs	r2, #16
 8009730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff f8d2 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009740:	e00b      	b.n	800975a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7f8 ff84 	bl	8002650 <HAL_UART_RxCpltCallback>
}
 8009748:	e007      	b.n	800975a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0208 	orr.w	r2, r2, #8
 8009758:	619a      	str	r2, [r3, #24]
}
 800975a:	bf00      	nop
 800975c:	3758      	adds	r7, #88	@ 0x58
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b096      	sub	sp, #88	@ 0x58
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009770:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977a:	2b22      	cmp	r3, #34	@ 0x22
 800977c:	f040 8095 	bne.w	80098aa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800978e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009790:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009794:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009798:	4013      	ands	r3, r2
 800979a:	b29a      	uxth	r2, r3
 800979c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800979e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a4:	1c9a      	adds	r2, r3, #2
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d178      	bne.n	80098ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80097e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e6      	bne.n	80097c8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3308      	adds	r3, #8
 8009800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	61fb      	str	r3, [r7, #28]
   return(result);
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	f023 0301 	bic.w	r3, r3, #1
 8009810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800981a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800981c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e5      	bne.n	80097fa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2220      	movs	r2, #32
 8009832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009840:	2b01      	cmp	r3, #1
 8009842:	d12e      	bne.n	80098a2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	60bb      	str	r3, [r7, #8]
   return(result);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f023 0310 	bic.w	r3, r3, #16
 800985e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009868:	61bb      	str	r3, [r7, #24]
 800986a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986c:	6979      	ldr	r1, [r7, #20]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	e841 2300 	strex	r3, r2, [r1]
 8009874:	613b      	str	r3, [r7, #16]
   return(result);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e6      	bne.n	800984a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	2b10      	cmp	r3, #16
 8009888:	d103      	bne.n	8009892 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2210      	movs	r2, #16
 8009890:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff f822 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098a0:	e00b      	b.n	80098ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7f8 fed4 	bl	8002650 <HAL_UART_RxCpltCallback>
}
 80098a8:	e007      	b.n	80098ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	699a      	ldr	r2, [r3, #24]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f042 0208 	orr.w	r2, r2, #8
 80098b8:	619a      	str	r2, [r3, #24]
}
 80098ba:	bf00      	nop
 80098bc:	3758      	adds	r7, #88	@ 0x58
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b0a6      	sub	sp, #152	@ 0x98
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098d2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098fa:	2b22      	cmp	r3, #34	@ 0x22
 80098fc:	f040 814f 	bne.w	8009b9e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009906:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800990a:	e0f6      	b.n	8009afa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009912:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009916:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800991a:	b2d9      	uxtb	r1, r3
 800991c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009920:	b2da      	uxtb	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009926:	400a      	ands	r2, r1
 8009928:	b2d2      	uxtb	r2, r2
 800992a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800993c:	b29b      	uxth	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009952:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b00      	cmp	r3, #0
 800995c:	d053      	beq.n	8009a06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800995e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d011      	beq.n	800998e <UART_RxISR_8BIT_FIFOEN+0xca>
 800996a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800996e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00b      	beq.n	800998e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2201      	movs	r2, #1
 800997c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009984:	f043 0201 	orr.w	r2, r3, #1
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800998e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d011      	beq.n	80099be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800999a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2202      	movs	r2, #2
 80099ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b4:	f043 0204 	orr.w	r2, r3, #4
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d011      	beq.n	80099ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80099ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00b      	beq.n	80099ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2204      	movs	r2, #4
 80099dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099e4:	f043 0202 	orr.w	r2, r3, #2
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d006      	beq.n	8009a06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7fe ff69 	bl	80088d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d173      	bne.n	8009afa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a36:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009a3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e4      	bne.n	8009a12 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3308      	adds	r3, #8
 8009a6a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a6c:	657a      	str	r2, [r7, #84]	@ 0x54
 8009a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a74:	e841 2300 	strex	r3, r2, [r1]
 8009a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e3      	bne.n	8009a48 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2220      	movs	r2, #32
 8009a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d12e      	bne.n	8009af4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	f023 0310 	bic.w	r3, r3, #16
 8009ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8009abc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e6      	bne.n	8009a9c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b10      	cmp	r3, #16
 8009ada:	d103      	bne.n	8009ae4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2210      	movs	r2, #16
 8009ae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7fe fef9 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
 8009af2:	e002      	b.n	8009afa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7f8 fdab 	bl	8002650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009afa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d006      	beq.n	8009b10 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f47f aefe 	bne.w	800990c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b1a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d045      	beq.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d23e      	bcs.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3308      	adds	r3, #8
 8009b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b46:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e5      	bne.n	8009b30 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a14      	ldr	r2, [pc, #80]	@ (8009bb8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009b68:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	e853 3f00 	ldrex	r3, [r3]
 8009b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f043 0320 	orr.w	r3, r3, #32
 8009b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b88:	61bb      	str	r3, [r7, #24]
 8009b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	6979      	ldr	r1, [r7, #20]
 8009b8e:	69ba      	ldr	r2, [r7, #24]
 8009b90:	e841 2300 	strex	r3, r2, [r1]
 8009b94:	613b      	str	r3, [r7, #16]
   return(result);
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e6      	bne.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b9c:	e007      	b.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	699a      	ldr	r2, [r3, #24]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f042 0208 	orr.w	r2, r2, #8
 8009bac:	619a      	str	r2, [r3, #24]
}
 8009bae:	bf00      	nop
 8009bb0:	3798      	adds	r7, #152	@ 0x98
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	08009603 	.word	0x08009603

08009bbc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b0a8      	sub	sp, #160	@ 0xa0
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009bca:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bf2:	2b22      	cmp	r3, #34	@ 0x22
 8009bf4:	f040 8153 	bne.w	8009e9e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009bfe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c02:	e0fa      	b.n	8009dfa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c16:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009c1a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009c1e:	4013      	ands	r3, r2
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c2c:	1c9a      	adds	r2, r3, #2
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d053      	beq.n	8009d02 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d011      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2201      	movs	r2, #1
 8009c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c80:	f043 0201 	orr.w	r2, r3, #1
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d011      	beq.n	8009cba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00b      	beq.n	8009cba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cb0:	f043 0204 	orr.w	r2, r3, #4
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d011      	beq.n	8009cea <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2204      	movs	r2, #4
 8009cd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ce0:	f043 0202 	orr.w	r2, r3, #2
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fe fdeb 	bl	80088d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d175      	bne.n	8009dfa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d32:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d36:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e4      	bne.n	8009d0e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3308      	adds	r3, #8
 8009d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d5a:	f023 0301 	bic.w	r3, r3, #1
 8009d5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3308      	adds	r3, #8
 8009d68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009d6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e1      	bne.n	8009d44 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d12e      	bne.n	8009df4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dac:	f023 0310 	bic.w	r3, r3, #16
 8009db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dbc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e6      	bne.n	8009d9c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	f003 0310 	and.w	r3, r3, #16
 8009dd8:	2b10      	cmp	r3, #16
 8009dda:	d103      	bne.n	8009de4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2210      	movs	r2, #16
 8009de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7fe fd79 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
 8009df2:	e002      	b.n	8009dfa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7f8 fc2b 	bl	8002650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dfa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d006      	beq.n	8009e10 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f47f aefa 	bne.w	8009c04 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e16:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e1a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d045      	beq.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e28:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d23e      	bcs.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3308      	adds	r3, #8
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	623b      	str	r3, [r7, #32]
   return(result);
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e46:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009e50:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e5      	bne.n	8009e30 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a14      	ldr	r2, [pc, #80]	@ (8009eb8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009e68:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f043 0320 	orr.w	r3, r3, #32
 8009e7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e88:	61fb      	str	r3, [r7, #28]
 8009e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	69b9      	ldr	r1, [r7, #24]
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	e841 2300 	strex	r3, r2, [r1]
 8009e94:	617b      	str	r3, [r7, #20]
   return(result);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e6      	bne.n	8009e6a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e9c:	e007      	b.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	699a      	ldr	r2, [r3, #24]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0208 	orr.w	r2, r2, #8
 8009eac:	619a      	str	r2, [r3, #24]
}
 8009eae:	bf00      	nop
 8009eb0:	37a0      	adds	r7, #160	@ 0xa0
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	08009763 	.word	0x08009763

08009ebc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <HAL_UARTEx_DisableFifoMode+0x16>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e027      	b.n	8009f5e <HAL_UARTEx_DisableFifoMode+0x66>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2224      	movs	r2, #36	@ 0x24
 8009f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e02d      	b.n	8009fde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2224      	movs	r2, #36	@ 0x24
 8009f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f022 0201 	bic.w	r2, r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f850 	bl	800a064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e02d      	b.n	800a05a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2224      	movs	r2, #36	@ 0x24
 800a00a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f812 	bl	800a064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a070:	2b00      	cmp	r3, #0
 800a072:	d108      	bne.n	800a086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a084:	e031      	b.n	800a0ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a086:	2308      	movs	r3, #8
 800a088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a08a:	2308      	movs	r3, #8
 800a08c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	0e5b      	lsrs	r3, r3, #25
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	0f5b      	lsrs	r3, r3, #29
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f003 0307 	and.w	r3, r3, #7
 800a0ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	7b3a      	ldrb	r2, [r7, #12]
 800a0b2:	4911      	ldr	r1, [pc, #68]	@ (800a0f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a0b4:	5c8a      	ldrb	r2, [r1, r2]
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0ba:	7b3a      	ldrb	r2, [r7, #12]
 800a0bc:	490f      	ldr	r1, [pc, #60]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x98>)
 800a0be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	7b7a      	ldrb	r2, [r7, #13]
 800a0d0:	4909      	ldr	r1, [pc, #36]	@ (800a0f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a0d2:	5c8a      	ldrb	r2, [r1, r2]
 800a0d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0d8:	7b7a      	ldrb	r2, [r7, #13]
 800a0da:	4908      	ldr	r1, [pc, #32]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x98>)
 800a0dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	0800ead4 	.word	0x0800ead4
 800a0fc:	0800eadc 	.word	0x0800eadc

0800a100 <atoi>:
 800a100:	220a      	movs	r2, #10
 800a102:	2100      	movs	r1, #0
 800a104:	f000 b87c 	b.w	800a200 <strtol>

0800a108 <_strtol_l.constprop.0>:
 800a108:	2b24      	cmp	r3, #36	@ 0x24
 800a10a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a10e:	4686      	mov	lr, r0
 800a110:	4690      	mov	r8, r2
 800a112:	d801      	bhi.n	800a118 <_strtol_l.constprop.0+0x10>
 800a114:	2b01      	cmp	r3, #1
 800a116:	d106      	bne.n	800a126 <_strtol_l.constprop.0+0x1e>
 800a118:	f001 f902 	bl	800b320 <__errno>
 800a11c:	2316      	movs	r3, #22
 800a11e:	6003      	str	r3, [r0, #0]
 800a120:	2000      	movs	r0, #0
 800a122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a126:	4834      	ldr	r0, [pc, #208]	@ (800a1f8 <_strtol_l.constprop.0+0xf0>)
 800a128:	460d      	mov	r5, r1
 800a12a:	462a      	mov	r2, r5
 800a12c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a130:	5d06      	ldrb	r6, [r0, r4]
 800a132:	f016 0608 	ands.w	r6, r6, #8
 800a136:	d1f8      	bne.n	800a12a <_strtol_l.constprop.0+0x22>
 800a138:	2c2d      	cmp	r4, #45	@ 0x2d
 800a13a:	d12d      	bne.n	800a198 <_strtol_l.constprop.0+0x90>
 800a13c:	782c      	ldrb	r4, [r5, #0]
 800a13e:	2601      	movs	r6, #1
 800a140:	1c95      	adds	r5, r2, #2
 800a142:	f033 0210 	bics.w	r2, r3, #16
 800a146:	d109      	bne.n	800a15c <_strtol_l.constprop.0+0x54>
 800a148:	2c30      	cmp	r4, #48	@ 0x30
 800a14a:	d12a      	bne.n	800a1a2 <_strtol_l.constprop.0+0x9a>
 800a14c:	782a      	ldrb	r2, [r5, #0]
 800a14e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a152:	2a58      	cmp	r2, #88	@ 0x58
 800a154:	d125      	bne.n	800a1a2 <_strtol_l.constprop.0+0x9a>
 800a156:	786c      	ldrb	r4, [r5, #1]
 800a158:	2310      	movs	r3, #16
 800a15a:	3502      	adds	r5, #2
 800a15c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a160:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a164:	2200      	movs	r2, #0
 800a166:	fbbc f9f3 	udiv	r9, ip, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a170:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a174:	2f09      	cmp	r7, #9
 800a176:	d81b      	bhi.n	800a1b0 <_strtol_l.constprop.0+0xa8>
 800a178:	463c      	mov	r4, r7
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	dd27      	ble.n	800a1ce <_strtol_l.constprop.0+0xc6>
 800a17e:	1c57      	adds	r7, r2, #1
 800a180:	d007      	beq.n	800a192 <_strtol_l.constprop.0+0x8a>
 800a182:	4581      	cmp	r9, r0
 800a184:	d320      	bcc.n	800a1c8 <_strtol_l.constprop.0+0xc0>
 800a186:	d101      	bne.n	800a18c <_strtol_l.constprop.0+0x84>
 800a188:	45a2      	cmp	sl, r4
 800a18a:	db1d      	blt.n	800a1c8 <_strtol_l.constprop.0+0xc0>
 800a18c:	fb00 4003 	mla	r0, r0, r3, r4
 800a190:	2201      	movs	r2, #1
 800a192:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a196:	e7eb      	b.n	800a170 <_strtol_l.constprop.0+0x68>
 800a198:	2c2b      	cmp	r4, #43	@ 0x2b
 800a19a:	bf04      	itt	eq
 800a19c:	782c      	ldrbeq	r4, [r5, #0]
 800a19e:	1c95      	addeq	r5, r2, #2
 800a1a0:	e7cf      	b.n	800a142 <_strtol_l.constprop.0+0x3a>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1da      	bne.n	800a15c <_strtol_l.constprop.0+0x54>
 800a1a6:	2c30      	cmp	r4, #48	@ 0x30
 800a1a8:	bf0c      	ite	eq
 800a1aa:	2308      	moveq	r3, #8
 800a1ac:	230a      	movne	r3, #10
 800a1ae:	e7d5      	b.n	800a15c <_strtol_l.constprop.0+0x54>
 800a1b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a1b4:	2f19      	cmp	r7, #25
 800a1b6:	d801      	bhi.n	800a1bc <_strtol_l.constprop.0+0xb4>
 800a1b8:	3c37      	subs	r4, #55	@ 0x37
 800a1ba:	e7de      	b.n	800a17a <_strtol_l.constprop.0+0x72>
 800a1bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1c0:	2f19      	cmp	r7, #25
 800a1c2:	d804      	bhi.n	800a1ce <_strtol_l.constprop.0+0xc6>
 800a1c4:	3c57      	subs	r4, #87	@ 0x57
 800a1c6:	e7d8      	b.n	800a17a <_strtol_l.constprop.0+0x72>
 800a1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1cc:	e7e1      	b.n	800a192 <_strtol_l.constprop.0+0x8a>
 800a1ce:	1c53      	adds	r3, r2, #1
 800a1d0:	d108      	bne.n	800a1e4 <_strtol_l.constprop.0+0xdc>
 800a1d2:	2322      	movs	r3, #34	@ 0x22
 800a1d4:	f8ce 3000 	str.w	r3, [lr]
 800a1d8:	4660      	mov	r0, ip
 800a1da:	f1b8 0f00 	cmp.w	r8, #0
 800a1de:	d0a0      	beq.n	800a122 <_strtol_l.constprop.0+0x1a>
 800a1e0:	1e69      	subs	r1, r5, #1
 800a1e2:	e006      	b.n	800a1f2 <_strtol_l.constprop.0+0xea>
 800a1e4:	b106      	cbz	r6, 800a1e8 <_strtol_l.constprop.0+0xe0>
 800a1e6:	4240      	negs	r0, r0
 800a1e8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ec:	d099      	beq.n	800a122 <_strtol_l.constprop.0+0x1a>
 800a1ee:	2a00      	cmp	r2, #0
 800a1f0:	d1f6      	bne.n	800a1e0 <_strtol_l.constprop.0+0xd8>
 800a1f2:	f8c8 1000 	str.w	r1, [r8]
 800a1f6:	e794      	b.n	800a122 <_strtol_l.constprop.0+0x1a>
 800a1f8:	0800eae5 	.word	0x0800eae5

0800a1fc <_strtol_r>:
 800a1fc:	f7ff bf84 	b.w	800a108 <_strtol_l.constprop.0>

0800a200 <strtol>:
 800a200:	4613      	mov	r3, r2
 800a202:	460a      	mov	r2, r1
 800a204:	4601      	mov	r1, r0
 800a206:	4802      	ldr	r0, [pc, #8]	@ (800a210 <strtol+0x10>)
 800a208:	6800      	ldr	r0, [r0, #0]
 800a20a:	f7ff bf7d 	b.w	800a108 <_strtol_l.constprop.0>
 800a20e:	bf00      	nop
 800a210:	200000d4 	.word	0x200000d4

0800a214 <__cvt>:
 800a214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a218:	ec57 6b10 	vmov	r6, r7, d0
 800a21c:	2f00      	cmp	r7, #0
 800a21e:	460c      	mov	r4, r1
 800a220:	4619      	mov	r1, r3
 800a222:	463b      	mov	r3, r7
 800a224:	bfbb      	ittet	lt
 800a226:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a22a:	461f      	movlt	r7, r3
 800a22c:	2300      	movge	r3, #0
 800a22e:	232d      	movlt	r3, #45	@ 0x2d
 800a230:	700b      	strb	r3, [r1, #0]
 800a232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a234:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a238:	4691      	mov	r9, r2
 800a23a:	f023 0820 	bic.w	r8, r3, #32
 800a23e:	bfbc      	itt	lt
 800a240:	4632      	movlt	r2, r6
 800a242:	4616      	movlt	r6, r2
 800a244:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a248:	d005      	beq.n	800a256 <__cvt+0x42>
 800a24a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a24e:	d100      	bne.n	800a252 <__cvt+0x3e>
 800a250:	3401      	adds	r4, #1
 800a252:	2102      	movs	r1, #2
 800a254:	e000      	b.n	800a258 <__cvt+0x44>
 800a256:	2103      	movs	r1, #3
 800a258:	ab03      	add	r3, sp, #12
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	ab02      	add	r3, sp, #8
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	ec47 6b10 	vmov	d0, r6, r7
 800a264:	4653      	mov	r3, sl
 800a266:	4622      	mov	r2, r4
 800a268:	f001 f936 	bl	800b4d8 <_dtoa_r>
 800a26c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a270:	4605      	mov	r5, r0
 800a272:	d119      	bne.n	800a2a8 <__cvt+0x94>
 800a274:	f019 0f01 	tst.w	r9, #1
 800a278:	d00e      	beq.n	800a298 <__cvt+0x84>
 800a27a:	eb00 0904 	add.w	r9, r0, r4
 800a27e:	2200      	movs	r2, #0
 800a280:	2300      	movs	r3, #0
 800a282:	4630      	mov	r0, r6
 800a284:	4639      	mov	r1, r7
 800a286:	f7f6 fc57 	bl	8000b38 <__aeabi_dcmpeq>
 800a28a:	b108      	cbz	r0, 800a290 <__cvt+0x7c>
 800a28c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a290:	2230      	movs	r2, #48	@ 0x30
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	454b      	cmp	r3, r9
 800a296:	d31e      	bcc.n	800a2d6 <__cvt+0xc2>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a29c:	1b5b      	subs	r3, r3, r5
 800a29e:	4628      	mov	r0, r5
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	b004      	add	sp, #16
 800a2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2ac:	eb00 0904 	add.w	r9, r0, r4
 800a2b0:	d1e5      	bne.n	800a27e <__cvt+0x6a>
 800a2b2:	7803      	ldrb	r3, [r0, #0]
 800a2b4:	2b30      	cmp	r3, #48	@ 0x30
 800a2b6:	d10a      	bne.n	800a2ce <__cvt+0xba>
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4630      	mov	r0, r6
 800a2be:	4639      	mov	r1, r7
 800a2c0:	f7f6 fc3a 	bl	8000b38 <__aeabi_dcmpeq>
 800a2c4:	b918      	cbnz	r0, 800a2ce <__cvt+0xba>
 800a2c6:	f1c4 0401 	rsb	r4, r4, #1
 800a2ca:	f8ca 4000 	str.w	r4, [sl]
 800a2ce:	f8da 3000 	ldr.w	r3, [sl]
 800a2d2:	4499      	add	r9, r3
 800a2d4:	e7d3      	b.n	800a27e <__cvt+0x6a>
 800a2d6:	1c59      	adds	r1, r3, #1
 800a2d8:	9103      	str	r1, [sp, #12]
 800a2da:	701a      	strb	r2, [r3, #0]
 800a2dc:	e7d9      	b.n	800a292 <__cvt+0x7e>

0800a2de <__exponent>:
 800a2de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e0:	2900      	cmp	r1, #0
 800a2e2:	bfba      	itte	lt
 800a2e4:	4249      	neglt	r1, r1
 800a2e6:	232d      	movlt	r3, #45	@ 0x2d
 800a2e8:	232b      	movge	r3, #43	@ 0x2b
 800a2ea:	2909      	cmp	r1, #9
 800a2ec:	7002      	strb	r2, [r0, #0]
 800a2ee:	7043      	strb	r3, [r0, #1]
 800a2f0:	dd29      	ble.n	800a346 <__exponent+0x68>
 800a2f2:	f10d 0307 	add.w	r3, sp, #7
 800a2f6:	461d      	mov	r5, r3
 800a2f8:	270a      	movs	r7, #10
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	fbb1 f6f7 	udiv	r6, r1, r7
 800a300:	fb07 1416 	mls	r4, r7, r6, r1
 800a304:	3430      	adds	r4, #48	@ 0x30
 800a306:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a30a:	460c      	mov	r4, r1
 800a30c:	2c63      	cmp	r4, #99	@ 0x63
 800a30e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a312:	4631      	mov	r1, r6
 800a314:	dcf1      	bgt.n	800a2fa <__exponent+0x1c>
 800a316:	3130      	adds	r1, #48	@ 0x30
 800a318:	1e94      	subs	r4, r2, #2
 800a31a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a31e:	1c41      	adds	r1, r0, #1
 800a320:	4623      	mov	r3, r4
 800a322:	42ab      	cmp	r3, r5
 800a324:	d30a      	bcc.n	800a33c <__exponent+0x5e>
 800a326:	f10d 0309 	add.w	r3, sp, #9
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	42ac      	cmp	r4, r5
 800a32e:	bf88      	it	hi
 800a330:	2300      	movhi	r3, #0
 800a332:	3302      	adds	r3, #2
 800a334:	4403      	add	r3, r0
 800a336:	1a18      	subs	r0, r3, r0
 800a338:	b003      	add	sp, #12
 800a33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a33c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a340:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a344:	e7ed      	b.n	800a322 <__exponent+0x44>
 800a346:	2330      	movs	r3, #48	@ 0x30
 800a348:	3130      	adds	r1, #48	@ 0x30
 800a34a:	7083      	strb	r3, [r0, #2]
 800a34c:	70c1      	strb	r1, [r0, #3]
 800a34e:	1d03      	adds	r3, r0, #4
 800a350:	e7f1      	b.n	800a336 <__exponent+0x58>
	...

0800a354 <_printf_float>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	b08d      	sub	sp, #52	@ 0x34
 800a35a:	460c      	mov	r4, r1
 800a35c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a360:	4616      	mov	r6, r2
 800a362:	461f      	mov	r7, r3
 800a364:	4605      	mov	r5, r0
 800a366:	f000 ff91 	bl	800b28c <_localeconv_r>
 800a36a:	6803      	ldr	r3, [r0, #0]
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7f5 ffb6 	bl	80002e0 <strlen>
 800a374:	2300      	movs	r3, #0
 800a376:	930a      	str	r3, [sp, #40]	@ 0x28
 800a378:	f8d8 3000 	ldr.w	r3, [r8]
 800a37c:	9005      	str	r0, [sp, #20]
 800a37e:	3307      	adds	r3, #7
 800a380:	f023 0307 	bic.w	r3, r3, #7
 800a384:	f103 0208 	add.w	r2, r3, #8
 800a388:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a38c:	f8d4 b000 	ldr.w	fp, [r4]
 800a390:	f8c8 2000 	str.w	r2, [r8]
 800a394:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a398:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a3a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3aa:	4b9c      	ldr	r3, [pc, #624]	@ (800a61c <_printf_float+0x2c8>)
 800a3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b0:	f7f6 fbf4 	bl	8000b9c <__aeabi_dcmpun>
 800a3b4:	bb70      	cbnz	r0, 800a414 <_printf_float+0xc0>
 800a3b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3ba:	4b98      	ldr	r3, [pc, #608]	@ (800a61c <_printf_float+0x2c8>)
 800a3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c0:	f7f6 fbce 	bl	8000b60 <__aeabi_dcmple>
 800a3c4:	bb30      	cbnz	r0, 800a414 <_printf_float+0xc0>
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	4649      	mov	r1, r9
 800a3ce:	f7f6 fbbd 	bl	8000b4c <__aeabi_dcmplt>
 800a3d2:	b110      	cbz	r0, 800a3da <_printf_float+0x86>
 800a3d4:	232d      	movs	r3, #45	@ 0x2d
 800a3d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3da:	4a91      	ldr	r2, [pc, #580]	@ (800a620 <_printf_float+0x2cc>)
 800a3dc:	4b91      	ldr	r3, [pc, #580]	@ (800a624 <_printf_float+0x2d0>)
 800a3de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a3e2:	bf94      	ite	ls
 800a3e4:	4690      	movls	r8, r2
 800a3e6:	4698      	movhi	r8, r3
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	6123      	str	r3, [r4, #16]
 800a3ec:	f02b 0304 	bic.w	r3, fp, #4
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	f04f 0900 	mov.w	r9, #0
 800a3f6:	9700      	str	r7, [sp, #0]
 800a3f8:	4633      	mov	r3, r6
 800a3fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 f9d2 	bl	800a7a8 <_printf_common>
 800a404:	3001      	adds	r0, #1
 800a406:	f040 808d 	bne.w	800a524 <_printf_float+0x1d0>
 800a40a:	f04f 30ff 	mov.w	r0, #4294967295
 800a40e:	b00d      	add	sp, #52	@ 0x34
 800a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a414:	4642      	mov	r2, r8
 800a416:	464b      	mov	r3, r9
 800a418:	4640      	mov	r0, r8
 800a41a:	4649      	mov	r1, r9
 800a41c:	f7f6 fbbe 	bl	8000b9c <__aeabi_dcmpun>
 800a420:	b140      	cbz	r0, 800a434 <_printf_float+0xe0>
 800a422:	464b      	mov	r3, r9
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfbc      	itt	lt
 800a428:	232d      	movlt	r3, #45	@ 0x2d
 800a42a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a42e:	4a7e      	ldr	r2, [pc, #504]	@ (800a628 <_printf_float+0x2d4>)
 800a430:	4b7e      	ldr	r3, [pc, #504]	@ (800a62c <_printf_float+0x2d8>)
 800a432:	e7d4      	b.n	800a3de <_printf_float+0x8a>
 800a434:	6863      	ldr	r3, [r4, #4]
 800a436:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a43a:	9206      	str	r2, [sp, #24]
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	d13b      	bne.n	800a4b8 <_printf_float+0x164>
 800a440:	2306      	movs	r3, #6
 800a442:	6063      	str	r3, [r4, #4]
 800a444:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a448:	2300      	movs	r3, #0
 800a44a:	6022      	str	r2, [r4, #0]
 800a44c:	9303      	str	r3, [sp, #12]
 800a44e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a450:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a454:	ab09      	add	r3, sp, #36	@ 0x24
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	6861      	ldr	r1, [r4, #4]
 800a45a:	ec49 8b10 	vmov	d0, r8, r9
 800a45e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a462:	4628      	mov	r0, r5
 800a464:	f7ff fed6 	bl	800a214 <__cvt>
 800a468:	9b06      	ldr	r3, [sp, #24]
 800a46a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a46c:	2b47      	cmp	r3, #71	@ 0x47
 800a46e:	4680      	mov	r8, r0
 800a470:	d129      	bne.n	800a4c6 <_printf_float+0x172>
 800a472:	1cc8      	adds	r0, r1, #3
 800a474:	db02      	blt.n	800a47c <_printf_float+0x128>
 800a476:	6863      	ldr	r3, [r4, #4]
 800a478:	4299      	cmp	r1, r3
 800a47a:	dd41      	ble.n	800a500 <_printf_float+0x1ac>
 800a47c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a480:	fa5f fa8a 	uxtb.w	sl, sl
 800a484:	3901      	subs	r1, #1
 800a486:	4652      	mov	r2, sl
 800a488:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a48c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a48e:	f7ff ff26 	bl	800a2de <__exponent>
 800a492:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a494:	1813      	adds	r3, r2, r0
 800a496:	2a01      	cmp	r2, #1
 800a498:	4681      	mov	r9, r0
 800a49a:	6123      	str	r3, [r4, #16]
 800a49c:	dc02      	bgt.n	800a4a4 <_printf_float+0x150>
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	07d2      	lsls	r2, r2, #31
 800a4a2:	d501      	bpl.n	800a4a8 <_printf_float+0x154>
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	6123      	str	r3, [r4, #16]
 800a4a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0a2      	beq.n	800a3f6 <_printf_float+0xa2>
 800a4b0:	232d      	movs	r3, #45	@ 0x2d
 800a4b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4b6:	e79e      	b.n	800a3f6 <_printf_float+0xa2>
 800a4b8:	9a06      	ldr	r2, [sp, #24]
 800a4ba:	2a47      	cmp	r2, #71	@ 0x47
 800a4bc:	d1c2      	bne.n	800a444 <_printf_float+0xf0>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1c0      	bne.n	800a444 <_printf_float+0xf0>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e7bd      	b.n	800a442 <_printf_float+0xee>
 800a4c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4ca:	d9db      	bls.n	800a484 <_printf_float+0x130>
 800a4cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a4d0:	d118      	bne.n	800a504 <_printf_float+0x1b0>
 800a4d2:	2900      	cmp	r1, #0
 800a4d4:	6863      	ldr	r3, [r4, #4]
 800a4d6:	dd0b      	ble.n	800a4f0 <_printf_float+0x19c>
 800a4d8:	6121      	str	r1, [r4, #16]
 800a4da:	b913      	cbnz	r3, 800a4e2 <_printf_float+0x18e>
 800a4dc:	6822      	ldr	r2, [r4, #0]
 800a4de:	07d0      	lsls	r0, r2, #31
 800a4e0:	d502      	bpl.n	800a4e8 <_printf_float+0x194>
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	440b      	add	r3, r1
 800a4e6:	6123      	str	r3, [r4, #16]
 800a4e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a4ea:	f04f 0900 	mov.w	r9, #0
 800a4ee:	e7db      	b.n	800a4a8 <_printf_float+0x154>
 800a4f0:	b913      	cbnz	r3, 800a4f8 <_printf_float+0x1a4>
 800a4f2:	6822      	ldr	r2, [r4, #0]
 800a4f4:	07d2      	lsls	r2, r2, #31
 800a4f6:	d501      	bpl.n	800a4fc <_printf_float+0x1a8>
 800a4f8:	3302      	adds	r3, #2
 800a4fa:	e7f4      	b.n	800a4e6 <_printf_float+0x192>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e7f2      	b.n	800a4e6 <_printf_float+0x192>
 800a500:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a506:	4299      	cmp	r1, r3
 800a508:	db05      	blt.n	800a516 <_printf_float+0x1c2>
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	6121      	str	r1, [r4, #16]
 800a50e:	07d8      	lsls	r0, r3, #31
 800a510:	d5ea      	bpl.n	800a4e8 <_printf_float+0x194>
 800a512:	1c4b      	adds	r3, r1, #1
 800a514:	e7e7      	b.n	800a4e6 <_printf_float+0x192>
 800a516:	2900      	cmp	r1, #0
 800a518:	bfd4      	ite	le
 800a51a:	f1c1 0202 	rsble	r2, r1, #2
 800a51e:	2201      	movgt	r2, #1
 800a520:	4413      	add	r3, r2
 800a522:	e7e0      	b.n	800a4e6 <_printf_float+0x192>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	055a      	lsls	r2, r3, #21
 800a528:	d407      	bmi.n	800a53a <_printf_float+0x1e6>
 800a52a:	6923      	ldr	r3, [r4, #16]
 800a52c:	4642      	mov	r2, r8
 800a52e:	4631      	mov	r1, r6
 800a530:	4628      	mov	r0, r5
 800a532:	47b8      	blx	r7
 800a534:	3001      	adds	r0, #1
 800a536:	d12b      	bne.n	800a590 <_printf_float+0x23c>
 800a538:	e767      	b.n	800a40a <_printf_float+0xb6>
 800a53a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a53e:	f240 80dd 	bls.w	800a6fc <_printf_float+0x3a8>
 800a542:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	f7f6 faf5 	bl	8000b38 <__aeabi_dcmpeq>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d033      	beq.n	800a5ba <_printf_float+0x266>
 800a552:	4a37      	ldr	r2, [pc, #220]	@ (800a630 <_printf_float+0x2dc>)
 800a554:	2301      	movs	r3, #1
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	f43f af54 	beq.w	800a40a <_printf_float+0xb6>
 800a562:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a566:	4543      	cmp	r3, r8
 800a568:	db02      	blt.n	800a570 <_printf_float+0x21c>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	07d8      	lsls	r0, r3, #31
 800a56e:	d50f      	bpl.n	800a590 <_printf_float+0x23c>
 800a570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af45 	beq.w	800a40a <_printf_float+0xb6>
 800a580:	f04f 0900 	mov.w	r9, #0
 800a584:	f108 38ff 	add.w	r8, r8, #4294967295
 800a588:	f104 0a1a 	add.w	sl, r4, #26
 800a58c:	45c8      	cmp	r8, r9
 800a58e:	dc09      	bgt.n	800a5a4 <_printf_float+0x250>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	079b      	lsls	r3, r3, #30
 800a594:	f100 8103 	bmi.w	800a79e <_printf_float+0x44a>
 800a598:	68e0      	ldr	r0, [r4, #12]
 800a59a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a59c:	4298      	cmp	r0, r3
 800a59e:	bfb8      	it	lt
 800a5a0:	4618      	movlt	r0, r3
 800a5a2:	e734      	b.n	800a40e <_printf_float+0xba>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4652      	mov	r2, sl
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	47b8      	blx	r7
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	f43f af2b 	beq.w	800a40a <_printf_float+0xb6>
 800a5b4:	f109 0901 	add.w	r9, r9, #1
 800a5b8:	e7e8      	b.n	800a58c <_printf_float+0x238>
 800a5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	dc39      	bgt.n	800a634 <_printf_float+0x2e0>
 800a5c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a630 <_printf_float+0x2dc>)
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	47b8      	blx	r7
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	f43f af1d 	beq.w	800a40a <_printf_float+0xb6>
 800a5d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a5d4:	ea59 0303 	orrs.w	r3, r9, r3
 800a5d8:	d102      	bne.n	800a5e0 <_printf_float+0x28c>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	07d9      	lsls	r1, r3, #31
 800a5de:	d5d7      	bpl.n	800a590 <_printf_float+0x23c>
 800a5e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	f43f af0d 	beq.w	800a40a <_printf_float+0xb6>
 800a5f0:	f04f 0a00 	mov.w	sl, #0
 800a5f4:	f104 0b1a 	add.w	fp, r4, #26
 800a5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5fa:	425b      	negs	r3, r3
 800a5fc:	4553      	cmp	r3, sl
 800a5fe:	dc01      	bgt.n	800a604 <_printf_float+0x2b0>
 800a600:	464b      	mov	r3, r9
 800a602:	e793      	b.n	800a52c <_printf_float+0x1d8>
 800a604:	2301      	movs	r3, #1
 800a606:	465a      	mov	r2, fp
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b8      	blx	r7
 800a60e:	3001      	adds	r0, #1
 800a610:	f43f aefb 	beq.w	800a40a <_printf_float+0xb6>
 800a614:	f10a 0a01 	add.w	sl, sl, #1
 800a618:	e7ee      	b.n	800a5f8 <_printf_float+0x2a4>
 800a61a:	bf00      	nop
 800a61c:	7fefffff 	.word	0x7fefffff
 800a620:	0800ebe5 	.word	0x0800ebe5
 800a624:	0800ebe9 	.word	0x0800ebe9
 800a628:	0800ebed 	.word	0x0800ebed
 800a62c:	0800ebf1 	.word	0x0800ebf1
 800a630:	0800ebf5 	.word	0x0800ebf5
 800a634:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a636:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a63a:	4553      	cmp	r3, sl
 800a63c:	bfa8      	it	ge
 800a63e:	4653      	movge	r3, sl
 800a640:	2b00      	cmp	r3, #0
 800a642:	4699      	mov	r9, r3
 800a644:	dc36      	bgt.n	800a6b4 <_printf_float+0x360>
 800a646:	f04f 0b00 	mov.w	fp, #0
 800a64a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a64e:	f104 021a 	add.w	r2, r4, #26
 800a652:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a654:	9306      	str	r3, [sp, #24]
 800a656:	eba3 0309 	sub.w	r3, r3, r9
 800a65a:	455b      	cmp	r3, fp
 800a65c:	dc31      	bgt.n	800a6c2 <_printf_float+0x36e>
 800a65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a660:	459a      	cmp	sl, r3
 800a662:	dc3a      	bgt.n	800a6da <_printf_float+0x386>
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	07da      	lsls	r2, r3, #31
 800a668:	d437      	bmi.n	800a6da <_printf_float+0x386>
 800a66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66c:	ebaa 0903 	sub.w	r9, sl, r3
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	ebaa 0303 	sub.w	r3, sl, r3
 800a676:	4599      	cmp	r9, r3
 800a678:	bfa8      	it	ge
 800a67a:	4699      	movge	r9, r3
 800a67c:	f1b9 0f00 	cmp.w	r9, #0
 800a680:	dc33      	bgt.n	800a6ea <_printf_float+0x396>
 800a682:	f04f 0800 	mov.w	r8, #0
 800a686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a68a:	f104 0b1a 	add.w	fp, r4, #26
 800a68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a690:	ebaa 0303 	sub.w	r3, sl, r3
 800a694:	eba3 0309 	sub.w	r3, r3, r9
 800a698:	4543      	cmp	r3, r8
 800a69a:	f77f af79 	ble.w	800a590 <_printf_float+0x23c>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	465a      	mov	r2, fp
 800a6a2:	4631      	mov	r1, r6
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	47b8      	blx	r7
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	f43f aeae 	beq.w	800a40a <_printf_float+0xb6>
 800a6ae:	f108 0801 	add.w	r8, r8, #1
 800a6b2:	e7ec      	b.n	800a68e <_printf_float+0x33a>
 800a6b4:	4642      	mov	r2, r8
 800a6b6:	4631      	mov	r1, r6
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b8      	blx	r7
 800a6bc:	3001      	adds	r0, #1
 800a6be:	d1c2      	bne.n	800a646 <_printf_float+0x2f2>
 800a6c0:	e6a3      	b.n	800a40a <_printf_float+0xb6>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	9206      	str	r2, [sp, #24]
 800a6ca:	47b8      	blx	r7
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	f43f ae9c 	beq.w	800a40a <_printf_float+0xb6>
 800a6d2:	9a06      	ldr	r2, [sp, #24]
 800a6d4:	f10b 0b01 	add.w	fp, fp, #1
 800a6d8:	e7bb      	b.n	800a652 <_printf_float+0x2fe>
 800a6da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b8      	blx	r7
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d1c0      	bne.n	800a66a <_printf_float+0x316>
 800a6e8:	e68f      	b.n	800a40a <_printf_float+0xb6>
 800a6ea:	9a06      	ldr	r2, [sp, #24]
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	4442      	add	r2, r8
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b8      	blx	r7
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d1c3      	bne.n	800a682 <_printf_float+0x32e>
 800a6fa:	e686      	b.n	800a40a <_printf_float+0xb6>
 800a6fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a700:	f1ba 0f01 	cmp.w	sl, #1
 800a704:	dc01      	bgt.n	800a70a <_printf_float+0x3b6>
 800a706:	07db      	lsls	r3, r3, #31
 800a708:	d536      	bpl.n	800a778 <_printf_float+0x424>
 800a70a:	2301      	movs	r3, #1
 800a70c:	4642      	mov	r2, r8
 800a70e:	4631      	mov	r1, r6
 800a710:	4628      	mov	r0, r5
 800a712:	47b8      	blx	r7
 800a714:	3001      	adds	r0, #1
 800a716:	f43f ae78 	beq.w	800a40a <_printf_float+0xb6>
 800a71a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a71e:	4631      	mov	r1, r6
 800a720:	4628      	mov	r0, r5
 800a722:	47b8      	blx	r7
 800a724:	3001      	adds	r0, #1
 800a726:	f43f ae70 	beq.w	800a40a <_printf_float+0xb6>
 800a72a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a72e:	2200      	movs	r2, #0
 800a730:	2300      	movs	r3, #0
 800a732:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a736:	f7f6 f9ff 	bl	8000b38 <__aeabi_dcmpeq>
 800a73a:	b9c0      	cbnz	r0, 800a76e <_printf_float+0x41a>
 800a73c:	4653      	mov	r3, sl
 800a73e:	f108 0201 	add.w	r2, r8, #1
 800a742:	4631      	mov	r1, r6
 800a744:	4628      	mov	r0, r5
 800a746:	47b8      	blx	r7
 800a748:	3001      	adds	r0, #1
 800a74a:	d10c      	bne.n	800a766 <_printf_float+0x412>
 800a74c:	e65d      	b.n	800a40a <_printf_float+0xb6>
 800a74e:	2301      	movs	r3, #1
 800a750:	465a      	mov	r2, fp
 800a752:	4631      	mov	r1, r6
 800a754:	4628      	mov	r0, r5
 800a756:	47b8      	blx	r7
 800a758:	3001      	adds	r0, #1
 800a75a:	f43f ae56 	beq.w	800a40a <_printf_float+0xb6>
 800a75e:	f108 0801 	add.w	r8, r8, #1
 800a762:	45d0      	cmp	r8, sl
 800a764:	dbf3      	blt.n	800a74e <_printf_float+0x3fa>
 800a766:	464b      	mov	r3, r9
 800a768:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a76c:	e6df      	b.n	800a52e <_printf_float+0x1da>
 800a76e:	f04f 0800 	mov.w	r8, #0
 800a772:	f104 0b1a 	add.w	fp, r4, #26
 800a776:	e7f4      	b.n	800a762 <_printf_float+0x40e>
 800a778:	2301      	movs	r3, #1
 800a77a:	4642      	mov	r2, r8
 800a77c:	e7e1      	b.n	800a742 <_printf_float+0x3ee>
 800a77e:	2301      	movs	r3, #1
 800a780:	464a      	mov	r2, r9
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f ae3e 	beq.w	800a40a <_printf_float+0xb6>
 800a78e:	f108 0801 	add.w	r8, r8, #1
 800a792:	68e3      	ldr	r3, [r4, #12]
 800a794:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a796:	1a5b      	subs	r3, r3, r1
 800a798:	4543      	cmp	r3, r8
 800a79a:	dcf0      	bgt.n	800a77e <_printf_float+0x42a>
 800a79c:	e6fc      	b.n	800a598 <_printf_float+0x244>
 800a79e:	f04f 0800 	mov.w	r8, #0
 800a7a2:	f104 0919 	add.w	r9, r4, #25
 800a7a6:	e7f4      	b.n	800a792 <_printf_float+0x43e>

0800a7a8 <_printf_common>:
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	4698      	mov	r8, r3
 800a7b0:	688a      	ldr	r2, [r1, #8]
 800a7b2:	690b      	ldr	r3, [r1, #16]
 800a7b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfb8      	it	lt
 800a7bc:	4613      	movlt	r3, r2
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b10a      	cbz	r2, 800a7ce <_printf_common+0x26>
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	0699      	lsls	r1, r3, #26
 800a7d2:	bf42      	ittt	mi
 800a7d4:	6833      	ldrmi	r3, [r6, #0]
 800a7d6:	3302      	addmi	r3, #2
 800a7d8:	6033      	strmi	r3, [r6, #0]
 800a7da:	6825      	ldr	r5, [r4, #0]
 800a7dc:	f015 0506 	ands.w	r5, r5, #6
 800a7e0:	d106      	bne.n	800a7f0 <_printf_common+0x48>
 800a7e2:	f104 0a19 	add.w	sl, r4, #25
 800a7e6:	68e3      	ldr	r3, [r4, #12]
 800a7e8:	6832      	ldr	r2, [r6, #0]
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	42ab      	cmp	r3, r5
 800a7ee:	dc26      	bgt.n	800a83e <_printf_common+0x96>
 800a7f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a7f4:	6822      	ldr	r2, [r4, #0]
 800a7f6:	3b00      	subs	r3, #0
 800a7f8:	bf18      	it	ne
 800a7fa:	2301      	movne	r3, #1
 800a7fc:	0692      	lsls	r2, r2, #26
 800a7fe:	d42b      	bmi.n	800a858 <_printf_common+0xb0>
 800a800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a804:	4641      	mov	r1, r8
 800a806:	4638      	mov	r0, r7
 800a808:	47c8      	blx	r9
 800a80a:	3001      	adds	r0, #1
 800a80c:	d01e      	beq.n	800a84c <_printf_common+0xa4>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	6922      	ldr	r2, [r4, #16]
 800a812:	f003 0306 	and.w	r3, r3, #6
 800a816:	2b04      	cmp	r3, #4
 800a818:	bf02      	ittt	eq
 800a81a:	68e5      	ldreq	r5, [r4, #12]
 800a81c:	6833      	ldreq	r3, [r6, #0]
 800a81e:	1aed      	subeq	r5, r5, r3
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	bf0c      	ite	eq
 800a824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a828:	2500      	movne	r5, #0
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bfc4      	itt	gt
 800a82e:	1a9b      	subgt	r3, r3, r2
 800a830:	18ed      	addgt	r5, r5, r3
 800a832:	2600      	movs	r6, #0
 800a834:	341a      	adds	r4, #26
 800a836:	42b5      	cmp	r5, r6
 800a838:	d11a      	bne.n	800a870 <_printf_common+0xc8>
 800a83a:	2000      	movs	r0, #0
 800a83c:	e008      	b.n	800a850 <_printf_common+0xa8>
 800a83e:	2301      	movs	r3, #1
 800a840:	4652      	mov	r2, sl
 800a842:	4641      	mov	r1, r8
 800a844:	4638      	mov	r0, r7
 800a846:	47c8      	blx	r9
 800a848:	3001      	adds	r0, #1
 800a84a:	d103      	bne.n	800a854 <_printf_common+0xac>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a854:	3501      	adds	r5, #1
 800a856:	e7c6      	b.n	800a7e6 <_printf_common+0x3e>
 800a858:	18e1      	adds	r1, r4, r3
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	2030      	movs	r0, #48	@ 0x30
 800a85e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a862:	4422      	add	r2, r4
 800a864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a868:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a86c:	3302      	adds	r3, #2
 800a86e:	e7c7      	b.n	800a800 <_printf_common+0x58>
 800a870:	2301      	movs	r3, #1
 800a872:	4622      	mov	r2, r4
 800a874:	4641      	mov	r1, r8
 800a876:	4638      	mov	r0, r7
 800a878:	47c8      	blx	r9
 800a87a:	3001      	adds	r0, #1
 800a87c:	d0e6      	beq.n	800a84c <_printf_common+0xa4>
 800a87e:	3601      	adds	r6, #1
 800a880:	e7d9      	b.n	800a836 <_printf_common+0x8e>
	...

0800a884 <_printf_i>:
 800a884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	7e0f      	ldrb	r7, [r1, #24]
 800a88a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a88c:	2f78      	cmp	r7, #120	@ 0x78
 800a88e:	4691      	mov	r9, r2
 800a890:	4680      	mov	r8, r0
 800a892:	460c      	mov	r4, r1
 800a894:	469a      	mov	sl, r3
 800a896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a89a:	d807      	bhi.n	800a8ac <_printf_i+0x28>
 800a89c:	2f62      	cmp	r7, #98	@ 0x62
 800a89e:	d80a      	bhi.n	800a8b6 <_printf_i+0x32>
 800a8a0:	2f00      	cmp	r7, #0
 800a8a2:	f000 80d2 	beq.w	800aa4a <_printf_i+0x1c6>
 800a8a6:	2f58      	cmp	r7, #88	@ 0x58
 800a8a8:	f000 80b9 	beq.w	800aa1e <_printf_i+0x19a>
 800a8ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8b4:	e03a      	b.n	800a92c <_printf_i+0xa8>
 800a8b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8ba:	2b15      	cmp	r3, #21
 800a8bc:	d8f6      	bhi.n	800a8ac <_printf_i+0x28>
 800a8be:	a101      	add	r1, pc, #4	@ (adr r1, 800a8c4 <_printf_i+0x40>)
 800a8c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8c4:	0800a91d 	.word	0x0800a91d
 800a8c8:	0800a931 	.word	0x0800a931
 800a8cc:	0800a8ad 	.word	0x0800a8ad
 800a8d0:	0800a8ad 	.word	0x0800a8ad
 800a8d4:	0800a8ad 	.word	0x0800a8ad
 800a8d8:	0800a8ad 	.word	0x0800a8ad
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a8ad 	.word	0x0800a8ad
 800a8e4:	0800a8ad 	.word	0x0800a8ad
 800a8e8:	0800a8ad 	.word	0x0800a8ad
 800a8ec:	0800a8ad 	.word	0x0800a8ad
 800a8f0:	0800aa31 	.word	0x0800aa31
 800a8f4:	0800a95b 	.word	0x0800a95b
 800a8f8:	0800a9eb 	.word	0x0800a9eb
 800a8fc:	0800a8ad 	.word	0x0800a8ad
 800a900:	0800a8ad 	.word	0x0800a8ad
 800a904:	0800aa53 	.word	0x0800aa53
 800a908:	0800a8ad 	.word	0x0800a8ad
 800a90c:	0800a95b 	.word	0x0800a95b
 800a910:	0800a8ad 	.word	0x0800a8ad
 800a914:	0800a8ad 	.word	0x0800a8ad
 800a918:	0800a9f3 	.word	0x0800a9f3
 800a91c:	6833      	ldr	r3, [r6, #0]
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	6032      	str	r2, [r6, #0]
 800a924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a92c:	2301      	movs	r3, #1
 800a92e:	e09d      	b.n	800aa6c <_printf_i+0x1e8>
 800a930:	6833      	ldr	r3, [r6, #0]
 800a932:	6820      	ldr	r0, [r4, #0]
 800a934:	1d19      	adds	r1, r3, #4
 800a936:	6031      	str	r1, [r6, #0]
 800a938:	0606      	lsls	r6, r0, #24
 800a93a:	d501      	bpl.n	800a940 <_printf_i+0xbc>
 800a93c:	681d      	ldr	r5, [r3, #0]
 800a93e:	e003      	b.n	800a948 <_printf_i+0xc4>
 800a940:	0645      	lsls	r5, r0, #25
 800a942:	d5fb      	bpl.n	800a93c <_printf_i+0xb8>
 800a944:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a948:	2d00      	cmp	r5, #0
 800a94a:	da03      	bge.n	800a954 <_printf_i+0xd0>
 800a94c:	232d      	movs	r3, #45	@ 0x2d
 800a94e:	426d      	negs	r5, r5
 800a950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a954:	4859      	ldr	r0, [pc, #356]	@ (800aabc <_printf_i+0x238>)
 800a956:	230a      	movs	r3, #10
 800a958:	e011      	b.n	800a97e <_printf_i+0xfa>
 800a95a:	6821      	ldr	r1, [r4, #0]
 800a95c:	6833      	ldr	r3, [r6, #0]
 800a95e:	0608      	lsls	r0, r1, #24
 800a960:	f853 5b04 	ldr.w	r5, [r3], #4
 800a964:	d402      	bmi.n	800a96c <_printf_i+0xe8>
 800a966:	0649      	lsls	r1, r1, #25
 800a968:	bf48      	it	mi
 800a96a:	b2ad      	uxthmi	r5, r5
 800a96c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a96e:	4853      	ldr	r0, [pc, #332]	@ (800aabc <_printf_i+0x238>)
 800a970:	6033      	str	r3, [r6, #0]
 800a972:	bf14      	ite	ne
 800a974:	230a      	movne	r3, #10
 800a976:	2308      	moveq	r3, #8
 800a978:	2100      	movs	r1, #0
 800a97a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a97e:	6866      	ldr	r6, [r4, #4]
 800a980:	60a6      	str	r6, [r4, #8]
 800a982:	2e00      	cmp	r6, #0
 800a984:	bfa2      	ittt	ge
 800a986:	6821      	ldrge	r1, [r4, #0]
 800a988:	f021 0104 	bicge.w	r1, r1, #4
 800a98c:	6021      	strge	r1, [r4, #0]
 800a98e:	b90d      	cbnz	r5, 800a994 <_printf_i+0x110>
 800a990:	2e00      	cmp	r6, #0
 800a992:	d04b      	beq.n	800aa2c <_printf_i+0x1a8>
 800a994:	4616      	mov	r6, r2
 800a996:	fbb5 f1f3 	udiv	r1, r5, r3
 800a99a:	fb03 5711 	mls	r7, r3, r1, r5
 800a99e:	5dc7      	ldrb	r7, [r0, r7]
 800a9a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9a4:	462f      	mov	r7, r5
 800a9a6:	42bb      	cmp	r3, r7
 800a9a8:	460d      	mov	r5, r1
 800a9aa:	d9f4      	bls.n	800a996 <_printf_i+0x112>
 800a9ac:	2b08      	cmp	r3, #8
 800a9ae:	d10b      	bne.n	800a9c8 <_printf_i+0x144>
 800a9b0:	6823      	ldr	r3, [r4, #0]
 800a9b2:	07df      	lsls	r7, r3, #31
 800a9b4:	d508      	bpl.n	800a9c8 <_printf_i+0x144>
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	6861      	ldr	r1, [r4, #4]
 800a9ba:	4299      	cmp	r1, r3
 800a9bc:	bfde      	ittt	le
 800a9be:	2330      	movle	r3, #48	@ 0x30
 800a9c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9c8:	1b92      	subs	r2, r2, r6
 800a9ca:	6122      	str	r2, [r4, #16]
 800a9cc:	f8cd a000 	str.w	sl, [sp]
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	aa03      	add	r2, sp, #12
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	f7ff fee6 	bl	800a7a8 <_printf_common>
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d14a      	bne.n	800aa76 <_printf_i+0x1f2>
 800a9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e4:	b004      	add	sp, #16
 800a9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	f043 0320 	orr.w	r3, r3, #32
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	4833      	ldr	r0, [pc, #204]	@ (800aac0 <_printf_i+0x23c>)
 800a9f4:	2778      	movs	r7, #120	@ 0x78
 800a9f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	6831      	ldr	r1, [r6, #0]
 800a9fe:	061f      	lsls	r7, r3, #24
 800aa00:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa04:	d402      	bmi.n	800aa0c <_printf_i+0x188>
 800aa06:	065f      	lsls	r7, r3, #25
 800aa08:	bf48      	it	mi
 800aa0a:	b2ad      	uxthmi	r5, r5
 800aa0c:	6031      	str	r1, [r6, #0]
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	bf44      	itt	mi
 800aa12:	f043 0320 	orrmi.w	r3, r3, #32
 800aa16:	6023      	strmi	r3, [r4, #0]
 800aa18:	b11d      	cbz	r5, 800aa22 <_printf_i+0x19e>
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	e7ac      	b.n	800a978 <_printf_i+0xf4>
 800aa1e:	4827      	ldr	r0, [pc, #156]	@ (800aabc <_printf_i+0x238>)
 800aa20:	e7e9      	b.n	800a9f6 <_printf_i+0x172>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	f023 0320 	bic.w	r3, r3, #32
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	e7f6      	b.n	800aa1a <_printf_i+0x196>
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	e7bd      	b.n	800a9ac <_printf_i+0x128>
 800aa30:	6833      	ldr	r3, [r6, #0]
 800aa32:	6825      	ldr	r5, [r4, #0]
 800aa34:	6961      	ldr	r1, [r4, #20]
 800aa36:	1d18      	adds	r0, r3, #4
 800aa38:	6030      	str	r0, [r6, #0]
 800aa3a:	062e      	lsls	r6, r5, #24
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	d501      	bpl.n	800aa44 <_printf_i+0x1c0>
 800aa40:	6019      	str	r1, [r3, #0]
 800aa42:	e002      	b.n	800aa4a <_printf_i+0x1c6>
 800aa44:	0668      	lsls	r0, r5, #25
 800aa46:	d5fb      	bpl.n	800aa40 <_printf_i+0x1bc>
 800aa48:	8019      	strh	r1, [r3, #0]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	4616      	mov	r6, r2
 800aa50:	e7bc      	b.n	800a9cc <_printf_i+0x148>
 800aa52:	6833      	ldr	r3, [r6, #0]
 800aa54:	1d1a      	adds	r2, r3, #4
 800aa56:	6032      	str	r2, [r6, #0]
 800aa58:	681e      	ldr	r6, [r3, #0]
 800aa5a:	6862      	ldr	r2, [r4, #4]
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7f5 fbee 	bl	8000240 <memchr>
 800aa64:	b108      	cbz	r0, 800aa6a <_printf_i+0x1e6>
 800aa66:	1b80      	subs	r0, r0, r6
 800aa68:	6060      	str	r0, [r4, #4]
 800aa6a:	6863      	ldr	r3, [r4, #4]
 800aa6c:	6123      	str	r3, [r4, #16]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa74:	e7aa      	b.n	800a9cc <_printf_i+0x148>
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	47d0      	blx	sl
 800aa80:	3001      	adds	r0, #1
 800aa82:	d0ad      	beq.n	800a9e0 <_printf_i+0x15c>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	079b      	lsls	r3, r3, #30
 800aa88:	d413      	bmi.n	800aab2 <_printf_i+0x22e>
 800aa8a:	68e0      	ldr	r0, [r4, #12]
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	4298      	cmp	r0, r3
 800aa90:	bfb8      	it	lt
 800aa92:	4618      	movlt	r0, r3
 800aa94:	e7a6      	b.n	800a9e4 <_printf_i+0x160>
 800aa96:	2301      	movs	r3, #1
 800aa98:	4632      	mov	r2, r6
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	47d0      	blx	sl
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d09d      	beq.n	800a9e0 <_printf_i+0x15c>
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	68e3      	ldr	r3, [r4, #12]
 800aaa8:	9903      	ldr	r1, [sp, #12]
 800aaaa:	1a5b      	subs	r3, r3, r1
 800aaac:	42ab      	cmp	r3, r5
 800aaae:	dcf2      	bgt.n	800aa96 <_printf_i+0x212>
 800aab0:	e7eb      	b.n	800aa8a <_printf_i+0x206>
 800aab2:	2500      	movs	r5, #0
 800aab4:	f104 0619 	add.w	r6, r4, #25
 800aab8:	e7f5      	b.n	800aaa6 <_printf_i+0x222>
 800aaba:	bf00      	nop
 800aabc:	0800ebf7 	.word	0x0800ebf7
 800aac0:	0800ec08 	.word	0x0800ec08

0800aac4 <_scanf_float>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	b087      	sub	sp, #28
 800aaca:	4617      	mov	r7, r2
 800aacc:	9303      	str	r3, [sp, #12]
 800aace:	688b      	ldr	r3, [r1, #8]
 800aad0:	1e5a      	subs	r2, r3, #1
 800aad2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aad6:	bf81      	itttt	hi
 800aad8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aadc:	eb03 0b05 	addhi.w	fp, r3, r5
 800aae0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aae4:	608b      	strhi	r3, [r1, #8]
 800aae6:	680b      	ldr	r3, [r1, #0]
 800aae8:	460a      	mov	r2, r1
 800aaea:	f04f 0500 	mov.w	r5, #0
 800aaee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aaf2:	f842 3b1c 	str.w	r3, [r2], #28
 800aaf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aafa:	4680      	mov	r8, r0
 800aafc:	460c      	mov	r4, r1
 800aafe:	bf98      	it	ls
 800ab00:	f04f 0b00 	movls.w	fp, #0
 800ab04:	9201      	str	r2, [sp, #4]
 800ab06:	4616      	mov	r6, r2
 800ab08:	46aa      	mov	sl, r5
 800ab0a:	46a9      	mov	r9, r5
 800ab0c:	9502      	str	r5, [sp, #8]
 800ab0e:	68a2      	ldr	r2, [r4, #8]
 800ab10:	b152      	cbz	r2, 800ab28 <_scanf_float+0x64>
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2b4e      	cmp	r3, #78	@ 0x4e
 800ab18:	d864      	bhi.n	800abe4 <_scanf_float+0x120>
 800ab1a:	2b40      	cmp	r3, #64	@ 0x40
 800ab1c:	d83c      	bhi.n	800ab98 <_scanf_float+0xd4>
 800ab1e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ab22:	b2c8      	uxtb	r0, r1
 800ab24:	280e      	cmp	r0, #14
 800ab26:	d93a      	bls.n	800ab9e <_scanf_float+0xda>
 800ab28:	f1b9 0f00 	cmp.w	r9, #0
 800ab2c:	d003      	beq.n	800ab36 <_scanf_float+0x72>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab3a:	f1ba 0f01 	cmp.w	sl, #1
 800ab3e:	f200 8117 	bhi.w	800ad70 <_scanf_float+0x2ac>
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	429e      	cmp	r6, r3
 800ab46:	f200 8108 	bhi.w	800ad5a <_scanf_float+0x296>
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	b007      	add	sp, #28
 800ab4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab52:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ab56:	2a0d      	cmp	r2, #13
 800ab58:	d8e6      	bhi.n	800ab28 <_scanf_float+0x64>
 800ab5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ab60 <_scanf_float+0x9c>)
 800ab5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab60:	0800aca7 	.word	0x0800aca7
 800ab64:	0800ab29 	.word	0x0800ab29
 800ab68:	0800ab29 	.word	0x0800ab29
 800ab6c:	0800ab29 	.word	0x0800ab29
 800ab70:	0800ad07 	.word	0x0800ad07
 800ab74:	0800acdf 	.word	0x0800acdf
 800ab78:	0800ab29 	.word	0x0800ab29
 800ab7c:	0800ab29 	.word	0x0800ab29
 800ab80:	0800acb5 	.word	0x0800acb5
 800ab84:	0800ab29 	.word	0x0800ab29
 800ab88:	0800ab29 	.word	0x0800ab29
 800ab8c:	0800ab29 	.word	0x0800ab29
 800ab90:	0800ab29 	.word	0x0800ab29
 800ab94:	0800ac6d 	.word	0x0800ac6d
 800ab98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ab9c:	e7db      	b.n	800ab56 <_scanf_float+0x92>
 800ab9e:	290e      	cmp	r1, #14
 800aba0:	d8c2      	bhi.n	800ab28 <_scanf_float+0x64>
 800aba2:	a001      	add	r0, pc, #4	@ (adr r0, 800aba8 <_scanf_float+0xe4>)
 800aba4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aba8:	0800ac5d 	.word	0x0800ac5d
 800abac:	0800ab29 	.word	0x0800ab29
 800abb0:	0800ac5d 	.word	0x0800ac5d
 800abb4:	0800acf3 	.word	0x0800acf3
 800abb8:	0800ab29 	.word	0x0800ab29
 800abbc:	0800ac05 	.word	0x0800ac05
 800abc0:	0800ac43 	.word	0x0800ac43
 800abc4:	0800ac43 	.word	0x0800ac43
 800abc8:	0800ac43 	.word	0x0800ac43
 800abcc:	0800ac43 	.word	0x0800ac43
 800abd0:	0800ac43 	.word	0x0800ac43
 800abd4:	0800ac43 	.word	0x0800ac43
 800abd8:	0800ac43 	.word	0x0800ac43
 800abdc:	0800ac43 	.word	0x0800ac43
 800abe0:	0800ac43 	.word	0x0800ac43
 800abe4:	2b6e      	cmp	r3, #110	@ 0x6e
 800abe6:	d809      	bhi.n	800abfc <_scanf_float+0x138>
 800abe8:	2b60      	cmp	r3, #96	@ 0x60
 800abea:	d8b2      	bhi.n	800ab52 <_scanf_float+0x8e>
 800abec:	2b54      	cmp	r3, #84	@ 0x54
 800abee:	d07b      	beq.n	800ace8 <_scanf_float+0x224>
 800abf0:	2b59      	cmp	r3, #89	@ 0x59
 800abf2:	d199      	bne.n	800ab28 <_scanf_float+0x64>
 800abf4:	2d07      	cmp	r5, #7
 800abf6:	d197      	bne.n	800ab28 <_scanf_float+0x64>
 800abf8:	2508      	movs	r5, #8
 800abfa:	e02c      	b.n	800ac56 <_scanf_float+0x192>
 800abfc:	2b74      	cmp	r3, #116	@ 0x74
 800abfe:	d073      	beq.n	800ace8 <_scanf_float+0x224>
 800ac00:	2b79      	cmp	r3, #121	@ 0x79
 800ac02:	e7f6      	b.n	800abf2 <_scanf_float+0x12e>
 800ac04:	6821      	ldr	r1, [r4, #0]
 800ac06:	05c8      	lsls	r0, r1, #23
 800ac08:	d51b      	bpl.n	800ac42 <_scanf_float+0x17e>
 800ac0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ac0e:	6021      	str	r1, [r4, #0]
 800ac10:	f109 0901 	add.w	r9, r9, #1
 800ac14:	f1bb 0f00 	cmp.w	fp, #0
 800ac18:	d003      	beq.n	800ac22 <_scanf_float+0x15e>
 800ac1a:	3201      	adds	r2, #1
 800ac1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac20:	60a2      	str	r2, [r4, #8]
 800ac22:	68a3      	ldr	r3, [r4, #8]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	60a3      	str	r3, [r4, #8]
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
 800ac36:	f340 8087 	ble.w	800ad48 <_scanf_float+0x284>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	603b      	str	r3, [r7, #0]
 800ac40:	e765      	b.n	800ab0e <_scanf_float+0x4a>
 800ac42:	eb1a 0105 	adds.w	r1, sl, r5
 800ac46:	f47f af6f 	bne.w	800ab28 <_scanf_float+0x64>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ac50:	6022      	str	r2, [r4, #0]
 800ac52:	460d      	mov	r5, r1
 800ac54:	468a      	mov	sl, r1
 800ac56:	f806 3b01 	strb.w	r3, [r6], #1
 800ac5a:	e7e2      	b.n	800ac22 <_scanf_float+0x15e>
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	0610      	lsls	r0, r2, #24
 800ac60:	f57f af62 	bpl.w	800ab28 <_scanf_float+0x64>
 800ac64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac68:	6022      	str	r2, [r4, #0]
 800ac6a:	e7f4      	b.n	800ac56 <_scanf_float+0x192>
 800ac6c:	f1ba 0f00 	cmp.w	sl, #0
 800ac70:	d10e      	bne.n	800ac90 <_scanf_float+0x1cc>
 800ac72:	f1b9 0f00 	cmp.w	r9, #0
 800ac76:	d10e      	bne.n	800ac96 <_scanf_float+0x1d2>
 800ac78:	6822      	ldr	r2, [r4, #0]
 800ac7a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac7e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac82:	d108      	bne.n	800ac96 <_scanf_float+0x1d2>
 800ac84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac88:	6022      	str	r2, [r4, #0]
 800ac8a:	f04f 0a01 	mov.w	sl, #1
 800ac8e:	e7e2      	b.n	800ac56 <_scanf_float+0x192>
 800ac90:	f1ba 0f02 	cmp.w	sl, #2
 800ac94:	d055      	beq.n	800ad42 <_scanf_float+0x27e>
 800ac96:	2d01      	cmp	r5, #1
 800ac98:	d002      	beq.n	800aca0 <_scanf_float+0x1dc>
 800ac9a:	2d04      	cmp	r5, #4
 800ac9c:	f47f af44 	bne.w	800ab28 <_scanf_float+0x64>
 800aca0:	3501      	adds	r5, #1
 800aca2:	b2ed      	uxtb	r5, r5
 800aca4:	e7d7      	b.n	800ac56 <_scanf_float+0x192>
 800aca6:	f1ba 0f01 	cmp.w	sl, #1
 800acaa:	f47f af3d 	bne.w	800ab28 <_scanf_float+0x64>
 800acae:	f04f 0a02 	mov.w	sl, #2
 800acb2:	e7d0      	b.n	800ac56 <_scanf_float+0x192>
 800acb4:	b97d      	cbnz	r5, 800acd6 <_scanf_float+0x212>
 800acb6:	f1b9 0f00 	cmp.w	r9, #0
 800acba:	f47f af38 	bne.w	800ab2e <_scanf_float+0x6a>
 800acbe:	6822      	ldr	r2, [r4, #0]
 800acc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800acc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800acc8:	f040 8108 	bne.w	800aedc <_scanf_float+0x418>
 800accc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800acd0:	6022      	str	r2, [r4, #0]
 800acd2:	2501      	movs	r5, #1
 800acd4:	e7bf      	b.n	800ac56 <_scanf_float+0x192>
 800acd6:	2d03      	cmp	r5, #3
 800acd8:	d0e2      	beq.n	800aca0 <_scanf_float+0x1dc>
 800acda:	2d05      	cmp	r5, #5
 800acdc:	e7de      	b.n	800ac9c <_scanf_float+0x1d8>
 800acde:	2d02      	cmp	r5, #2
 800ace0:	f47f af22 	bne.w	800ab28 <_scanf_float+0x64>
 800ace4:	2503      	movs	r5, #3
 800ace6:	e7b6      	b.n	800ac56 <_scanf_float+0x192>
 800ace8:	2d06      	cmp	r5, #6
 800acea:	f47f af1d 	bne.w	800ab28 <_scanf_float+0x64>
 800acee:	2507      	movs	r5, #7
 800acf0:	e7b1      	b.n	800ac56 <_scanf_float+0x192>
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	0591      	lsls	r1, r2, #22
 800acf6:	f57f af17 	bpl.w	800ab28 <_scanf_float+0x64>
 800acfa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800acfe:	6022      	str	r2, [r4, #0]
 800ad00:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad04:	e7a7      	b.n	800ac56 <_scanf_float+0x192>
 800ad06:	6822      	ldr	r2, [r4, #0]
 800ad08:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ad0c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ad10:	d006      	beq.n	800ad20 <_scanf_float+0x25c>
 800ad12:	0550      	lsls	r0, r2, #21
 800ad14:	f57f af08 	bpl.w	800ab28 <_scanf_float+0x64>
 800ad18:	f1b9 0f00 	cmp.w	r9, #0
 800ad1c:	f000 80de 	beq.w	800aedc <_scanf_float+0x418>
 800ad20:	0591      	lsls	r1, r2, #22
 800ad22:	bf58      	it	pl
 800ad24:	9902      	ldrpl	r1, [sp, #8]
 800ad26:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ad2a:	bf58      	it	pl
 800ad2c:	eba9 0101 	subpl.w	r1, r9, r1
 800ad30:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ad34:	bf58      	it	pl
 800ad36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad3a:	6022      	str	r2, [r4, #0]
 800ad3c:	f04f 0900 	mov.w	r9, #0
 800ad40:	e789      	b.n	800ac56 <_scanf_float+0x192>
 800ad42:	f04f 0a03 	mov.w	sl, #3
 800ad46:	e786      	b.n	800ac56 <_scanf_float+0x192>
 800ad48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	4640      	mov	r0, r8
 800ad50:	4798      	blx	r3
 800ad52:	2800      	cmp	r0, #0
 800ad54:	f43f aedb 	beq.w	800ab0e <_scanf_float+0x4a>
 800ad58:	e6e6      	b.n	800ab28 <_scanf_float+0x64>
 800ad5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad62:	463a      	mov	r2, r7
 800ad64:	4640      	mov	r0, r8
 800ad66:	4798      	blx	r3
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	e6e8      	b.n	800ab42 <_scanf_float+0x7e>
 800ad70:	1e6b      	subs	r3, r5, #1
 800ad72:	2b06      	cmp	r3, #6
 800ad74:	d824      	bhi.n	800adc0 <_scanf_float+0x2fc>
 800ad76:	2d02      	cmp	r5, #2
 800ad78:	d836      	bhi.n	800ade8 <_scanf_float+0x324>
 800ad7a:	9b01      	ldr	r3, [sp, #4]
 800ad7c:	429e      	cmp	r6, r3
 800ad7e:	f67f aee4 	bls.w	800ab4a <_scanf_float+0x86>
 800ad82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad8a:	463a      	mov	r2, r7
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4798      	blx	r3
 800ad90:	6923      	ldr	r3, [r4, #16]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	6123      	str	r3, [r4, #16]
 800ad96:	e7f0      	b.n	800ad7a <_scanf_float+0x2b6>
 800ad98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad9c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ada0:	463a      	mov	r2, r7
 800ada2:	4640      	mov	r0, r8
 800ada4:	4798      	blx	r3
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adb0:	fa5f fa8a 	uxtb.w	sl, sl
 800adb4:	f1ba 0f02 	cmp.w	sl, #2
 800adb8:	d1ee      	bne.n	800ad98 <_scanf_float+0x2d4>
 800adba:	3d03      	subs	r5, #3
 800adbc:	b2ed      	uxtb	r5, r5
 800adbe:	1b76      	subs	r6, r6, r5
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	05da      	lsls	r2, r3, #23
 800adc4:	d530      	bpl.n	800ae28 <_scanf_float+0x364>
 800adc6:	055b      	lsls	r3, r3, #21
 800adc8:	d511      	bpl.n	800adee <_scanf_float+0x32a>
 800adca:	9b01      	ldr	r3, [sp, #4]
 800adcc:	429e      	cmp	r6, r3
 800adce:	f67f aebc 	bls.w	800ab4a <_scanf_float+0x86>
 800add2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800add6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adda:	463a      	mov	r2, r7
 800addc:	4640      	mov	r0, r8
 800adde:	4798      	blx	r3
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	6123      	str	r3, [r4, #16]
 800ade6:	e7f0      	b.n	800adca <_scanf_float+0x306>
 800ade8:	46aa      	mov	sl, r5
 800adea:	46b3      	mov	fp, r6
 800adec:	e7de      	b.n	800adac <_scanf_float+0x2e8>
 800adee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	2965      	cmp	r1, #101	@ 0x65
 800adf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800adfa:	f106 35ff 	add.w	r5, r6, #4294967295
 800adfe:	6123      	str	r3, [r4, #16]
 800ae00:	d00c      	beq.n	800ae1c <_scanf_float+0x358>
 800ae02:	2945      	cmp	r1, #69	@ 0x45
 800ae04:	d00a      	beq.n	800ae1c <_scanf_float+0x358>
 800ae06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	4798      	blx	r3
 800ae10:	6923      	ldr	r3, [r4, #16]
 800ae12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	1eb5      	subs	r5, r6, #2
 800ae1a:	6123      	str	r3, [r4, #16]
 800ae1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae20:	463a      	mov	r2, r7
 800ae22:	4640      	mov	r0, r8
 800ae24:	4798      	blx	r3
 800ae26:	462e      	mov	r6, r5
 800ae28:	6822      	ldr	r2, [r4, #0]
 800ae2a:	f012 0210 	ands.w	r2, r2, #16
 800ae2e:	d001      	beq.n	800ae34 <_scanf_float+0x370>
 800ae30:	2000      	movs	r0, #0
 800ae32:	e68b      	b.n	800ab4c <_scanf_float+0x88>
 800ae34:	7032      	strb	r2, [r6, #0]
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ae3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae40:	d11c      	bne.n	800ae7c <_scanf_float+0x3b8>
 800ae42:	9b02      	ldr	r3, [sp, #8]
 800ae44:	454b      	cmp	r3, r9
 800ae46:	eba3 0209 	sub.w	r2, r3, r9
 800ae4a:	d123      	bne.n	800ae94 <_scanf_float+0x3d0>
 800ae4c:	9901      	ldr	r1, [sp, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4640      	mov	r0, r8
 800ae52:	f002 fcb9 	bl	800d7c8 <_strtod_r>
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	6821      	ldr	r1, [r4, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f011 0f02 	tst.w	r1, #2
 800ae60:	ec57 6b10 	vmov	r6, r7, d0
 800ae64:	f103 0204 	add.w	r2, r3, #4
 800ae68:	d01f      	beq.n	800aeaa <_scanf_float+0x3e6>
 800ae6a:	9903      	ldr	r1, [sp, #12]
 800ae6c:	600a      	str	r2, [r1, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	e9c3 6700 	strd	r6, r7, [r3]
 800ae74:	68e3      	ldr	r3, [r4, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	60e3      	str	r3, [r4, #12]
 800ae7a:	e7d9      	b.n	800ae30 <_scanf_float+0x36c>
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0e4      	beq.n	800ae4c <_scanf_float+0x388>
 800ae82:	9905      	ldr	r1, [sp, #20]
 800ae84:	230a      	movs	r3, #10
 800ae86:	3101      	adds	r1, #1
 800ae88:	4640      	mov	r0, r8
 800ae8a:	f7ff f9b7 	bl	800a1fc <_strtol_r>
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	9e05      	ldr	r6, [sp, #20]
 800ae92:	1ac2      	subs	r2, r0, r3
 800ae94:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ae98:	429e      	cmp	r6, r3
 800ae9a:	bf28      	it	cs
 800ae9c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aea0:	4910      	ldr	r1, [pc, #64]	@ (800aee4 <_scanf_float+0x420>)
 800aea2:	4630      	mov	r0, r6
 800aea4:	f000 f92a 	bl	800b0fc <siprintf>
 800aea8:	e7d0      	b.n	800ae4c <_scanf_float+0x388>
 800aeaa:	f011 0f04 	tst.w	r1, #4
 800aeae:	9903      	ldr	r1, [sp, #12]
 800aeb0:	600a      	str	r2, [r1, #0]
 800aeb2:	d1dc      	bne.n	800ae6e <_scanf_float+0x3aa>
 800aeb4:	681d      	ldr	r5, [r3, #0]
 800aeb6:	4632      	mov	r2, r6
 800aeb8:	463b      	mov	r3, r7
 800aeba:	4630      	mov	r0, r6
 800aebc:	4639      	mov	r1, r7
 800aebe:	f7f5 fe6d 	bl	8000b9c <__aeabi_dcmpun>
 800aec2:	b128      	cbz	r0, 800aed0 <_scanf_float+0x40c>
 800aec4:	4808      	ldr	r0, [pc, #32]	@ (800aee8 <_scanf_float+0x424>)
 800aec6:	f000 fa59 	bl	800b37c <nanf>
 800aeca:	ed85 0a00 	vstr	s0, [r5]
 800aece:	e7d1      	b.n	800ae74 <_scanf_float+0x3b0>
 800aed0:	4630      	mov	r0, r6
 800aed2:	4639      	mov	r1, r7
 800aed4:	f7f5 fec0 	bl	8000c58 <__aeabi_d2f>
 800aed8:	6028      	str	r0, [r5, #0]
 800aeda:	e7cb      	b.n	800ae74 <_scanf_float+0x3b0>
 800aedc:	f04f 0900 	mov.w	r9, #0
 800aee0:	e629      	b.n	800ab36 <_scanf_float+0x72>
 800aee2:	bf00      	nop
 800aee4:	0800ec19 	.word	0x0800ec19
 800aee8:	0800ecca 	.word	0x0800ecca

0800aeec <std>:
 800aeec:	2300      	movs	r3, #0
 800aeee:	b510      	push	{r4, lr}
 800aef0:	4604      	mov	r4, r0
 800aef2:	e9c0 3300 	strd	r3, r3, [r0]
 800aef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aefa:	6083      	str	r3, [r0, #8]
 800aefc:	8181      	strh	r1, [r0, #12]
 800aefe:	6643      	str	r3, [r0, #100]	@ 0x64
 800af00:	81c2      	strh	r2, [r0, #14]
 800af02:	6183      	str	r3, [r0, #24]
 800af04:	4619      	mov	r1, r3
 800af06:	2208      	movs	r2, #8
 800af08:	305c      	adds	r0, #92	@ 0x5c
 800af0a:	f000 f95a 	bl	800b1c2 <memset>
 800af0e:	4b0d      	ldr	r3, [pc, #52]	@ (800af44 <std+0x58>)
 800af10:	6263      	str	r3, [r4, #36]	@ 0x24
 800af12:	4b0d      	ldr	r3, [pc, #52]	@ (800af48 <std+0x5c>)
 800af14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af16:	4b0d      	ldr	r3, [pc, #52]	@ (800af4c <std+0x60>)
 800af18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af1a:	4b0d      	ldr	r3, [pc, #52]	@ (800af50 <std+0x64>)
 800af1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <std+0x68>)
 800af20:	6224      	str	r4, [r4, #32]
 800af22:	429c      	cmp	r4, r3
 800af24:	d006      	beq.n	800af34 <std+0x48>
 800af26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af2a:	4294      	cmp	r4, r2
 800af2c:	d002      	beq.n	800af34 <std+0x48>
 800af2e:	33d0      	adds	r3, #208	@ 0xd0
 800af30:	429c      	cmp	r4, r3
 800af32:	d105      	bne.n	800af40 <std+0x54>
 800af34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af3c:	f000 ba1a 	b.w	800b374 <__retarget_lock_init_recursive>
 800af40:	bd10      	pop	{r4, pc}
 800af42:	bf00      	nop
 800af44:	0800b13d 	.word	0x0800b13d
 800af48:	0800b15f 	.word	0x0800b15f
 800af4c:	0800b197 	.word	0x0800b197
 800af50:	0800b1bb 	.word	0x0800b1bb
 800af54:	20000650 	.word	0x20000650

0800af58 <stdio_exit_handler>:
 800af58:	4a02      	ldr	r2, [pc, #8]	@ (800af64 <stdio_exit_handler+0xc>)
 800af5a:	4903      	ldr	r1, [pc, #12]	@ (800af68 <stdio_exit_handler+0x10>)
 800af5c:	4803      	ldr	r0, [pc, #12]	@ (800af6c <stdio_exit_handler+0x14>)
 800af5e:	f000 b869 	b.w	800b034 <_fwalk_sglue>
 800af62:	bf00      	nop
 800af64:	200000c8 	.word	0x200000c8
 800af68:	0800de11 	.word	0x0800de11
 800af6c:	200000d8 	.word	0x200000d8

0800af70 <cleanup_stdio>:
 800af70:	6841      	ldr	r1, [r0, #4]
 800af72:	4b0c      	ldr	r3, [pc, #48]	@ (800afa4 <cleanup_stdio+0x34>)
 800af74:	4299      	cmp	r1, r3
 800af76:	b510      	push	{r4, lr}
 800af78:	4604      	mov	r4, r0
 800af7a:	d001      	beq.n	800af80 <cleanup_stdio+0x10>
 800af7c:	f002 ff48 	bl	800de10 <_fflush_r>
 800af80:	68a1      	ldr	r1, [r4, #8]
 800af82:	4b09      	ldr	r3, [pc, #36]	@ (800afa8 <cleanup_stdio+0x38>)
 800af84:	4299      	cmp	r1, r3
 800af86:	d002      	beq.n	800af8e <cleanup_stdio+0x1e>
 800af88:	4620      	mov	r0, r4
 800af8a:	f002 ff41 	bl	800de10 <_fflush_r>
 800af8e:	68e1      	ldr	r1, [r4, #12]
 800af90:	4b06      	ldr	r3, [pc, #24]	@ (800afac <cleanup_stdio+0x3c>)
 800af92:	4299      	cmp	r1, r3
 800af94:	d004      	beq.n	800afa0 <cleanup_stdio+0x30>
 800af96:	4620      	mov	r0, r4
 800af98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af9c:	f002 bf38 	b.w	800de10 <_fflush_r>
 800afa0:	bd10      	pop	{r4, pc}
 800afa2:	bf00      	nop
 800afa4:	20000650 	.word	0x20000650
 800afa8:	200006b8 	.word	0x200006b8
 800afac:	20000720 	.word	0x20000720

0800afb0 <global_stdio_init.part.0>:
 800afb0:	b510      	push	{r4, lr}
 800afb2:	4b0b      	ldr	r3, [pc, #44]	@ (800afe0 <global_stdio_init.part.0+0x30>)
 800afb4:	4c0b      	ldr	r4, [pc, #44]	@ (800afe4 <global_stdio_init.part.0+0x34>)
 800afb6:	4a0c      	ldr	r2, [pc, #48]	@ (800afe8 <global_stdio_init.part.0+0x38>)
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	4620      	mov	r0, r4
 800afbc:	2200      	movs	r2, #0
 800afbe:	2104      	movs	r1, #4
 800afc0:	f7ff ff94 	bl	800aeec <std>
 800afc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afc8:	2201      	movs	r2, #1
 800afca:	2109      	movs	r1, #9
 800afcc:	f7ff ff8e 	bl	800aeec <std>
 800afd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afd4:	2202      	movs	r2, #2
 800afd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afda:	2112      	movs	r1, #18
 800afdc:	f7ff bf86 	b.w	800aeec <std>
 800afe0:	20000788 	.word	0x20000788
 800afe4:	20000650 	.word	0x20000650
 800afe8:	0800af59 	.word	0x0800af59

0800afec <__sfp_lock_acquire>:
 800afec:	4801      	ldr	r0, [pc, #4]	@ (800aff4 <__sfp_lock_acquire+0x8>)
 800afee:	f000 b9c2 	b.w	800b376 <__retarget_lock_acquire_recursive>
 800aff2:	bf00      	nop
 800aff4:	20000791 	.word	0x20000791

0800aff8 <__sfp_lock_release>:
 800aff8:	4801      	ldr	r0, [pc, #4]	@ (800b000 <__sfp_lock_release+0x8>)
 800affa:	f000 b9bd 	b.w	800b378 <__retarget_lock_release_recursive>
 800affe:	bf00      	nop
 800b000:	20000791 	.word	0x20000791

0800b004 <__sinit>:
 800b004:	b510      	push	{r4, lr}
 800b006:	4604      	mov	r4, r0
 800b008:	f7ff fff0 	bl	800afec <__sfp_lock_acquire>
 800b00c:	6a23      	ldr	r3, [r4, #32]
 800b00e:	b11b      	cbz	r3, 800b018 <__sinit+0x14>
 800b010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b014:	f7ff bff0 	b.w	800aff8 <__sfp_lock_release>
 800b018:	4b04      	ldr	r3, [pc, #16]	@ (800b02c <__sinit+0x28>)
 800b01a:	6223      	str	r3, [r4, #32]
 800b01c:	4b04      	ldr	r3, [pc, #16]	@ (800b030 <__sinit+0x2c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1f5      	bne.n	800b010 <__sinit+0xc>
 800b024:	f7ff ffc4 	bl	800afb0 <global_stdio_init.part.0>
 800b028:	e7f2      	b.n	800b010 <__sinit+0xc>
 800b02a:	bf00      	nop
 800b02c:	0800af71 	.word	0x0800af71
 800b030:	20000788 	.word	0x20000788

0800b034 <_fwalk_sglue>:
 800b034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b038:	4607      	mov	r7, r0
 800b03a:	4688      	mov	r8, r1
 800b03c:	4614      	mov	r4, r2
 800b03e:	2600      	movs	r6, #0
 800b040:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b044:	f1b9 0901 	subs.w	r9, r9, #1
 800b048:	d505      	bpl.n	800b056 <_fwalk_sglue+0x22>
 800b04a:	6824      	ldr	r4, [r4, #0]
 800b04c:	2c00      	cmp	r4, #0
 800b04e:	d1f7      	bne.n	800b040 <_fwalk_sglue+0xc>
 800b050:	4630      	mov	r0, r6
 800b052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d907      	bls.n	800b06c <_fwalk_sglue+0x38>
 800b05c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b060:	3301      	adds	r3, #1
 800b062:	d003      	beq.n	800b06c <_fwalk_sglue+0x38>
 800b064:	4629      	mov	r1, r5
 800b066:	4638      	mov	r0, r7
 800b068:	47c0      	blx	r8
 800b06a:	4306      	orrs	r6, r0
 800b06c:	3568      	adds	r5, #104	@ 0x68
 800b06e:	e7e9      	b.n	800b044 <_fwalk_sglue+0x10>

0800b070 <iprintf>:
 800b070:	b40f      	push	{r0, r1, r2, r3}
 800b072:	b507      	push	{r0, r1, r2, lr}
 800b074:	4906      	ldr	r1, [pc, #24]	@ (800b090 <iprintf+0x20>)
 800b076:	ab04      	add	r3, sp, #16
 800b078:	6808      	ldr	r0, [r1, #0]
 800b07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07e:	6881      	ldr	r1, [r0, #8]
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	f002 fd29 	bl	800dad8 <_vfiprintf_r>
 800b086:	b003      	add	sp, #12
 800b088:	f85d eb04 	ldr.w	lr, [sp], #4
 800b08c:	b004      	add	sp, #16
 800b08e:	4770      	bx	lr
 800b090:	200000d4 	.word	0x200000d4

0800b094 <sniprintf>:
 800b094:	b40c      	push	{r2, r3}
 800b096:	b530      	push	{r4, r5, lr}
 800b098:	4b17      	ldr	r3, [pc, #92]	@ (800b0f8 <sniprintf+0x64>)
 800b09a:	1e0c      	subs	r4, r1, #0
 800b09c:	681d      	ldr	r5, [r3, #0]
 800b09e:	b09d      	sub	sp, #116	@ 0x74
 800b0a0:	da08      	bge.n	800b0b4 <sniprintf+0x20>
 800b0a2:	238b      	movs	r3, #139	@ 0x8b
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0aa:	b01d      	add	sp, #116	@ 0x74
 800b0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0b0:	b002      	add	sp, #8
 800b0b2:	4770      	bx	lr
 800b0b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0bc:	bf14      	ite	ne
 800b0be:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0c2:	4623      	moveq	r3, r4
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	9006      	str	r0, [sp, #24]
 800b0d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b0d6:	ab21      	add	r3, sp, #132	@ 0x84
 800b0d8:	a902      	add	r1, sp, #8
 800b0da:	4628      	mov	r0, r5
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	f002 fbd5 	bl	800d88c <_svfiprintf_r>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	bfbc      	itt	lt
 800b0e6:	238b      	movlt	r3, #139	@ 0x8b
 800b0e8:	602b      	strlt	r3, [r5, #0]
 800b0ea:	2c00      	cmp	r4, #0
 800b0ec:	d0dd      	beq.n	800b0aa <sniprintf+0x16>
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	e7d9      	b.n	800b0aa <sniprintf+0x16>
 800b0f6:	bf00      	nop
 800b0f8:	200000d4 	.word	0x200000d4

0800b0fc <siprintf>:
 800b0fc:	b40e      	push	{r1, r2, r3}
 800b0fe:	b500      	push	{lr}
 800b100:	b09c      	sub	sp, #112	@ 0x70
 800b102:	ab1d      	add	r3, sp, #116	@ 0x74
 800b104:	9002      	str	r0, [sp, #8]
 800b106:	9006      	str	r0, [sp, #24]
 800b108:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b10c:	4809      	ldr	r0, [pc, #36]	@ (800b134 <siprintf+0x38>)
 800b10e:	9107      	str	r1, [sp, #28]
 800b110:	9104      	str	r1, [sp, #16]
 800b112:	4909      	ldr	r1, [pc, #36]	@ (800b138 <siprintf+0x3c>)
 800b114:	f853 2b04 	ldr.w	r2, [r3], #4
 800b118:	9105      	str	r1, [sp, #20]
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	a902      	add	r1, sp, #8
 800b120:	f002 fbb4 	bl	800d88c <_svfiprintf_r>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	2200      	movs	r2, #0
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	b01c      	add	sp, #112	@ 0x70
 800b12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b130:	b003      	add	sp, #12
 800b132:	4770      	bx	lr
 800b134:	200000d4 	.word	0x200000d4
 800b138:	ffff0208 	.word	0xffff0208

0800b13c <__sread>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	460c      	mov	r4, r1
 800b140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b144:	f000 f8c8 	bl	800b2d8 <_read_r>
 800b148:	2800      	cmp	r0, #0
 800b14a:	bfab      	itete	ge
 800b14c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b14e:	89a3      	ldrhlt	r3, [r4, #12]
 800b150:	181b      	addge	r3, r3, r0
 800b152:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b156:	bfac      	ite	ge
 800b158:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b15a:	81a3      	strhlt	r3, [r4, #12]
 800b15c:	bd10      	pop	{r4, pc}

0800b15e <__swrite>:
 800b15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b162:	461f      	mov	r7, r3
 800b164:	898b      	ldrh	r3, [r1, #12]
 800b166:	05db      	lsls	r3, r3, #23
 800b168:	4605      	mov	r5, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4616      	mov	r6, r2
 800b16e:	d505      	bpl.n	800b17c <__swrite+0x1e>
 800b170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b174:	2302      	movs	r3, #2
 800b176:	2200      	movs	r2, #0
 800b178:	f000 f89c 	bl	800b2b4 <_lseek_r>
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	4632      	mov	r2, r6
 800b18a:	463b      	mov	r3, r7
 800b18c:	4628      	mov	r0, r5
 800b18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b192:	f000 b8b3 	b.w	800b2fc <_write_r>

0800b196 <__sseek>:
 800b196:	b510      	push	{r4, lr}
 800b198:	460c      	mov	r4, r1
 800b19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b19e:	f000 f889 	bl	800b2b4 <_lseek_r>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	bf15      	itete	ne
 800b1a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1b2:	81a3      	strheq	r3, [r4, #12]
 800b1b4:	bf18      	it	ne
 800b1b6:	81a3      	strhne	r3, [r4, #12]
 800b1b8:	bd10      	pop	{r4, pc}

0800b1ba <__sclose>:
 800b1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1be:	f000 b869 	b.w	800b294 <_close_r>

0800b1c2 <memset>:
 800b1c2:	4402      	add	r2, r0
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d100      	bne.n	800b1cc <memset+0xa>
 800b1ca:	4770      	bx	lr
 800b1cc:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d0:	e7f9      	b.n	800b1c6 <memset+0x4>
	...

0800b1d4 <strtok>:
 800b1d4:	4b16      	ldr	r3, [pc, #88]	@ (800b230 <strtok+0x5c>)
 800b1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	681f      	ldr	r7, [r3, #0]
 800b1dc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b1de:	4605      	mov	r5, r0
 800b1e0:	460e      	mov	r6, r1
 800b1e2:	b9ec      	cbnz	r4, 800b220 <strtok+0x4c>
 800b1e4:	2050      	movs	r0, #80	@ 0x50
 800b1e6:	f000 ff85 	bl	800c0f4 <malloc>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	6478      	str	r0, [r7, #68]	@ 0x44
 800b1ee:	b920      	cbnz	r0, 800b1fa <strtok+0x26>
 800b1f0:	4b10      	ldr	r3, [pc, #64]	@ (800b234 <strtok+0x60>)
 800b1f2:	4811      	ldr	r0, [pc, #68]	@ (800b238 <strtok+0x64>)
 800b1f4:	215b      	movs	r1, #91	@ 0x5b
 800b1f6:	f000 f8c7 	bl	800b388 <__assert_func>
 800b1fa:	e9c0 4400 	strd	r4, r4, [r0]
 800b1fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b202:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b206:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b20a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b20e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b212:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b216:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b21a:	6184      	str	r4, [r0, #24]
 800b21c:	7704      	strb	r4, [r0, #28]
 800b21e:	6244      	str	r4, [r0, #36]	@ 0x24
 800b220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	2301      	movs	r3, #1
 800b228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b22c:	f000 b806 	b.w	800b23c <__strtok_r>
 800b230:	200000d4 	.word	0x200000d4
 800b234:	0800ec1e 	.word	0x0800ec1e
 800b238:	0800ec35 	.word	0x0800ec35

0800b23c <__strtok_r>:
 800b23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b23e:	4604      	mov	r4, r0
 800b240:	b908      	cbnz	r0, 800b246 <__strtok_r+0xa>
 800b242:	6814      	ldr	r4, [r2, #0]
 800b244:	b144      	cbz	r4, 800b258 <__strtok_r+0x1c>
 800b246:	4620      	mov	r0, r4
 800b248:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b24c:	460f      	mov	r7, r1
 800b24e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b252:	b91e      	cbnz	r6, 800b25c <__strtok_r+0x20>
 800b254:	b965      	cbnz	r5, 800b270 <__strtok_r+0x34>
 800b256:	6015      	str	r5, [r2, #0]
 800b258:	2000      	movs	r0, #0
 800b25a:	e005      	b.n	800b268 <__strtok_r+0x2c>
 800b25c:	42b5      	cmp	r5, r6
 800b25e:	d1f6      	bne.n	800b24e <__strtok_r+0x12>
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1f0      	bne.n	800b246 <__strtok_r+0xa>
 800b264:	6014      	str	r4, [r2, #0]
 800b266:	7003      	strb	r3, [r0, #0]
 800b268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26a:	461c      	mov	r4, r3
 800b26c:	e00c      	b.n	800b288 <__strtok_r+0x4c>
 800b26e:	b915      	cbnz	r5, 800b276 <__strtok_r+0x3a>
 800b270:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b274:	460e      	mov	r6, r1
 800b276:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b27a:	42ab      	cmp	r3, r5
 800b27c:	d1f7      	bne.n	800b26e <__strtok_r+0x32>
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0f3      	beq.n	800b26a <__strtok_r+0x2e>
 800b282:	2300      	movs	r3, #0
 800b284:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b288:	6014      	str	r4, [r2, #0]
 800b28a:	e7ed      	b.n	800b268 <__strtok_r+0x2c>

0800b28c <_localeconv_r>:
 800b28c:	4800      	ldr	r0, [pc, #0]	@ (800b290 <_localeconv_r+0x4>)
 800b28e:	4770      	bx	lr
 800b290:	20000214 	.word	0x20000214

0800b294 <_close_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d06      	ldr	r5, [pc, #24]	@ (800b2b0 <_close_r+0x1c>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	f7f6 fb2c 	bl	80018fc <_close>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_close_r+0x1a>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_close_r+0x1a>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	2000078c 	.word	0x2000078c

0800b2b4 <_lseek_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d07      	ldr	r5, [pc, #28]	@ (800b2d4 <_lseek_r+0x20>)
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	4611      	mov	r1, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	602a      	str	r2, [r5, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f7f6 fb41 	bl	800194a <_lseek>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_lseek_r+0x1e>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_lseek_r+0x1e>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	2000078c 	.word	0x2000078c

0800b2d8 <_read_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d07      	ldr	r5, [pc, #28]	@ (800b2f8 <_read_r+0x20>)
 800b2dc:	4604      	mov	r4, r0
 800b2de:	4608      	mov	r0, r1
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	602a      	str	r2, [r5, #0]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f7f6 facf 	bl	800188a <_read>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_read_r+0x1e>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_read_r+0x1e>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	2000078c 	.word	0x2000078c

0800b2fc <_write_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d07      	ldr	r5, [pc, #28]	@ (800b31c <_write_r+0x20>)
 800b300:	4604      	mov	r4, r0
 800b302:	4608      	mov	r0, r1
 800b304:	4611      	mov	r1, r2
 800b306:	2200      	movs	r2, #0
 800b308:	602a      	str	r2, [r5, #0]
 800b30a:	461a      	mov	r2, r3
 800b30c:	f7f6 fada 	bl	80018c4 <_write>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d102      	bne.n	800b31a <_write_r+0x1e>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	b103      	cbz	r3, 800b31a <_write_r+0x1e>
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	2000078c 	.word	0x2000078c

0800b320 <__errno>:
 800b320:	4b01      	ldr	r3, [pc, #4]	@ (800b328 <__errno+0x8>)
 800b322:	6818      	ldr	r0, [r3, #0]
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	200000d4 	.word	0x200000d4

0800b32c <__libc_init_array>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	4d0d      	ldr	r5, [pc, #52]	@ (800b364 <__libc_init_array+0x38>)
 800b330:	4c0d      	ldr	r4, [pc, #52]	@ (800b368 <__libc_init_array+0x3c>)
 800b332:	1b64      	subs	r4, r4, r5
 800b334:	10a4      	asrs	r4, r4, #2
 800b336:	2600      	movs	r6, #0
 800b338:	42a6      	cmp	r6, r4
 800b33a:	d109      	bne.n	800b350 <__libc_init_array+0x24>
 800b33c:	4d0b      	ldr	r5, [pc, #44]	@ (800b36c <__libc_init_array+0x40>)
 800b33e:	4c0c      	ldr	r4, [pc, #48]	@ (800b370 <__libc_init_array+0x44>)
 800b340:	f003 faf6 	bl	800e930 <_init>
 800b344:	1b64      	subs	r4, r4, r5
 800b346:	10a4      	asrs	r4, r4, #2
 800b348:	2600      	movs	r6, #0
 800b34a:	42a6      	cmp	r6, r4
 800b34c:	d105      	bne.n	800b35a <__libc_init_array+0x2e>
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	f855 3b04 	ldr.w	r3, [r5], #4
 800b354:	4798      	blx	r3
 800b356:	3601      	adds	r6, #1
 800b358:	e7ee      	b.n	800b338 <__libc_init_array+0xc>
 800b35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35e:	4798      	blx	r3
 800b360:	3601      	adds	r6, #1
 800b362:	e7f2      	b.n	800b34a <__libc_init_array+0x1e>
 800b364:	0800ef74 	.word	0x0800ef74
 800b368:	0800ef74 	.word	0x0800ef74
 800b36c:	0800ef74 	.word	0x0800ef74
 800b370:	0800ef78 	.word	0x0800ef78

0800b374 <__retarget_lock_init_recursive>:
 800b374:	4770      	bx	lr

0800b376 <__retarget_lock_acquire_recursive>:
 800b376:	4770      	bx	lr

0800b378 <__retarget_lock_release_recursive>:
 800b378:	4770      	bx	lr
	...

0800b37c <nanf>:
 800b37c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b384 <nanf+0x8>
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	7fc00000 	.word	0x7fc00000

0800b388 <__assert_func>:
 800b388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b38a:	4614      	mov	r4, r2
 800b38c:	461a      	mov	r2, r3
 800b38e:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <__assert_func+0x2c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4605      	mov	r5, r0
 800b394:	68d8      	ldr	r0, [r3, #12]
 800b396:	b954      	cbnz	r4, 800b3ae <__assert_func+0x26>
 800b398:	4b07      	ldr	r3, [pc, #28]	@ (800b3b8 <__assert_func+0x30>)
 800b39a:	461c      	mov	r4, r3
 800b39c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3a0:	9100      	str	r1, [sp, #0]
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	4905      	ldr	r1, [pc, #20]	@ (800b3bc <__assert_func+0x34>)
 800b3a6:	f002 fd5b 	bl	800de60 <fiprintf>
 800b3aa:	f002 fe51 	bl	800e050 <abort>
 800b3ae:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <__assert_func+0x38>)
 800b3b0:	e7f4      	b.n	800b39c <__assert_func+0x14>
 800b3b2:	bf00      	nop
 800b3b4:	200000d4 	.word	0x200000d4
 800b3b8:	0800ecca 	.word	0x0800ecca
 800b3bc:	0800ec9c 	.word	0x0800ec9c
 800b3c0:	0800ec8f 	.word	0x0800ec8f

0800b3c4 <quorem>:
 800b3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	6903      	ldr	r3, [r0, #16]
 800b3ca:	690c      	ldr	r4, [r1, #16]
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	db7e      	blt.n	800b4d0 <quorem+0x10c>
 800b3d2:	3c01      	subs	r4, #1
 800b3d4:	f101 0814 	add.w	r8, r1, #20
 800b3d8:	00a3      	lsls	r3, r4, #2
 800b3da:	f100 0514 	add.w	r5, r0, #20
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3fa:	d32e      	bcc.n	800b45a <quorem+0x96>
 800b3fc:	f04f 0a00 	mov.w	sl, #0
 800b400:	46c4      	mov	ip, r8
 800b402:	46ae      	mov	lr, r5
 800b404:	46d3      	mov	fp, sl
 800b406:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b40a:	b298      	uxth	r0, r3
 800b40c:	fb06 a000 	mla	r0, r6, r0, sl
 800b410:	0c02      	lsrs	r2, r0, #16
 800b412:	0c1b      	lsrs	r3, r3, #16
 800b414:	fb06 2303 	mla	r3, r6, r3, r2
 800b418:	f8de 2000 	ldr.w	r2, [lr]
 800b41c:	b280      	uxth	r0, r0
 800b41e:	b292      	uxth	r2, r2
 800b420:	1a12      	subs	r2, r2, r0
 800b422:	445a      	add	r2, fp
 800b424:	f8de 0000 	ldr.w	r0, [lr]
 800b428:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b432:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b436:	b292      	uxth	r2, r2
 800b438:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b43c:	45e1      	cmp	r9, ip
 800b43e:	f84e 2b04 	str.w	r2, [lr], #4
 800b442:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b446:	d2de      	bcs.n	800b406 <quorem+0x42>
 800b448:	9b00      	ldr	r3, [sp, #0]
 800b44a:	58eb      	ldr	r3, [r5, r3]
 800b44c:	b92b      	cbnz	r3, 800b45a <quorem+0x96>
 800b44e:	9b01      	ldr	r3, [sp, #4]
 800b450:	3b04      	subs	r3, #4
 800b452:	429d      	cmp	r5, r3
 800b454:	461a      	mov	r2, r3
 800b456:	d32f      	bcc.n	800b4b8 <quorem+0xf4>
 800b458:	613c      	str	r4, [r7, #16]
 800b45a:	4638      	mov	r0, r7
 800b45c:	f001 f9c4 	bl	800c7e8 <__mcmp>
 800b460:	2800      	cmp	r0, #0
 800b462:	db25      	blt.n	800b4b0 <quorem+0xec>
 800b464:	4629      	mov	r1, r5
 800b466:	2000      	movs	r0, #0
 800b468:	f858 2b04 	ldr.w	r2, [r8], #4
 800b46c:	f8d1 c000 	ldr.w	ip, [r1]
 800b470:	fa1f fe82 	uxth.w	lr, r2
 800b474:	fa1f f38c 	uxth.w	r3, ip
 800b478:	eba3 030e 	sub.w	r3, r3, lr
 800b47c:	4403      	add	r3, r0
 800b47e:	0c12      	lsrs	r2, r2, #16
 800b480:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b484:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b488:	b29b      	uxth	r3, r3
 800b48a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b48e:	45c1      	cmp	r9, r8
 800b490:	f841 3b04 	str.w	r3, [r1], #4
 800b494:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b498:	d2e6      	bcs.n	800b468 <quorem+0xa4>
 800b49a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b49e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4a2:	b922      	cbnz	r2, 800b4ae <quorem+0xea>
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	429d      	cmp	r5, r3
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	d30b      	bcc.n	800b4c4 <quorem+0x100>
 800b4ac:	613c      	str	r4, [r7, #16]
 800b4ae:	3601      	adds	r6, #1
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	b003      	add	sp, #12
 800b4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b8:	6812      	ldr	r2, [r2, #0]
 800b4ba:	3b04      	subs	r3, #4
 800b4bc:	2a00      	cmp	r2, #0
 800b4be:	d1cb      	bne.n	800b458 <quorem+0x94>
 800b4c0:	3c01      	subs	r4, #1
 800b4c2:	e7c6      	b.n	800b452 <quorem+0x8e>
 800b4c4:	6812      	ldr	r2, [r2, #0]
 800b4c6:	3b04      	subs	r3, #4
 800b4c8:	2a00      	cmp	r2, #0
 800b4ca:	d1ef      	bne.n	800b4ac <quorem+0xe8>
 800b4cc:	3c01      	subs	r4, #1
 800b4ce:	e7ea      	b.n	800b4a6 <quorem+0xe2>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	e7ee      	b.n	800b4b2 <quorem+0xee>
 800b4d4:	0000      	movs	r0, r0
	...

0800b4d8 <_dtoa_r>:
 800b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4dc:	69c7      	ldr	r7, [r0, #28]
 800b4de:	b099      	sub	sp, #100	@ 0x64
 800b4e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b4e4:	ec55 4b10 	vmov	r4, r5, d0
 800b4e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b4ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4ec:	4683      	mov	fp, r0
 800b4ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4f2:	b97f      	cbnz	r7, 800b514 <_dtoa_r+0x3c>
 800b4f4:	2010      	movs	r0, #16
 800b4f6:	f000 fdfd 	bl	800c0f4 <malloc>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b500:	b920      	cbnz	r0, 800b50c <_dtoa_r+0x34>
 800b502:	4ba7      	ldr	r3, [pc, #668]	@ (800b7a0 <_dtoa_r+0x2c8>)
 800b504:	21ef      	movs	r1, #239	@ 0xef
 800b506:	48a7      	ldr	r0, [pc, #668]	@ (800b7a4 <_dtoa_r+0x2cc>)
 800b508:	f7ff ff3e 	bl	800b388 <__assert_func>
 800b50c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b510:	6007      	str	r7, [r0, #0]
 800b512:	60c7      	str	r7, [r0, #12]
 800b514:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b518:	6819      	ldr	r1, [r3, #0]
 800b51a:	b159      	cbz	r1, 800b534 <_dtoa_r+0x5c>
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	604a      	str	r2, [r1, #4]
 800b520:	2301      	movs	r3, #1
 800b522:	4093      	lsls	r3, r2
 800b524:	608b      	str	r3, [r1, #8]
 800b526:	4658      	mov	r0, fp
 800b528:	f000 feda 	bl	800c2e0 <_Bfree>
 800b52c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b530:	2200      	movs	r2, #0
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	1e2b      	subs	r3, r5, #0
 800b536:	bfb9      	ittee	lt
 800b538:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b53c:	9303      	strlt	r3, [sp, #12]
 800b53e:	2300      	movge	r3, #0
 800b540:	6033      	strge	r3, [r6, #0]
 800b542:	9f03      	ldr	r7, [sp, #12]
 800b544:	4b98      	ldr	r3, [pc, #608]	@ (800b7a8 <_dtoa_r+0x2d0>)
 800b546:	bfbc      	itt	lt
 800b548:	2201      	movlt	r2, #1
 800b54a:	6032      	strlt	r2, [r6, #0]
 800b54c:	43bb      	bics	r3, r7
 800b54e:	d112      	bne.n	800b576 <_dtoa_r+0x9e>
 800b550:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b552:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b556:	6013      	str	r3, [r2, #0]
 800b558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b55c:	4323      	orrs	r3, r4
 800b55e:	f000 854d 	beq.w	800bffc <_dtoa_r+0xb24>
 800b562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b564:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b7bc <_dtoa_r+0x2e4>
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 854f 	beq.w	800c00c <_dtoa_r+0xb34>
 800b56e:	f10a 0303 	add.w	r3, sl, #3
 800b572:	f000 bd49 	b.w	800c008 <_dtoa_r+0xb30>
 800b576:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b57a:	2200      	movs	r2, #0
 800b57c:	ec51 0b17 	vmov	r0, r1, d7
 800b580:	2300      	movs	r3, #0
 800b582:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b586:	f7f5 fad7 	bl	8000b38 <__aeabi_dcmpeq>
 800b58a:	4680      	mov	r8, r0
 800b58c:	b158      	cbz	r0, 800b5a6 <_dtoa_r+0xce>
 800b58e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b590:	2301      	movs	r3, #1
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b596:	b113      	cbz	r3, 800b59e <_dtoa_r+0xc6>
 800b598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b59a:	4b84      	ldr	r3, [pc, #528]	@ (800b7ac <_dtoa_r+0x2d4>)
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b7c0 <_dtoa_r+0x2e8>
 800b5a2:	f000 bd33 	b.w	800c00c <_dtoa_r+0xb34>
 800b5a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b5aa:	aa16      	add	r2, sp, #88	@ 0x58
 800b5ac:	a917      	add	r1, sp, #92	@ 0x5c
 800b5ae:	4658      	mov	r0, fp
 800b5b0:	f001 fa3a 	bl	800ca28 <__d2b>
 800b5b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b5b8:	4681      	mov	r9, r0
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	d077      	beq.n	800b6ae <_dtoa_r+0x1d6>
 800b5be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b5d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b5d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b5d8:	4619      	mov	r1, r3
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4b74      	ldr	r3, [pc, #464]	@ (800b7b0 <_dtoa_r+0x2d8>)
 800b5de:	f7f4 fe8b 	bl	80002f8 <__aeabi_dsub>
 800b5e2:	a369      	add	r3, pc, #420	@ (adr r3, 800b788 <_dtoa_r+0x2b0>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f7f5 f83e 	bl	8000668 <__aeabi_dmul>
 800b5ec:	a368      	add	r3, pc, #416	@ (adr r3, 800b790 <_dtoa_r+0x2b8>)
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f7f4 fe83 	bl	80002fc <__adddf3>
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	460d      	mov	r5, r1
 800b5fc:	f7f4 ffca 	bl	8000594 <__aeabi_i2d>
 800b600:	a365      	add	r3, pc, #404	@ (adr r3, 800b798 <_dtoa_r+0x2c0>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f5 f82f 	bl	8000668 <__aeabi_dmul>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f4 fe73 	bl	80002fc <__adddf3>
 800b616:	4604      	mov	r4, r0
 800b618:	460d      	mov	r5, r1
 800b61a:	f7f5 fad5 	bl	8000bc8 <__aeabi_d2iz>
 800b61e:	2200      	movs	r2, #0
 800b620:	4607      	mov	r7, r0
 800b622:	2300      	movs	r3, #0
 800b624:	4620      	mov	r0, r4
 800b626:	4629      	mov	r1, r5
 800b628:	f7f5 fa90 	bl	8000b4c <__aeabi_dcmplt>
 800b62c:	b140      	cbz	r0, 800b640 <_dtoa_r+0x168>
 800b62e:	4638      	mov	r0, r7
 800b630:	f7f4 ffb0 	bl	8000594 <__aeabi_i2d>
 800b634:	4622      	mov	r2, r4
 800b636:	462b      	mov	r3, r5
 800b638:	f7f5 fa7e 	bl	8000b38 <__aeabi_dcmpeq>
 800b63c:	b900      	cbnz	r0, 800b640 <_dtoa_r+0x168>
 800b63e:	3f01      	subs	r7, #1
 800b640:	2f16      	cmp	r7, #22
 800b642:	d851      	bhi.n	800b6e8 <_dtoa_r+0x210>
 800b644:	4b5b      	ldr	r3, [pc, #364]	@ (800b7b4 <_dtoa_r+0x2dc>)
 800b646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b652:	f7f5 fa7b 	bl	8000b4c <__aeabi_dcmplt>
 800b656:	2800      	cmp	r0, #0
 800b658:	d048      	beq.n	800b6ec <_dtoa_r+0x214>
 800b65a:	3f01      	subs	r7, #1
 800b65c:	2300      	movs	r3, #0
 800b65e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b660:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b662:	1b9b      	subs	r3, r3, r6
 800b664:	1e5a      	subs	r2, r3, #1
 800b666:	bf44      	itt	mi
 800b668:	f1c3 0801 	rsbmi	r8, r3, #1
 800b66c:	2300      	movmi	r3, #0
 800b66e:	9208      	str	r2, [sp, #32]
 800b670:	bf54      	ite	pl
 800b672:	f04f 0800 	movpl.w	r8, #0
 800b676:	9308      	strmi	r3, [sp, #32]
 800b678:	2f00      	cmp	r7, #0
 800b67a:	db39      	blt.n	800b6f0 <_dtoa_r+0x218>
 800b67c:	9b08      	ldr	r3, [sp, #32]
 800b67e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b680:	443b      	add	r3, r7
 800b682:	9308      	str	r3, [sp, #32]
 800b684:	2300      	movs	r3, #0
 800b686:	930a      	str	r3, [sp, #40]	@ 0x28
 800b688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	d864      	bhi.n	800b758 <_dtoa_r+0x280>
 800b68e:	2b05      	cmp	r3, #5
 800b690:	bfc4      	itt	gt
 800b692:	3b04      	subgt	r3, #4
 800b694:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b698:	f1a3 0302 	sub.w	r3, r3, #2
 800b69c:	bfcc      	ite	gt
 800b69e:	2400      	movgt	r4, #0
 800b6a0:	2401      	movle	r4, #1
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d863      	bhi.n	800b76e <_dtoa_r+0x296>
 800b6a6:	e8df f003 	tbb	[pc, r3]
 800b6aa:	372a      	.short	0x372a
 800b6ac:	5535      	.short	0x5535
 800b6ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b6b2:	441e      	add	r6, r3
 800b6b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b6b8:	2b20      	cmp	r3, #32
 800b6ba:	bfc1      	itttt	gt
 800b6bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b6c0:	409f      	lslgt	r7, r3
 800b6c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b6c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b6ca:	bfd6      	itet	le
 800b6cc:	f1c3 0320 	rsble	r3, r3, #32
 800b6d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b6d4:	fa04 f003 	lslle.w	r0, r4, r3
 800b6d8:	f7f4 ff4c 	bl	8000574 <__aeabi_ui2d>
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b6e2:	3e01      	subs	r6, #1
 800b6e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b6e6:	e777      	b.n	800b5d8 <_dtoa_r+0x100>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e7b8      	b.n	800b65e <_dtoa_r+0x186>
 800b6ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800b6ee:	e7b7      	b.n	800b660 <_dtoa_r+0x188>
 800b6f0:	427b      	negs	r3, r7
 800b6f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	eba8 0807 	sub.w	r8, r8, r7
 800b6fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6fc:	e7c4      	b.n	800b688 <_dtoa_r+0x1b0>
 800b6fe:	2300      	movs	r3, #0
 800b700:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b704:	2b00      	cmp	r3, #0
 800b706:	dc35      	bgt.n	800b774 <_dtoa_r+0x29c>
 800b708:	2301      	movs	r3, #1
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	9307      	str	r3, [sp, #28]
 800b70e:	461a      	mov	r2, r3
 800b710:	920e      	str	r2, [sp, #56]	@ 0x38
 800b712:	e00b      	b.n	800b72c <_dtoa_r+0x254>
 800b714:	2301      	movs	r3, #1
 800b716:	e7f3      	b.n	800b700 <_dtoa_r+0x228>
 800b718:	2300      	movs	r3, #0
 800b71a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b71c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b71e:	18fb      	adds	r3, r7, r3
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	3301      	adds	r3, #1
 800b724:	2b01      	cmp	r3, #1
 800b726:	9307      	str	r3, [sp, #28]
 800b728:	bfb8      	it	lt
 800b72a:	2301      	movlt	r3, #1
 800b72c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b730:	2100      	movs	r1, #0
 800b732:	2204      	movs	r2, #4
 800b734:	f102 0514 	add.w	r5, r2, #20
 800b738:	429d      	cmp	r5, r3
 800b73a:	d91f      	bls.n	800b77c <_dtoa_r+0x2a4>
 800b73c:	6041      	str	r1, [r0, #4]
 800b73e:	4658      	mov	r0, fp
 800b740:	f000 fd8e 	bl	800c260 <_Balloc>
 800b744:	4682      	mov	sl, r0
 800b746:	2800      	cmp	r0, #0
 800b748:	d13c      	bne.n	800b7c4 <_dtoa_r+0x2ec>
 800b74a:	4b1b      	ldr	r3, [pc, #108]	@ (800b7b8 <_dtoa_r+0x2e0>)
 800b74c:	4602      	mov	r2, r0
 800b74e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b752:	e6d8      	b.n	800b506 <_dtoa_r+0x2e>
 800b754:	2301      	movs	r3, #1
 800b756:	e7e0      	b.n	800b71a <_dtoa_r+0x242>
 800b758:	2401      	movs	r4, #1
 800b75a:	2300      	movs	r3, #0
 800b75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b75e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b760:	f04f 33ff 	mov.w	r3, #4294967295
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	9307      	str	r3, [sp, #28]
 800b768:	2200      	movs	r2, #0
 800b76a:	2312      	movs	r3, #18
 800b76c:	e7d0      	b.n	800b710 <_dtoa_r+0x238>
 800b76e:	2301      	movs	r3, #1
 800b770:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b772:	e7f5      	b.n	800b760 <_dtoa_r+0x288>
 800b774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	9307      	str	r3, [sp, #28]
 800b77a:	e7d7      	b.n	800b72c <_dtoa_r+0x254>
 800b77c:	3101      	adds	r1, #1
 800b77e:	0052      	lsls	r2, r2, #1
 800b780:	e7d8      	b.n	800b734 <_dtoa_r+0x25c>
 800b782:	bf00      	nop
 800b784:	f3af 8000 	nop.w
 800b788:	636f4361 	.word	0x636f4361
 800b78c:	3fd287a7 	.word	0x3fd287a7
 800b790:	8b60c8b3 	.word	0x8b60c8b3
 800b794:	3fc68a28 	.word	0x3fc68a28
 800b798:	509f79fb 	.word	0x509f79fb
 800b79c:	3fd34413 	.word	0x3fd34413
 800b7a0:	0800ec1e 	.word	0x0800ec1e
 800b7a4:	0800ecd8 	.word	0x0800ecd8
 800b7a8:	7ff00000 	.word	0x7ff00000
 800b7ac:	0800ebf6 	.word	0x0800ebf6
 800b7b0:	3ff80000 	.word	0x3ff80000
 800b7b4:	0800edd0 	.word	0x0800edd0
 800b7b8:	0800ed30 	.word	0x0800ed30
 800b7bc:	0800ecd4 	.word	0x0800ecd4
 800b7c0:	0800ebf5 	.word	0x0800ebf5
 800b7c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7c8:	6018      	str	r0, [r3, #0]
 800b7ca:	9b07      	ldr	r3, [sp, #28]
 800b7cc:	2b0e      	cmp	r3, #14
 800b7ce:	f200 80a4 	bhi.w	800b91a <_dtoa_r+0x442>
 800b7d2:	2c00      	cmp	r4, #0
 800b7d4:	f000 80a1 	beq.w	800b91a <_dtoa_r+0x442>
 800b7d8:	2f00      	cmp	r7, #0
 800b7da:	dd33      	ble.n	800b844 <_dtoa_r+0x36c>
 800b7dc:	4bad      	ldr	r3, [pc, #692]	@ (800ba94 <_dtoa_r+0x5bc>)
 800b7de:	f007 020f 	and.w	r2, r7, #15
 800b7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7e6:	ed93 7b00 	vldr	d7, [r3]
 800b7ea:	05f8      	lsls	r0, r7, #23
 800b7ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b7f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b7f4:	d516      	bpl.n	800b824 <_dtoa_r+0x34c>
 800b7f6:	4ba8      	ldr	r3, [pc, #672]	@ (800ba98 <_dtoa_r+0x5c0>)
 800b7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b800:	f7f5 f85c 	bl	80008bc <__aeabi_ddiv>
 800b804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b808:	f004 040f 	and.w	r4, r4, #15
 800b80c:	2603      	movs	r6, #3
 800b80e:	4da2      	ldr	r5, [pc, #648]	@ (800ba98 <_dtoa_r+0x5c0>)
 800b810:	b954      	cbnz	r4, 800b828 <_dtoa_r+0x350>
 800b812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b81a:	f7f5 f84f 	bl	80008bc <__aeabi_ddiv>
 800b81e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b822:	e028      	b.n	800b876 <_dtoa_r+0x39e>
 800b824:	2602      	movs	r6, #2
 800b826:	e7f2      	b.n	800b80e <_dtoa_r+0x336>
 800b828:	07e1      	lsls	r1, r4, #31
 800b82a:	d508      	bpl.n	800b83e <_dtoa_r+0x366>
 800b82c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b830:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b834:	f7f4 ff18 	bl	8000668 <__aeabi_dmul>
 800b838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b83c:	3601      	adds	r6, #1
 800b83e:	1064      	asrs	r4, r4, #1
 800b840:	3508      	adds	r5, #8
 800b842:	e7e5      	b.n	800b810 <_dtoa_r+0x338>
 800b844:	f000 80d2 	beq.w	800b9ec <_dtoa_r+0x514>
 800b848:	427c      	negs	r4, r7
 800b84a:	4b92      	ldr	r3, [pc, #584]	@ (800ba94 <_dtoa_r+0x5bc>)
 800b84c:	4d92      	ldr	r5, [pc, #584]	@ (800ba98 <_dtoa_r+0x5c0>)
 800b84e:	f004 020f 	and.w	r2, r4, #15
 800b852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b85e:	f7f4 ff03 	bl	8000668 <__aeabi_dmul>
 800b862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b866:	1124      	asrs	r4, r4, #4
 800b868:	2300      	movs	r3, #0
 800b86a:	2602      	movs	r6, #2
 800b86c:	2c00      	cmp	r4, #0
 800b86e:	f040 80b2 	bne.w	800b9d6 <_dtoa_r+0x4fe>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1d3      	bne.n	800b81e <_dtoa_r+0x346>
 800b876:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b878:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80b7 	beq.w	800b9f0 <_dtoa_r+0x518>
 800b882:	4b86      	ldr	r3, [pc, #536]	@ (800ba9c <_dtoa_r+0x5c4>)
 800b884:	2200      	movs	r2, #0
 800b886:	4620      	mov	r0, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	f7f5 f95f 	bl	8000b4c <__aeabi_dcmplt>
 800b88e:	2800      	cmp	r0, #0
 800b890:	f000 80ae 	beq.w	800b9f0 <_dtoa_r+0x518>
 800b894:	9b07      	ldr	r3, [sp, #28]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 80aa 	beq.w	800b9f0 <_dtoa_r+0x518>
 800b89c:	9b00      	ldr	r3, [sp, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd37      	ble.n	800b912 <_dtoa_r+0x43a>
 800b8a2:	1e7b      	subs	r3, r7, #1
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4b7d      	ldr	r3, [pc, #500]	@ (800baa0 <_dtoa_r+0x5c8>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7f4 fedb 	bl	8000668 <__aeabi_dmul>
 800b8b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b6:	9c00      	ldr	r4, [sp, #0]
 800b8b8:	3601      	adds	r6, #1
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7f4 fe6a 	bl	8000594 <__aeabi_i2d>
 800b8c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8c4:	f7f4 fed0 	bl	8000668 <__aeabi_dmul>
 800b8c8:	4b76      	ldr	r3, [pc, #472]	@ (800baa4 <_dtoa_r+0x5cc>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f7f4 fd16 	bl	80002fc <__adddf3>
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b8d6:	2c00      	cmp	r4, #0
 800b8d8:	f040 808d 	bne.w	800b9f6 <_dtoa_r+0x51e>
 800b8dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e0:	4b71      	ldr	r3, [pc, #452]	@ (800baa8 <_dtoa_r+0x5d0>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f7f4 fd08 	bl	80002f8 <__aeabi_dsub>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4633      	mov	r3, r6
 800b8f4:	f7f5 f948 	bl	8000b88 <__aeabi_dcmpgt>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f040 828b 	bne.w	800be14 <_dtoa_r+0x93c>
 800b8fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b902:	462a      	mov	r2, r5
 800b904:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b908:	f7f5 f920 	bl	8000b4c <__aeabi_dcmplt>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	f040 8128 	bne.w	800bb62 <_dtoa_r+0x68a>
 800b912:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b91a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f2c0 815a 	blt.w	800bbd6 <_dtoa_r+0x6fe>
 800b922:	2f0e      	cmp	r7, #14
 800b924:	f300 8157 	bgt.w	800bbd6 <_dtoa_r+0x6fe>
 800b928:	4b5a      	ldr	r3, [pc, #360]	@ (800ba94 <_dtoa_r+0x5bc>)
 800b92a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b92e:	ed93 7b00 	vldr	d7, [r3]
 800b932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b934:	2b00      	cmp	r3, #0
 800b936:	ed8d 7b00 	vstr	d7, [sp]
 800b93a:	da03      	bge.n	800b944 <_dtoa_r+0x46c>
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f340 8101 	ble.w	800bb46 <_dtoa_r+0x66e>
 800b944:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b948:	4656      	mov	r6, sl
 800b94a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b94e:	4620      	mov	r0, r4
 800b950:	4629      	mov	r1, r5
 800b952:	f7f4 ffb3 	bl	80008bc <__aeabi_ddiv>
 800b956:	f7f5 f937 	bl	8000bc8 <__aeabi_d2iz>
 800b95a:	4680      	mov	r8, r0
 800b95c:	f7f4 fe1a 	bl	8000594 <__aeabi_i2d>
 800b960:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b964:	f7f4 fe80 	bl	8000668 <__aeabi_dmul>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4620      	mov	r0, r4
 800b96e:	4629      	mov	r1, r5
 800b970:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b974:	f7f4 fcc0 	bl	80002f8 <__aeabi_dsub>
 800b978:	f806 4b01 	strb.w	r4, [r6], #1
 800b97c:	9d07      	ldr	r5, [sp, #28]
 800b97e:	eba6 040a 	sub.w	r4, r6, sl
 800b982:	42a5      	cmp	r5, r4
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	f040 8117 	bne.w	800bbba <_dtoa_r+0x6e2>
 800b98c:	f7f4 fcb6 	bl	80002fc <__adddf3>
 800b990:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b994:	4604      	mov	r4, r0
 800b996:	460d      	mov	r5, r1
 800b998:	f7f5 f8f6 	bl	8000b88 <__aeabi_dcmpgt>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	f040 80f9 	bne.w	800bb94 <_dtoa_r+0x6bc>
 800b9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	f7f5 f8c5 	bl	8000b38 <__aeabi_dcmpeq>
 800b9ae:	b118      	cbz	r0, 800b9b8 <_dtoa_r+0x4e0>
 800b9b0:	f018 0f01 	tst.w	r8, #1
 800b9b4:	f040 80ee 	bne.w	800bb94 <_dtoa_r+0x6bc>
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	4658      	mov	r0, fp
 800b9bc:	f000 fc90 	bl	800c2e0 <_Bfree>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	7033      	strb	r3, [r6, #0]
 800b9c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9c6:	3701      	adds	r7, #1
 800b9c8:	601f      	str	r7, [r3, #0]
 800b9ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 831d 	beq.w	800c00c <_dtoa_r+0xb34>
 800b9d2:	601e      	str	r6, [r3, #0]
 800b9d4:	e31a      	b.n	800c00c <_dtoa_r+0xb34>
 800b9d6:	07e2      	lsls	r2, r4, #31
 800b9d8:	d505      	bpl.n	800b9e6 <_dtoa_r+0x50e>
 800b9da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9de:	f7f4 fe43 	bl	8000668 <__aeabi_dmul>
 800b9e2:	3601      	adds	r6, #1
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	1064      	asrs	r4, r4, #1
 800b9e8:	3508      	adds	r5, #8
 800b9ea:	e73f      	b.n	800b86c <_dtoa_r+0x394>
 800b9ec:	2602      	movs	r6, #2
 800b9ee:	e742      	b.n	800b876 <_dtoa_r+0x39e>
 800b9f0:	9c07      	ldr	r4, [sp, #28]
 800b9f2:	9704      	str	r7, [sp, #16]
 800b9f4:	e761      	b.n	800b8ba <_dtoa_r+0x3e2>
 800b9f6:	4b27      	ldr	r3, [pc, #156]	@ (800ba94 <_dtoa_r+0x5bc>)
 800b9f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba02:	4454      	add	r4, sl
 800ba04:	2900      	cmp	r1, #0
 800ba06:	d053      	beq.n	800bab0 <_dtoa_r+0x5d8>
 800ba08:	4928      	ldr	r1, [pc, #160]	@ (800baac <_dtoa_r+0x5d4>)
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	f7f4 ff56 	bl	80008bc <__aeabi_ddiv>
 800ba10:	4633      	mov	r3, r6
 800ba12:	462a      	mov	r2, r5
 800ba14:	f7f4 fc70 	bl	80002f8 <__aeabi_dsub>
 800ba18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba1c:	4656      	mov	r6, sl
 800ba1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba22:	f7f5 f8d1 	bl	8000bc8 <__aeabi_d2iz>
 800ba26:	4605      	mov	r5, r0
 800ba28:	f7f4 fdb4 	bl	8000594 <__aeabi_i2d>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba34:	f7f4 fc60 	bl	80002f8 <__aeabi_dsub>
 800ba38:	3530      	adds	r5, #48	@ 0x30
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba42:	f806 5b01 	strb.w	r5, [r6], #1
 800ba46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba4a:	f7f5 f87f 	bl	8000b4c <__aeabi_dcmplt>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d171      	bne.n	800bb36 <_dtoa_r+0x65e>
 800ba52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba56:	4911      	ldr	r1, [pc, #68]	@ (800ba9c <_dtoa_r+0x5c4>)
 800ba58:	2000      	movs	r0, #0
 800ba5a:	f7f4 fc4d 	bl	80002f8 <__aeabi_dsub>
 800ba5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba62:	f7f5 f873 	bl	8000b4c <__aeabi_dcmplt>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f040 8095 	bne.w	800bb96 <_dtoa_r+0x6be>
 800ba6c:	42a6      	cmp	r6, r4
 800ba6e:	f43f af50 	beq.w	800b912 <_dtoa_r+0x43a>
 800ba72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba76:	4b0a      	ldr	r3, [pc, #40]	@ (800baa0 <_dtoa_r+0x5c8>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f7f4 fdf5 	bl	8000668 <__aeabi_dmul>
 800ba7e:	4b08      	ldr	r3, [pc, #32]	@ (800baa0 <_dtoa_r+0x5c8>)
 800ba80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba84:	2200      	movs	r2, #0
 800ba86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba8a:	f7f4 fded 	bl	8000668 <__aeabi_dmul>
 800ba8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba92:	e7c4      	b.n	800ba1e <_dtoa_r+0x546>
 800ba94:	0800edd0 	.word	0x0800edd0
 800ba98:	0800eda8 	.word	0x0800eda8
 800ba9c:	3ff00000 	.word	0x3ff00000
 800baa0:	40240000 	.word	0x40240000
 800baa4:	401c0000 	.word	0x401c0000
 800baa8:	40140000 	.word	0x40140000
 800baac:	3fe00000 	.word	0x3fe00000
 800bab0:	4631      	mov	r1, r6
 800bab2:	4628      	mov	r0, r5
 800bab4:	f7f4 fdd8 	bl	8000668 <__aeabi_dmul>
 800bab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800babc:	9415      	str	r4, [sp, #84]	@ 0x54
 800babe:	4656      	mov	r6, sl
 800bac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac4:	f7f5 f880 	bl	8000bc8 <__aeabi_d2iz>
 800bac8:	4605      	mov	r5, r0
 800baca:	f7f4 fd63 	bl	8000594 <__aeabi_i2d>
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bad6:	f7f4 fc0f 	bl	80002f8 <__aeabi_dsub>
 800bada:	3530      	adds	r5, #48	@ 0x30
 800badc:	f806 5b01 	strb.w	r5, [r6], #1
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	42a6      	cmp	r6, r4
 800bae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800baea:	f04f 0200 	mov.w	r2, #0
 800baee:	d124      	bne.n	800bb3a <_dtoa_r+0x662>
 800baf0:	4bac      	ldr	r3, [pc, #688]	@ (800bda4 <_dtoa_r+0x8cc>)
 800baf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800baf6:	f7f4 fc01 	bl	80002fc <__adddf3>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb02:	f7f5 f841 	bl	8000b88 <__aeabi_dcmpgt>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d145      	bne.n	800bb96 <_dtoa_r+0x6be>
 800bb0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb0e:	49a5      	ldr	r1, [pc, #660]	@ (800bda4 <_dtoa_r+0x8cc>)
 800bb10:	2000      	movs	r0, #0
 800bb12:	f7f4 fbf1 	bl	80002f8 <__aeabi_dsub>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb1e:	f7f5 f815 	bl	8000b4c <__aeabi_dcmplt>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f43f aef5 	beq.w	800b912 <_dtoa_r+0x43a>
 800bb28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bb2a:	1e73      	subs	r3, r6, #1
 800bb2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bb2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb32:	2b30      	cmp	r3, #48	@ 0x30
 800bb34:	d0f8      	beq.n	800bb28 <_dtoa_r+0x650>
 800bb36:	9f04      	ldr	r7, [sp, #16]
 800bb38:	e73e      	b.n	800b9b8 <_dtoa_r+0x4e0>
 800bb3a:	4b9b      	ldr	r3, [pc, #620]	@ (800bda8 <_dtoa_r+0x8d0>)
 800bb3c:	f7f4 fd94 	bl	8000668 <__aeabi_dmul>
 800bb40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb44:	e7bc      	b.n	800bac0 <_dtoa_r+0x5e8>
 800bb46:	d10c      	bne.n	800bb62 <_dtoa_r+0x68a>
 800bb48:	4b98      	ldr	r3, [pc, #608]	@ (800bdac <_dtoa_r+0x8d4>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb50:	f7f4 fd8a 	bl	8000668 <__aeabi_dmul>
 800bb54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb58:	f7f5 f80c 	bl	8000b74 <__aeabi_dcmpge>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f000 8157 	beq.w	800be10 <_dtoa_r+0x938>
 800bb62:	2400      	movs	r4, #0
 800bb64:	4625      	mov	r5, r4
 800bb66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb68:	43db      	mvns	r3, r3
 800bb6a:	9304      	str	r3, [sp, #16]
 800bb6c:	4656      	mov	r6, sl
 800bb6e:	2700      	movs	r7, #0
 800bb70:	4621      	mov	r1, r4
 800bb72:	4658      	mov	r0, fp
 800bb74:	f000 fbb4 	bl	800c2e0 <_Bfree>
 800bb78:	2d00      	cmp	r5, #0
 800bb7a:	d0dc      	beq.n	800bb36 <_dtoa_r+0x65e>
 800bb7c:	b12f      	cbz	r7, 800bb8a <_dtoa_r+0x6b2>
 800bb7e:	42af      	cmp	r7, r5
 800bb80:	d003      	beq.n	800bb8a <_dtoa_r+0x6b2>
 800bb82:	4639      	mov	r1, r7
 800bb84:	4658      	mov	r0, fp
 800bb86:	f000 fbab 	bl	800c2e0 <_Bfree>
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	4658      	mov	r0, fp
 800bb8e:	f000 fba7 	bl	800c2e0 <_Bfree>
 800bb92:	e7d0      	b.n	800bb36 <_dtoa_r+0x65e>
 800bb94:	9704      	str	r7, [sp, #16]
 800bb96:	4633      	mov	r3, r6
 800bb98:	461e      	mov	r6, r3
 800bb9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb9e:	2a39      	cmp	r2, #57	@ 0x39
 800bba0:	d107      	bne.n	800bbb2 <_dtoa_r+0x6da>
 800bba2:	459a      	cmp	sl, r3
 800bba4:	d1f8      	bne.n	800bb98 <_dtoa_r+0x6c0>
 800bba6:	9a04      	ldr	r2, [sp, #16]
 800bba8:	3201      	adds	r2, #1
 800bbaa:	9204      	str	r2, [sp, #16]
 800bbac:	2230      	movs	r2, #48	@ 0x30
 800bbae:	f88a 2000 	strb.w	r2, [sl]
 800bbb2:	781a      	ldrb	r2, [r3, #0]
 800bbb4:	3201      	adds	r2, #1
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	e7bd      	b.n	800bb36 <_dtoa_r+0x65e>
 800bbba:	4b7b      	ldr	r3, [pc, #492]	@ (800bda8 <_dtoa_r+0x8d0>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f7f4 fd53 	bl	8000668 <__aeabi_dmul>
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	460d      	mov	r5, r1
 800bbca:	f7f4 ffb5 	bl	8000b38 <__aeabi_dcmpeq>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	f43f aebb 	beq.w	800b94a <_dtoa_r+0x472>
 800bbd4:	e6f0      	b.n	800b9b8 <_dtoa_r+0x4e0>
 800bbd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bbd8:	2a00      	cmp	r2, #0
 800bbda:	f000 80db 	beq.w	800bd94 <_dtoa_r+0x8bc>
 800bbde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbe0:	2a01      	cmp	r2, #1
 800bbe2:	f300 80bf 	bgt.w	800bd64 <_dtoa_r+0x88c>
 800bbe6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bbe8:	2a00      	cmp	r2, #0
 800bbea:	f000 80b7 	beq.w	800bd5c <_dtoa_r+0x884>
 800bbee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bbf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbf4:	4646      	mov	r6, r8
 800bbf6:	9a08      	ldr	r2, [sp, #32]
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	441a      	add	r2, r3
 800bbfc:	4658      	mov	r0, fp
 800bbfe:	4498      	add	r8, r3
 800bc00:	9208      	str	r2, [sp, #32]
 800bc02:	f000 fc6b 	bl	800c4dc <__i2b>
 800bc06:	4605      	mov	r5, r0
 800bc08:	b15e      	cbz	r6, 800bc22 <_dtoa_r+0x74a>
 800bc0a:	9b08      	ldr	r3, [sp, #32]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	dd08      	ble.n	800bc22 <_dtoa_r+0x74a>
 800bc10:	42b3      	cmp	r3, r6
 800bc12:	9a08      	ldr	r2, [sp, #32]
 800bc14:	bfa8      	it	ge
 800bc16:	4633      	movge	r3, r6
 800bc18:	eba8 0803 	sub.w	r8, r8, r3
 800bc1c:	1af6      	subs	r6, r6, r3
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	9308      	str	r3, [sp, #32]
 800bc22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc24:	b1f3      	cbz	r3, 800bc64 <_dtoa_r+0x78c>
 800bc26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 80b7 	beq.w	800bd9c <_dtoa_r+0x8c4>
 800bc2e:	b18c      	cbz	r4, 800bc54 <_dtoa_r+0x77c>
 800bc30:	4629      	mov	r1, r5
 800bc32:	4622      	mov	r2, r4
 800bc34:	4658      	mov	r0, fp
 800bc36:	f000 fd11 	bl	800c65c <__pow5mult>
 800bc3a:	464a      	mov	r2, r9
 800bc3c:	4601      	mov	r1, r0
 800bc3e:	4605      	mov	r5, r0
 800bc40:	4658      	mov	r0, fp
 800bc42:	f000 fc61 	bl	800c508 <__multiply>
 800bc46:	4649      	mov	r1, r9
 800bc48:	9004      	str	r0, [sp, #16]
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f000 fb48 	bl	800c2e0 <_Bfree>
 800bc50:	9b04      	ldr	r3, [sp, #16]
 800bc52:	4699      	mov	r9, r3
 800bc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc56:	1b1a      	subs	r2, r3, r4
 800bc58:	d004      	beq.n	800bc64 <_dtoa_r+0x78c>
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	4658      	mov	r0, fp
 800bc5e:	f000 fcfd 	bl	800c65c <__pow5mult>
 800bc62:	4681      	mov	r9, r0
 800bc64:	2101      	movs	r1, #1
 800bc66:	4658      	mov	r0, fp
 800bc68:	f000 fc38 	bl	800c4dc <__i2b>
 800bc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc6e:	4604      	mov	r4, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 81cf 	beq.w	800c014 <_dtoa_r+0xb3c>
 800bc76:	461a      	mov	r2, r3
 800bc78:	4601      	mov	r1, r0
 800bc7a:	4658      	mov	r0, fp
 800bc7c:	f000 fcee 	bl	800c65c <__pow5mult>
 800bc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	4604      	mov	r4, r0
 800bc86:	f300 8095 	bgt.w	800bdb4 <_dtoa_r+0x8dc>
 800bc8a:	9b02      	ldr	r3, [sp, #8]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f040 8087 	bne.w	800bda0 <_dtoa_r+0x8c8>
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f040 8089 	bne.w	800bdb0 <_dtoa_r+0x8d8>
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bca4:	0d1b      	lsrs	r3, r3, #20
 800bca6:	051b      	lsls	r3, r3, #20
 800bca8:	b12b      	cbz	r3, 800bcb6 <_dtoa_r+0x7de>
 800bcaa:	9b08      	ldr	r3, [sp, #32]
 800bcac:	3301      	adds	r3, #1
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	f108 0801 	add.w	r8, r8, #1
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 81b0 	beq.w	800c020 <_dtoa_r+0xb48>
 800bcc0:	6923      	ldr	r3, [r4, #16]
 800bcc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bcc6:	6918      	ldr	r0, [r3, #16]
 800bcc8:	f000 fbbc 	bl	800c444 <__hi0bits>
 800bccc:	f1c0 0020 	rsb	r0, r0, #32
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	4418      	add	r0, r3
 800bcd4:	f010 001f 	ands.w	r0, r0, #31
 800bcd8:	d077      	beq.n	800bdca <_dtoa_r+0x8f2>
 800bcda:	f1c0 0320 	rsb	r3, r0, #32
 800bcde:	2b04      	cmp	r3, #4
 800bce0:	dd6b      	ble.n	800bdba <_dtoa_r+0x8e2>
 800bce2:	9b08      	ldr	r3, [sp, #32]
 800bce4:	f1c0 001c 	rsb	r0, r0, #28
 800bce8:	4403      	add	r3, r0
 800bcea:	4480      	add	r8, r0
 800bcec:	4406      	add	r6, r0
 800bcee:	9308      	str	r3, [sp, #32]
 800bcf0:	f1b8 0f00 	cmp.w	r8, #0
 800bcf4:	dd05      	ble.n	800bd02 <_dtoa_r+0x82a>
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	4642      	mov	r2, r8
 800bcfa:	4658      	mov	r0, fp
 800bcfc:	f000 fd08 	bl	800c710 <__lshift>
 800bd00:	4681      	mov	r9, r0
 800bd02:	9b08      	ldr	r3, [sp, #32]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dd05      	ble.n	800bd14 <_dtoa_r+0x83c>
 800bd08:	4621      	mov	r1, r4
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	4658      	mov	r0, fp
 800bd0e:	f000 fcff 	bl	800c710 <__lshift>
 800bd12:	4604      	mov	r4, r0
 800bd14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d059      	beq.n	800bdce <_dtoa_r+0x8f6>
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4648      	mov	r0, r9
 800bd1e:	f000 fd63 	bl	800c7e8 <__mcmp>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	da53      	bge.n	800bdce <_dtoa_r+0x8f6>
 800bd26:	1e7b      	subs	r3, r7, #1
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	4649      	mov	r1, r9
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	220a      	movs	r2, #10
 800bd30:	4658      	mov	r0, fp
 800bd32:	f000 faf7 	bl	800c324 <__multadd>
 800bd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd38:	4681      	mov	r9, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 8172 	beq.w	800c024 <_dtoa_r+0xb4c>
 800bd40:	2300      	movs	r3, #0
 800bd42:	4629      	mov	r1, r5
 800bd44:	220a      	movs	r2, #10
 800bd46:	4658      	mov	r0, fp
 800bd48:	f000 faec 	bl	800c324 <__multadd>
 800bd4c:	9b00      	ldr	r3, [sp, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	4605      	mov	r5, r0
 800bd52:	dc67      	bgt.n	800be24 <_dtoa_r+0x94c>
 800bd54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	dc41      	bgt.n	800bdde <_dtoa_r+0x906>
 800bd5a:	e063      	b.n	800be24 <_dtoa_r+0x94c>
 800bd5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bd62:	e746      	b.n	800bbf2 <_dtoa_r+0x71a>
 800bd64:	9b07      	ldr	r3, [sp, #28]
 800bd66:	1e5c      	subs	r4, r3, #1
 800bd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd6a:	42a3      	cmp	r3, r4
 800bd6c:	bfbf      	itttt	lt
 800bd6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bd70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bd72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bd74:	1ae3      	sublt	r3, r4, r3
 800bd76:	bfb4      	ite	lt
 800bd78:	18d2      	addlt	r2, r2, r3
 800bd7a:	1b1c      	subge	r4, r3, r4
 800bd7c:	9b07      	ldr	r3, [sp, #28]
 800bd7e:	bfbc      	itt	lt
 800bd80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bd82:	2400      	movlt	r4, #0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bfb5      	itete	lt
 800bd88:	eba8 0603 	sublt.w	r6, r8, r3
 800bd8c:	9b07      	ldrge	r3, [sp, #28]
 800bd8e:	2300      	movlt	r3, #0
 800bd90:	4646      	movge	r6, r8
 800bd92:	e730      	b.n	800bbf6 <_dtoa_r+0x71e>
 800bd94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bd98:	4646      	mov	r6, r8
 800bd9a:	e735      	b.n	800bc08 <_dtoa_r+0x730>
 800bd9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd9e:	e75c      	b.n	800bc5a <_dtoa_r+0x782>
 800bda0:	2300      	movs	r3, #0
 800bda2:	e788      	b.n	800bcb6 <_dtoa_r+0x7de>
 800bda4:	3fe00000 	.word	0x3fe00000
 800bda8:	40240000 	.word	0x40240000
 800bdac:	40140000 	.word	0x40140000
 800bdb0:	9b02      	ldr	r3, [sp, #8]
 800bdb2:	e780      	b.n	800bcb6 <_dtoa_r+0x7de>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdb8:	e782      	b.n	800bcc0 <_dtoa_r+0x7e8>
 800bdba:	d099      	beq.n	800bcf0 <_dtoa_r+0x818>
 800bdbc:	9a08      	ldr	r2, [sp, #32]
 800bdbe:	331c      	adds	r3, #28
 800bdc0:	441a      	add	r2, r3
 800bdc2:	4498      	add	r8, r3
 800bdc4:	441e      	add	r6, r3
 800bdc6:	9208      	str	r2, [sp, #32]
 800bdc8:	e792      	b.n	800bcf0 <_dtoa_r+0x818>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	e7f6      	b.n	800bdbc <_dtoa_r+0x8e4>
 800bdce:	9b07      	ldr	r3, [sp, #28]
 800bdd0:	9704      	str	r7, [sp, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	dc20      	bgt.n	800be18 <_dtoa_r+0x940>
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	dd1e      	ble.n	800be1c <_dtoa_r+0x944>
 800bdde:	9b00      	ldr	r3, [sp, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f47f aec0 	bne.w	800bb66 <_dtoa_r+0x68e>
 800bde6:	4621      	mov	r1, r4
 800bde8:	2205      	movs	r2, #5
 800bdea:	4658      	mov	r0, fp
 800bdec:	f000 fa9a 	bl	800c324 <__multadd>
 800bdf0:	4601      	mov	r1, r0
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4648      	mov	r0, r9
 800bdf6:	f000 fcf7 	bl	800c7e8 <__mcmp>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f77f aeb3 	ble.w	800bb66 <_dtoa_r+0x68e>
 800be00:	4656      	mov	r6, sl
 800be02:	2331      	movs	r3, #49	@ 0x31
 800be04:	f806 3b01 	strb.w	r3, [r6], #1
 800be08:	9b04      	ldr	r3, [sp, #16]
 800be0a:	3301      	adds	r3, #1
 800be0c:	9304      	str	r3, [sp, #16]
 800be0e:	e6ae      	b.n	800bb6e <_dtoa_r+0x696>
 800be10:	9c07      	ldr	r4, [sp, #28]
 800be12:	9704      	str	r7, [sp, #16]
 800be14:	4625      	mov	r5, r4
 800be16:	e7f3      	b.n	800be00 <_dtoa_r+0x928>
 800be18:	9b07      	ldr	r3, [sp, #28]
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f000 8104 	beq.w	800c02c <_dtoa_r+0xb54>
 800be24:	2e00      	cmp	r6, #0
 800be26:	dd05      	ble.n	800be34 <_dtoa_r+0x95c>
 800be28:	4629      	mov	r1, r5
 800be2a:	4632      	mov	r2, r6
 800be2c:	4658      	mov	r0, fp
 800be2e:	f000 fc6f 	bl	800c710 <__lshift>
 800be32:	4605      	mov	r5, r0
 800be34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be36:	2b00      	cmp	r3, #0
 800be38:	d05a      	beq.n	800bef0 <_dtoa_r+0xa18>
 800be3a:	6869      	ldr	r1, [r5, #4]
 800be3c:	4658      	mov	r0, fp
 800be3e:	f000 fa0f 	bl	800c260 <_Balloc>
 800be42:	4606      	mov	r6, r0
 800be44:	b928      	cbnz	r0, 800be52 <_dtoa_r+0x97a>
 800be46:	4b84      	ldr	r3, [pc, #528]	@ (800c058 <_dtoa_r+0xb80>)
 800be48:	4602      	mov	r2, r0
 800be4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800be4e:	f7ff bb5a 	b.w	800b506 <_dtoa_r+0x2e>
 800be52:	692a      	ldr	r2, [r5, #16]
 800be54:	3202      	adds	r2, #2
 800be56:	0092      	lsls	r2, r2, #2
 800be58:	f105 010c 	add.w	r1, r5, #12
 800be5c:	300c      	adds	r0, #12
 800be5e:	f002 f8e1 	bl	800e024 <memcpy>
 800be62:	2201      	movs	r2, #1
 800be64:	4631      	mov	r1, r6
 800be66:	4658      	mov	r0, fp
 800be68:	f000 fc52 	bl	800c710 <__lshift>
 800be6c:	f10a 0301 	add.w	r3, sl, #1
 800be70:	9307      	str	r3, [sp, #28]
 800be72:	9b00      	ldr	r3, [sp, #0]
 800be74:	4453      	add	r3, sl
 800be76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be78:	9b02      	ldr	r3, [sp, #8]
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	462f      	mov	r7, r5
 800be80:	930a      	str	r3, [sp, #40]	@ 0x28
 800be82:	4605      	mov	r5, r0
 800be84:	9b07      	ldr	r3, [sp, #28]
 800be86:	4621      	mov	r1, r4
 800be88:	3b01      	subs	r3, #1
 800be8a:	4648      	mov	r0, r9
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	f7ff fa99 	bl	800b3c4 <quorem>
 800be92:	4639      	mov	r1, r7
 800be94:	9002      	str	r0, [sp, #8]
 800be96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be9a:	4648      	mov	r0, r9
 800be9c:	f000 fca4 	bl	800c7e8 <__mcmp>
 800bea0:	462a      	mov	r2, r5
 800bea2:	9008      	str	r0, [sp, #32]
 800bea4:	4621      	mov	r1, r4
 800bea6:	4658      	mov	r0, fp
 800bea8:	f000 fcba 	bl	800c820 <__mdiff>
 800beac:	68c2      	ldr	r2, [r0, #12]
 800beae:	4606      	mov	r6, r0
 800beb0:	bb02      	cbnz	r2, 800bef4 <_dtoa_r+0xa1c>
 800beb2:	4601      	mov	r1, r0
 800beb4:	4648      	mov	r0, r9
 800beb6:	f000 fc97 	bl	800c7e8 <__mcmp>
 800beba:	4602      	mov	r2, r0
 800bebc:	4631      	mov	r1, r6
 800bebe:	4658      	mov	r0, fp
 800bec0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bec2:	f000 fa0d 	bl	800c2e0 <_Bfree>
 800bec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beca:	9e07      	ldr	r6, [sp, #28]
 800becc:	ea43 0102 	orr.w	r1, r3, r2
 800bed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bed2:	4319      	orrs	r1, r3
 800bed4:	d110      	bne.n	800bef8 <_dtoa_r+0xa20>
 800bed6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800beda:	d029      	beq.n	800bf30 <_dtoa_r+0xa58>
 800bedc:	9b08      	ldr	r3, [sp, #32]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	dd02      	ble.n	800bee8 <_dtoa_r+0xa10>
 800bee2:	9b02      	ldr	r3, [sp, #8]
 800bee4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bee8:	9b00      	ldr	r3, [sp, #0]
 800beea:	f883 8000 	strb.w	r8, [r3]
 800beee:	e63f      	b.n	800bb70 <_dtoa_r+0x698>
 800bef0:	4628      	mov	r0, r5
 800bef2:	e7bb      	b.n	800be6c <_dtoa_r+0x994>
 800bef4:	2201      	movs	r2, #1
 800bef6:	e7e1      	b.n	800bebc <_dtoa_r+0x9e4>
 800bef8:	9b08      	ldr	r3, [sp, #32]
 800befa:	2b00      	cmp	r3, #0
 800befc:	db04      	blt.n	800bf08 <_dtoa_r+0xa30>
 800befe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf00:	430b      	orrs	r3, r1
 800bf02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf04:	430b      	orrs	r3, r1
 800bf06:	d120      	bne.n	800bf4a <_dtoa_r+0xa72>
 800bf08:	2a00      	cmp	r2, #0
 800bf0a:	dded      	ble.n	800bee8 <_dtoa_r+0xa10>
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	2201      	movs	r2, #1
 800bf10:	4658      	mov	r0, fp
 800bf12:	f000 fbfd 	bl	800c710 <__lshift>
 800bf16:	4621      	mov	r1, r4
 800bf18:	4681      	mov	r9, r0
 800bf1a:	f000 fc65 	bl	800c7e8 <__mcmp>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	dc03      	bgt.n	800bf2a <_dtoa_r+0xa52>
 800bf22:	d1e1      	bne.n	800bee8 <_dtoa_r+0xa10>
 800bf24:	f018 0f01 	tst.w	r8, #1
 800bf28:	d0de      	beq.n	800bee8 <_dtoa_r+0xa10>
 800bf2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf2e:	d1d8      	bne.n	800bee2 <_dtoa_r+0xa0a>
 800bf30:	9a00      	ldr	r2, [sp, #0]
 800bf32:	2339      	movs	r3, #57	@ 0x39
 800bf34:	7013      	strb	r3, [r2, #0]
 800bf36:	4633      	mov	r3, r6
 800bf38:	461e      	mov	r6, r3
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bf40:	2a39      	cmp	r2, #57	@ 0x39
 800bf42:	d052      	beq.n	800bfea <_dtoa_r+0xb12>
 800bf44:	3201      	adds	r2, #1
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	e612      	b.n	800bb70 <_dtoa_r+0x698>
 800bf4a:	2a00      	cmp	r2, #0
 800bf4c:	dd07      	ble.n	800bf5e <_dtoa_r+0xa86>
 800bf4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf52:	d0ed      	beq.n	800bf30 <_dtoa_r+0xa58>
 800bf54:	9a00      	ldr	r2, [sp, #0]
 800bf56:	f108 0301 	add.w	r3, r8, #1
 800bf5a:	7013      	strb	r3, [r2, #0]
 800bf5c:	e608      	b.n	800bb70 <_dtoa_r+0x698>
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	9a07      	ldr	r2, [sp, #28]
 800bf62:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bf66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d028      	beq.n	800bfbe <_dtoa_r+0xae6>
 800bf6c:	4649      	mov	r1, r9
 800bf6e:	2300      	movs	r3, #0
 800bf70:	220a      	movs	r2, #10
 800bf72:	4658      	mov	r0, fp
 800bf74:	f000 f9d6 	bl	800c324 <__multadd>
 800bf78:	42af      	cmp	r7, r5
 800bf7a:	4681      	mov	r9, r0
 800bf7c:	f04f 0300 	mov.w	r3, #0
 800bf80:	f04f 020a 	mov.w	r2, #10
 800bf84:	4639      	mov	r1, r7
 800bf86:	4658      	mov	r0, fp
 800bf88:	d107      	bne.n	800bf9a <_dtoa_r+0xac2>
 800bf8a:	f000 f9cb 	bl	800c324 <__multadd>
 800bf8e:	4607      	mov	r7, r0
 800bf90:	4605      	mov	r5, r0
 800bf92:	9b07      	ldr	r3, [sp, #28]
 800bf94:	3301      	adds	r3, #1
 800bf96:	9307      	str	r3, [sp, #28]
 800bf98:	e774      	b.n	800be84 <_dtoa_r+0x9ac>
 800bf9a:	f000 f9c3 	bl	800c324 <__multadd>
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	220a      	movs	r2, #10
 800bfa6:	4658      	mov	r0, fp
 800bfa8:	f000 f9bc 	bl	800c324 <__multadd>
 800bfac:	4605      	mov	r5, r0
 800bfae:	e7f0      	b.n	800bf92 <_dtoa_r+0xaba>
 800bfb0:	9b00      	ldr	r3, [sp, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	bfcc      	ite	gt
 800bfb6:	461e      	movgt	r6, r3
 800bfb8:	2601      	movle	r6, #1
 800bfba:	4456      	add	r6, sl
 800bfbc:	2700      	movs	r7, #0
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	4658      	mov	r0, fp
 800bfc4:	f000 fba4 	bl	800c710 <__lshift>
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4681      	mov	r9, r0
 800bfcc:	f000 fc0c 	bl	800c7e8 <__mcmp>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	dcb0      	bgt.n	800bf36 <_dtoa_r+0xa5e>
 800bfd4:	d102      	bne.n	800bfdc <_dtoa_r+0xb04>
 800bfd6:	f018 0f01 	tst.w	r8, #1
 800bfda:	d1ac      	bne.n	800bf36 <_dtoa_r+0xa5e>
 800bfdc:	4633      	mov	r3, r6
 800bfde:	461e      	mov	r6, r3
 800bfe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfe4:	2a30      	cmp	r2, #48	@ 0x30
 800bfe6:	d0fa      	beq.n	800bfde <_dtoa_r+0xb06>
 800bfe8:	e5c2      	b.n	800bb70 <_dtoa_r+0x698>
 800bfea:	459a      	cmp	sl, r3
 800bfec:	d1a4      	bne.n	800bf38 <_dtoa_r+0xa60>
 800bfee:	9b04      	ldr	r3, [sp, #16]
 800bff0:	3301      	adds	r3, #1
 800bff2:	9304      	str	r3, [sp, #16]
 800bff4:	2331      	movs	r3, #49	@ 0x31
 800bff6:	f88a 3000 	strb.w	r3, [sl]
 800bffa:	e5b9      	b.n	800bb70 <_dtoa_r+0x698>
 800bffc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bffe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c05c <_dtoa_r+0xb84>
 800c002:	b11b      	cbz	r3, 800c00c <_dtoa_r+0xb34>
 800c004:	f10a 0308 	add.w	r3, sl, #8
 800c008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	4650      	mov	r0, sl
 800c00e:	b019      	add	sp, #100	@ 0x64
 800c010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c016:	2b01      	cmp	r3, #1
 800c018:	f77f ae37 	ble.w	800bc8a <_dtoa_r+0x7b2>
 800c01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c020:	2001      	movs	r0, #1
 800c022:	e655      	b.n	800bcd0 <_dtoa_r+0x7f8>
 800c024:	9b00      	ldr	r3, [sp, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	f77f aed6 	ble.w	800bdd8 <_dtoa_r+0x900>
 800c02c:	4656      	mov	r6, sl
 800c02e:	4621      	mov	r1, r4
 800c030:	4648      	mov	r0, r9
 800c032:	f7ff f9c7 	bl	800b3c4 <quorem>
 800c036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c03a:	f806 8b01 	strb.w	r8, [r6], #1
 800c03e:	9b00      	ldr	r3, [sp, #0]
 800c040:	eba6 020a 	sub.w	r2, r6, sl
 800c044:	4293      	cmp	r3, r2
 800c046:	ddb3      	ble.n	800bfb0 <_dtoa_r+0xad8>
 800c048:	4649      	mov	r1, r9
 800c04a:	2300      	movs	r3, #0
 800c04c:	220a      	movs	r2, #10
 800c04e:	4658      	mov	r0, fp
 800c050:	f000 f968 	bl	800c324 <__multadd>
 800c054:	4681      	mov	r9, r0
 800c056:	e7ea      	b.n	800c02e <_dtoa_r+0xb56>
 800c058:	0800ed30 	.word	0x0800ed30
 800c05c:	0800eccb 	.word	0x0800eccb

0800c060 <_free_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4605      	mov	r5, r0
 800c064:	2900      	cmp	r1, #0
 800c066:	d041      	beq.n	800c0ec <_free_r+0x8c>
 800c068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c06c:	1f0c      	subs	r4, r1, #4
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bfb8      	it	lt
 800c072:	18e4      	addlt	r4, r4, r3
 800c074:	f000 f8e8 	bl	800c248 <__malloc_lock>
 800c078:	4a1d      	ldr	r2, [pc, #116]	@ (800c0f0 <_free_r+0x90>)
 800c07a:	6813      	ldr	r3, [r2, #0]
 800c07c:	b933      	cbnz	r3, 800c08c <_free_r+0x2c>
 800c07e:	6063      	str	r3, [r4, #4]
 800c080:	6014      	str	r4, [r2, #0]
 800c082:	4628      	mov	r0, r5
 800c084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c088:	f000 b8e4 	b.w	800c254 <__malloc_unlock>
 800c08c:	42a3      	cmp	r3, r4
 800c08e:	d908      	bls.n	800c0a2 <_free_r+0x42>
 800c090:	6820      	ldr	r0, [r4, #0]
 800c092:	1821      	adds	r1, r4, r0
 800c094:	428b      	cmp	r3, r1
 800c096:	bf01      	itttt	eq
 800c098:	6819      	ldreq	r1, [r3, #0]
 800c09a:	685b      	ldreq	r3, [r3, #4]
 800c09c:	1809      	addeq	r1, r1, r0
 800c09e:	6021      	streq	r1, [r4, #0]
 800c0a0:	e7ed      	b.n	800c07e <_free_r+0x1e>
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	b10b      	cbz	r3, 800c0ac <_free_r+0x4c>
 800c0a8:	42a3      	cmp	r3, r4
 800c0aa:	d9fa      	bls.n	800c0a2 <_free_r+0x42>
 800c0ac:	6811      	ldr	r1, [r2, #0]
 800c0ae:	1850      	adds	r0, r2, r1
 800c0b0:	42a0      	cmp	r0, r4
 800c0b2:	d10b      	bne.n	800c0cc <_free_r+0x6c>
 800c0b4:	6820      	ldr	r0, [r4, #0]
 800c0b6:	4401      	add	r1, r0
 800c0b8:	1850      	adds	r0, r2, r1
 800c0ba:	4283      	cmp	r3, r0
 800c0bc:	6011      	str	r1, [r2, #0]
 800c0be:	d1e0      	bne.n	800c082 <_free_r+0x22>
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	6053      	str	r3, [r2, #4]
 800c0c6:	4408      	add	r0, r1
 800c0c8:	6010      	str	r0, [r2, #0]
 800c0ca:	e7da      	b.n	800c082 <_free_r+0x22>
 800c0cc:	d902      	bls.n	800c0d4 <_free_r+0x74>
 800c0ce:	230c      	movs	r3, #12
 800c0d0:	602b      	str	r3, [r5, #0]
 800c0d2:	e7d6      	b.n	800c082 <_free_r+0x22>
 800c0d4:	6820      	ldr	r0, [r4, #0]
 800c0d6:	1821      	adds	r1, r4, r0
 800c0d8:	428b      	cmp	r3, r1
 800c0da:	bf04      	itt	eq
 800c0dc:	6819      	ldreq	r1, [r3, #0]
 800c0de:	685b      	ldreq	r3, [r3, #4]
 800c0e0:	6063      	str	r3, [r4, #4]
 800c0e2:	bf04      	itt	eq
 800c0e4:	1809      	addeq	r1, r1, r0
 800c0e6:	6021      	streq	r1, [r4, #0]
 800c0e8:	6054      	str	r4, [r2, #4]
 800c0ea:	e7ca      	b.n	800c082 <_free_r+0x22>
 800c0ec:	bd38      	pop	{r3, r4, r5, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20000798 	.word	0x20000798

0800c0f4 <malloc>:
 800c0f4:	4b02      	ldr	r3, [pc, #8]	@ (800c100 <malloc+0xc>)
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	f000 b825 	b.w	800c148 <_malloc_r>
 800c0fe:	bf00      	nop
 800c100:	200000d4 	.word	0x200000d4

0800c104 <sbrk_aligned>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	4e0f      	ldr	r6, [pc, #60]	@ (800c144 <sbrk_aligned+0x40>)
 800c108:	460c      	mov	r4, r1
 800c10a:	6831      	ldr	r1, [r6, #0]
 800c10c:	4605      	mov	r5, r0
 800c10e:	b911      	cbnz	r1, 800c116 <sbrk_aligned+0x12>
 800c110:	f001 ff78 	bl	800e004 <_sbrk_r>
 800c114:	6030      	str	r0, [r6, #0]
 800c116:	4621      	mov	r1, r4
 800c118:	4628      	mov	r0, r5
 800c11a:	f001 ff73 	bl	800e004 <_sbrk_r>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d103      	bne.n	800c12a <sbrk_aligned+0x26>
 800c122:	f04f 34ff 	mov.w	r4, #4294967295
 800c126:	4620      	mov	r0, r4
 800c128:	bd70      	pop	{r4, r5, r6, pc}
 800c12a:	1cc4      	adds	r4, r0, #3
 800c12c:	f024 0403 	bic.w	r4, r4, #3
 800c130:	42a0      	cmp	r0, r4
 800c132:	d0f8      	beq.n	800c126 <sbrk_aligned+0x22>
 800c134:	1a21      	subs	r1, r4, r0
 800c136:	4628      	mov	r0, r5
 800c138:	f001 ff64 	bl	800e004 <_sbrk_r>
 800c13c:	3001      	adds	r0, #1
 800c13e:	d1f2      	bne.n	800c126 <sbrk_aligned+0x22>
 800c140:	e7ef      	b.n	800c122 <sbrk_aligned+0x1e>
 800c142:	bf00      	nop
 800c144:	20000794 	.word	0x20000794

0800c148 <_malloc_r>:
 800c148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c14c:	1ccd      	adds	r5, r1, #3
 800c14e:	f025 0503 	bic.w	r5, r5, #3
 800c152:	3508      	adds	r5, #8
 800c154:	2d0c      	cmp	r5, #12
 800c156:	bf38      	it	cc
 800c158:	250c      	movcc	r5, #12
 800c15a:	2d00      	cmp	r5, #0
 800c15c:	4606      	mov	r6, r0
 800c15e:	db01      	blt.n	800c164 <_malloc_r+0x1c>
 800c160:	42a9      	cmp	r1, r5
 800c162:	d904      	bls.n	800c16e <_malloc_r+0x26>
 800c164:	230c      	movs	r3, #12
 800c166:	6033      	str	r3, [r6, #0]
 800c168:	2000      	movs	r0, #0
 800c16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c16e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c244 <_malloc_r+0xfc>
 800c172:	f000 f869 	bl	800c248 <__malloc_lock>
 800c176:	f8d8 3000 	ldr.w	r3, [r8]
 800c17a:	461c      	mov	r4, r3
 800c17c:	bb44      	cbnz	r4, 800c1d0 <_malloc_r+0x88>
 800c17e:	4629      	mov	r1, r5
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff ffbf 	bl	800c104 <sbrk_aligned>
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	4604      	mov	r4, r0
 800c18a:	d158      	bne.n	800c23e <_malloc_r+0xf6>
 800c18c:	f8d8 4000 	ldr.w	r4, [r8]
 800c190:	4627      	mov	r7, r4
 800c192:	2f00      	cmp	r7, #0
 800c194:	d143      	bne.n	800c21e <_malloc_r+0xd6>
 800c196:	2c00      	cmp	r4, #0
 800c198:	d04b      	beq.n	800c232 <_malloc_r+0xea>
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	4639      	mov	r1, r7
 800c19e:	4630      	mov	r0, r6
 800c1a0:	eb04 0903 	add.w	r9, r4, r3
 800c1a4:	f001 ff2e 	bl	800e004 <_sbrk_r>
 800c1a8:	4581      	cmp	r9, r0
 800c1aa:	d142      	bne.n	800c232 <_malloc_r+0xea>
 800c1ac:	6821      	ldr	r1, [r4, #0]
 800c1ae:	1a6d      	subs	r5, r5, r1
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7ff ffa6 	bl	800c104 <sbrk_aligned>
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d03a      	beq.n	800c232 <_malloc_r+0xea>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	442b      	add	r3, r5
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	bb62      	cbnz	r2, 800c224 <_malloc_r+0xdc>
 800c1ca:	f8c8 7000 	str.w	r7, [r8]
 800c1ce:	e00f      	b.n	800c1f0 <_malloc_r+0xa8>
 800c1d0:	6822      	ldr	r2, [r4, #0]
 800c1d2:	1b52      	subs	r2, r2, r5
 800c1d4:	d420      	bmi.n	800c218 <_malloc_r+0xd0>
 800c1d6:	2a0b      	cmp	r2, #11
 800c1d8:	d917      	bls.n	800c20a <_malloc_r+0xc2>
 800c1da:	1961      	adds	r1, r4, r5
 800c1dc:	42a3      	cmp	r3, r4
 800c1de:	6025      	str	r5, [r4, #0]
 800c1e0:	bf18      	it	ne
 800c1e2:	6059      	strne	r1, [r3, #4]
 800c1e4:	6863      	ldr	r3, [r4, #4]
 800c1e6:	bf08      	it	eq
 800c1e8:	f8c8 1000 	streq.w	r1, [r8]
 800c1ec:	5162      	str	r2, [r4, r5]
 800c1ee:	604b      	str	r3, [r1, #4]
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f000 f82f 	bl	800c254 <__malloc_unlock>
 800c1f6:	f104 000b 	add.w	r0, r4, #11
 800c1fa:	1d23      	adds	r3, r4, #4
 800c1fc:	f020 0007 	bic.w	r0, r0, #7
 800c200:	1ac2      	subs	r2, r0, r3
 800c202:	bf1c      	itt	ne
 800c204:	1a1b      	subne	r3, r3, r0
 800c206:	50a3      	strne	r3, [r4, r2]
 800c208:	e7af      	b.n	800c16a <_malloc_r+0x22>
 800c20a:	6862      	ldr	r2, [r4, #4]
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	bf0c      	ite	eq
 800c210:	f8c8 2000 	streq.w	r2, [r8]
 800c214:	605a      	strne	r2, [r3, #4]
 800c216:	e7eb      	b.n	800c1f0 <_malloc_r+0xa8>
 800c218:	4623      	mov	r3, r4
 800c21a:	6864      	ldr	r4, [r4, #4]
 800c21c:	e7ae      	b.n	800c17c <_malloc_r+0x34>
 800c21e:	463c      	mov	r4, r7
 800c220:	687f      	ldr	r7, [r7, #4]
 800c222:	e7b6      	b.n	800c192 <_malloc_r+0x4a>
 800c224:	461a      	mov	r2, r3
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	42a3      	cmp	r3, r4
 800c22a:	d1fb      	bne.n	800c224 <_malloc_r+0xdc>
 800c22c:	2300      	movs	r3, #0
 800c22e:	6053      	str	r3, [r2, #4]
 800c230:	e7de      	b.n	800c1f0 <_malloc_r+0xa8>
 800c232:	230c      	movs	r3, #12
 800c234:	6033      	str	r3, [r6, #0]
 800c236:	4630      	mov	r0, r6
 800c238:	f000 f80c 	bl	800c254 <__malloc_unlock>
 800c23c:	e794      	b.n	800c168 <_malloc_r+0x20>
 800c23e:	6005      	str	r5, [r0, #0]
 800c240:	e7d6      	b.n	800c1f0 <_malloc_r+0xa8>
 800c242:	bf00      	nop
 800c244:	20000798 	.word	0x20000798

0800c248 <__malloc_lock>:
 800c248:	4801      	ldr	r0, [pc, #4]	@ (800c250 <__malloc_lock+0x8>)
 800c24a:	f7ff b894 	b.w	800b376 <__retarget_lock_acquire_recursive>
 800c24e:	bf00      	nop
 800c250:	20000790 	.word	0x20000790

0800c254 <__malloc_unlock>:
 800c254:	4801      	ldr	r0, [pc, #4]	@ (800c25c <__malloc_unlock+0x8>)
 800c256:	f7ff b88f 	b.w	800b378 <__retarget_lock_release_recursive>
 800c25a:	bf00      	nop
 800c25c:	20000790 	.word	0x20000790

0800c260 <_Balloc>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	69c6      	ldr	r6, [r0, #28]
 800c264:	4604      	mov	r4, r0
 800c266:	460d      	mov	r5, r1
 800c268:	b976      	cbnz	r6, 800c288 <_Balloc+0x28>
 800c26a:	2010      	movs	r0, #16
 800c26c:	f7ff ff42 	bl	800c0f4 <malloc>
 800c270:	4602      	mov	r2, r0
 800c272:	61e0      	str	r0, [r4, #28]
 800c274:	b920      	cbnz	r0, 800c280 <_Balloc+0x20>
 800c276:	4b18      	ldr	r3, [pc, #96]	@ (800c2d8 <_Balloc+0x78>)
 800c278:	4818      	ldr	r0, [pc, #96]	@ (800c2dc <_Balloc+0x7c>)
 800c27a:	216b      	movs	r1, #107	@ 0x6b
 800c27c:	f7ff f884 	bl	800b388 <__assert_func>
 800c280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c284:	6006      	str	r6, [r0, #0]
 800c286:	60c6      	str	r6, [r0, #12]
 800c288:	69e6      	ldr	r6, [r4, #28]
 800c28a:	68f3      	ldr	r3, [r6, #12]
 800c28c:	b183      	cbz	r3, 800c2b0 <_Balloc+0x50>
 800c28e:	69e3      	ldr	r3, [r4, #28]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c296:	b9b8      	cbnz	r0, 800c2c8 <_Balloc+0x68>
 800c298:	2101      	movs	r1, #1
 800c29a:	fa01 f605 	lsl.w	r6, r1, r5
 800c29e:	1d72      	adds	r2, r6, #5
 800c2a0:	0092      	lsls	r2, r2, #2
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f001 fedb 	bl	800e05e <_calloc_r>
 800c2a8:	b160      	cbz	r0, 800c2c4 <_Balloc+0x64>
 800c2aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ae:	e00e      	b.n	800c2ce <_Balloc+0x6e>
 800c2b0:	2221      	movs	r2, #33	@ 0x21
 800c2b2:	2104      	movs	r1, #4
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f001 fed2 	bl	800e05e <_calloc_r>
 800c2ba:	69e3      	ldr	r3, [r4, #28]
 800c2bc:	60f0      	str	r0, [r6, #12]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e4      	bne.n	800c28e <_Balloc+0x2e>
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	6802      	ldr	r2, [r0, #0]
 800c2ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2d4:	e7f7      	b.n	800c2c6 <_Balloc+0x66>
 800c2d6:	bf00      	nop
 800c2d8:	0800ec1e 	.word	0x0800ec1e
 800c2dc:	0800ed41 	.word	0x0800ed41

0800c2e0 <_Bfree>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	69c6      	ldr	r6, [r0, #28]
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	b976      	cbnz	r6, 800c308 <_Bfree+0x28>
 800c2ea:	2010      	movs	r0, #16
 800c2ec:	f7ff ff02 	bl	800c0f4 <malloc>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	61e8      	str	r0, [r5, #28]
 800c2f4:	b920      	cbnz	r0, 800c300 <_Bfree+0x20>
 800c2f6:	4b09      	ldr	r3, [pc, #36]	@ (800c31c <_Bfree+0x3c>)
 800c2f8:	4809      	ldr	r0, [pc, #36]	@ (800c320 <_Bfree+0x40>)
 800c2fa:	218f      	movs	r1, #143	@ 0x8f
 800c2fc:	f7ff f844 	bl	800b388 <__assert_func>
 800c300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c304:	6006      	str	r6, [r0, #0]
 800c306:	60c6      	str	r6, [r0, #12]
 800c308:	b13c      	cbz	r4, 800c31a <_Bfree+0x3a>
 800c30a:	69eb      	ldr	r3, [r5, #28]
 800c30c:	6862      	ldr	r2, [r4, #4]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c314:	6021      	str	r1, [r4, #0]
 800c316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	0800ec1e 	.word	0x0800ec1e
 800c320:	0800ed41 	.word	0x0800ed41

0800c324 <__multadd>:
 800c324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c328:	690d      	ldr	r5, [r1, #16]
 800c32a:	4607      	mov	r7, r0
 800c32c:	460c      	mov	r4, r1
 800c32e:	461e      	mov	r6, r3
 800c330:	f101 0c14 	add.w	ip, r1, #20
 800c334:	2000      	movs	r0, #0
 800c336:	f8dc 3000 	ldr.w	r3, [ip]
 800c33a:	b299      	uxth	r1, r3
 800c33c:	fb02 6101 	mla	r1, r2, r1, r6
 800c340:	0c1e      	lsrs	r6, r3, #16
 800c342:	0c0b      	lsrs	r3, r1, #16
 800c344:	fb02 3306 	mla	r3, r2, r6, r3
 800c348:	b289      	uxth	r1, r1
 800c34a:	3001      	adds	r0, #1
 800c34c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c350:	4285      	cmp	r5, r0
 800c352:	f84c 1b04 	str.w	r1, [ip], #4
 800c356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c35a:	dcec      	bgt.n	800c336 <__multadd+0x12>
 800c35c:	b30e      	cbz	r6, 800c3a2 <__multadd+0x7e>
 800c35e:	68a3      	ldr	r3, [r4, #8]
 800c360:	42ab      	cmp	r3, r5
 800c362:	dc19      	bgt.n	800c398 <__multadd+0x74>
 800c364:	6861      	ldr	r1, [r4, #4]
 800c366:	4638      	mov	r0, r7
 800c368:	3101      	adds	r1, #1
 800c36a:	f7ff ff79 	bl	800c260 <_Balloc>
 800c36e:	4680      	mov	r8, r0
 800c370:	b928      	cbnz	r0, 800c37e <__multadd+0x5a>
 800c372:	4602      	mov	r2, r0
 800c374:	4b0c      	ldr	r3, [pc, #48]	@ (800c3a8 <__multadd+0x84>)
 800c376:	480d      	ldr	r0, [pc, #52]	@ (800c3ac <__multadd+0x88>)
 800c378:	21ba      	movs	r1, #186	@ 0xba
 800c37a:	f7ff f805 	bl	800b388 <__assert_func>
 800c37e:	6922      	ldr	r2, [r4, #16]
 800c380:	3202      	adds	r2, #2
 800c382:	f104 010c 	add.w	r1, r4, #12
 800c386:	0092      	lsls	r2, r2, #2
 800c388:	300c      	adds	r0, #12
 800c38a:	f001 fe4b 	bl	800e024 <memcpy>
 800c38e:	4621      	mov	r1, r4
 800c390:	4638      	mov	r0, r7
 800c392:	f7ff ffa5 	bl	800c2e0 <_Bfree>
 800c396:	4644      	mov	r4, r8
 800c398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c39c:	3501      	adds	r5, #1
 800c39e:	615e      	str	r6, [r3, #20]
 800c3a0:	6125      	str	r5, [r4, #16]
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a8:	0800ed30 	.word	0x0800ed30
 800c3ac:	0800ed41 	.word	0x0800ed41

0800c3b0 <__s2b>:
 800c3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	4615      	mov	r5, r2
 800c3b8:	461f      	mov	r7, r3
 800c3ba:	2209      	movs	r2, #9
 800c3bc:	3308      	adds	r3, #8
 800c3be:	4606      	mov	r6, r0
 800c3c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	db09      	blt.n	800c3e0 <__s2b+0x30>
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7ff ff47 	bl	800c260 <_Balloc>
 800c3d2:	b940      	cbnz	r0, 800c3e6 <__s2b+0x36>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	4b19      	ldr	r3, [pc, #100]	@ (800c43c <__s2b+0x8c>)
 800c3d8:	4819      	ldr	r0, [pc, #100]	@ (800c440 <__s2b+0x90>)
 800c3da:	21d3      	movs	r1, #211	@ 0xd3
 800c3dc:	f7fe ffd4 	bl	800b388 <__assert_func>
 800c3e0:	0052      	lsls	r2, r2, #1
 800c3e2:	3101      	adds	r1, #1
 800c3e4:	e7f0      	b.n	800c3c8 <__s2b+0x18>
 800c3e6:	9b08      	ldr	r3, [sp, #32]
 800c3e8:	6143      	str	r3, [r0, #20]
 800c3ea:	2d09      	cmp	r5, #9
 800c3ec:	f04f 0301 	mov.w	r3, #1
 800c3f0:	6103      	str	r3, [r0, #16]
 800c3f2:	dd16      	ble.n	800c422 <__s2b+0x72>
 800c3f4:	f104 0909 	add.w	r9, r4, #9
 800c3f8:	46c8      	mov	r8, r9
 800c3fa:	442c      	add	r4, r5
 800c3fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c400:	4601      	mov	r1, r0
 800c402:	3b30      	subs	r3, #48	@ 0x30
 800c404:	220a      	movs	r2, #10
 800c406:	4630      	mov	r0, r6
 800c408:	f7ff ff8c 	bl	800c324 <__multadd>
 800c40c:	45a0      	cmp	r8, r4
 800c40e:	d1f5      	bne.n	800c3fc <__s2b+0x4c>
 800c410:	f1a5 0408 	sub.w	r4, r5, #8
 800c414:	444c      	add	r4, r9
 800c416:	1b2d      	subs	r5, r5, r4
 800c418:	1963      	adds	r3, r4, r5
 800c41a:	42bb      	cmp	r3, r7
 800c41c:	db04      	blt.n	800c428 <__s2b+0x78>
 800c41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c422:	340a      	adds	r4, #10
 800c424:	2509      	movs	r5, #9
 800c426:	e7f6      	b.n	800c416 <__s2b+0x66>
 800c428:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c42c:	4601      	mov	r1, r0
 800c42e:	3b30      	subs	r3, #48	@ 0x30
 800c430:	220a      	movs	r2, #10
 800c432:	4630      	mov	r0, r6
 800c434:	f7ff ff76 	bl	800c324 <__multadd>
 800c438:	e7ee      	b.n	800c418 <__s2b+0x68>
 800c43a:	bf00      	nop
 800c43c:	0800ed30 	.word	0x0800ed30
 800c440:	0800ed41 	.word	0x0800ed41

0800c444 <__hi0bits>:
 800c444:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c448:	4603      	mov	r3, r0
 800c44a:	bf36      	itet	cc
 800c44c:	0403      	lslcc	r3, r0, #16
 800c44e:	2000      	movcs	r0, #0
 800c450:	2010      	movcc	r0, #16
 800c452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c456:	bf3c      	itt	cc
 800c458:	021b      	lslcc	r3, r3, #8
 800c45a:	3008      	addcc	r0, #8
 800c45c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c460:	bf3c      	itt	cc
 800c462:	011b      	lslcc	r3, r3, #4
 800c464:	3004      	addcc	r0, #4
 800c466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c46a:	bf3c      	itt	cc
 800c46c:	009b      	lslcc	r3, r3, #2
 800c46e:	3002      	addcc	r0, #2
 800c470:	2b00      	cmp	r3, #0
 800c472:	db05      	blt.n	800c480 <__hi0bits+0x3c>
 800c474:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c478:	f100 0001 	add.w	r0, r0, #1
 800c47c:	bf08      	it	eq
 800c47e:	2020      	moveq	r0, #32
 800c480:	4770      	bx	lr

0800c482 <__lo0bits>:
 800c482:	6803      	ldr	r3, [r0, #0]
 800c484:	4602      	mov	r2, r0
 800c486:	f013 0007 	ands.w	r0, r3, #7
 800c48a:	d00b      	beq.n	800c4a4 <__lo0bits+0x22>
 800c48c:	07d9      	lsls	r1, r3, #31
 800c48e:	d421      	bmi.n	800c4d4 <__lo0bits+0x52>
 800c490:	0798      	lsls	r0, r3, #30
 800c492:	bf49      	itett	mi
 800c494:	085b      	lsrmi	r3, r3, #1
 800c496:	089b      	lsrpl	r3, r3, #2
 800c498:	2001      	movmi	r0, #1
 800c49a:	6013      	strmi	r3, [r2, #0]
 800c49c:	bf5c      	itt	pl
 800c49e:	6013      	strpl	r3, [r2, #0]
 800c4a0:	2002      	movpl	r0, #2
 800c4a2:	4770      	bx	lr
 800c4a4:	b299      	uxth	r1, r3
 800c4a6:	b909      	cbnz	r1, 800c4ac <__lo0bits+0x2a>
 800c4a8:	0c1b      	lsrs	r3, r3, #16
 800c4aa:	2010      	movs	r0, #16
 800c4ac:	b2d9      	uxtb	r1, r3
 800c4ae:	b909      	cbnz	r1, 800c4b4 <__lo0bits+0x32>
 800c4b0:	3008      	adds	r0, #8
 800c4b2:	0a1b      	lsrs	r3, r3, #8
 800c4b4:	0719      	lsls	r1, r3, #28
 800c4b6:	bf04      	itt	eq
 800c4b8:	091b      	lsreq	r3, r3, #4
 800c4ba:	3004      	addeq	r0, #4
 800c4bc:	0799      	lsls	r1, r3, #30
 800c4be:	bf04      	itt	eq
 800c4c0:	089b      	lsreq	r3, r3, #2
 800c4c2:	3002      	addeq	r0, #2
 800c4c4:	07d9      	lsls	r1, r3, #31
 800c4c6:	d403      	bmi.n	800c4d0 <__lo0bits+0x4e>
 800c4c8:	085b      	lsrs	r3, r3, #1
 800c4ca:	f100 0001 	add.w	r0, r0, #1
 800c4ce:	d003      	beq.n	800c4d8 <__lo0bits+0x56>
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	4770      	bx	lr
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	4770      	bx	lr
 800c4d8:	2020      	movs	r0, #32
 800c4da:	4770      	bx	lr

0800c4dc <__i2b>:
 800c4dc:	b510      	push	{r4, lr}
 800c4de:	460c      	mov	r4, r1
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	f7ff febd 	bl	800c260 <_Balloc>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	b928      	cbnz	r0, 800c4f6 <__i2b+0x1a>
 800c4ea:	4b05      	ldr	r3, [pc, #20]	@ (800c500 <__i2b+0x24>)
 800c4ec:	4805      	ldr	r0, [pc, #20]	@ (800c504 <__i2b+0x28>)
 800c4ee:	f240 1145 	movw	r1, #325	@ 0x145
 800c4f2:	f7fe ff49 	bl	800b388 <__assert_func>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	6144      	str	r4, [r0, #20]
 800c4fa:	6103      	str	r3, [r0, #16]
 800c4fc:	bd10      	pop	{r4, pc}
 800c4fe:	bf00      	nop
 800c500:	0800ed30 	.word	0x0800ed30
 800c504:	0800ed41 	.word	0x0800ed41

0800c508 <__multiply>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	4614      	mov	r4, r2
 800c50e:	690a      	ldr	r2, [r1, #16]
 800c510:	6923      	ldr	r3, [r4, #16]
 800c512:	429a      	cmp	r2, r3
 800c514:	bfa8      	it	ge
 800c516:	4623      	movge	r3, r4
 800c518:	460f      	mov	r7, r1
 800c51a:	bfa4      	itt	ge
 800c51c:	460c      	movge	r4, r1
 800c51e:	461f      	movge	r7, r3
 800c520:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c524:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c528:	68a3      	ldr	r3, [r4, #8]
 800c52a:	6861      	ldr	r1, [r4, #4]
 800c52c:	eb0a 0609 	add.w	r6, sl, r9
 800c530:	42b3      	cmp	r3, r6
 800c532:	b085      	sub	sp, #20
 800c534:	bfb8      	it	lt
 800c536:	3101      	addlt	r1, #1
 800c538:	f7ff fe92 	bl	800c260 <_Balloc>
 800c53c:	b930      	cbnz	r0, 800c54c <__multiply+0x44>
 800c53e:	4602      	mov	r2, r0
 800c540:	4b44      	ldr	r3, [pc, #272]	@ (800c654 <__multiply+0x14c>)
 800c542:	4845      	ldr	r0, [pc, #276]	@ (800c658 <__multiply+0x150>)
 800c544:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c548:	f7fe ff1e 	bl	800b388 <__assert_func>
 800c54c:	f100 0514 	add.w	r5, r0, #20
 800c550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c554:	462b      	mov	r3, r5
 800c556:	2200      	movs	r2, #0
 800c558:	4543      	cmp	r3, r8
 800c55a:	d321      	bcc.n	800c5a0 <__multiply+0x98>
 800c55c:	f107 0114 	add.w	r1, r7, #20
 800c560:	f104 0214 	add.w	r2, r4, #20
 800c564:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c568:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c56c:	9302      	str	r3, [sp, #8]
 800c56e:	1b13      	subs	r3, r2, r4
 800c570:	3b15      	subs	r3, #21
 800c572:	f023 0303 	bic.w	r3, r3, #3
 800c576:	3304      	adds	r3, #4
 800c578:	f104 0715 	add.w	r7, r4, #21
 800c57c:	42ba      	cmp	r2, r7
 800c57e:	bf38      	it	cc
 800c580:	2304      	movcc	r3, #4
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	9b02      	ldr	r3, [sp, #8]
 800c586:	9103      	str	r1, [sp, #12]
 800c588:	428b      	cmp	r3, r1
 800c58a:	d80c      	bhi.n	800c5a6 <__multiply+0x9e>
 800c58c:	2e00      	cmp	r6, #0
 800c58e:	dd03      	ble.n	800c598 <__multiply+0x90>
 800c590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c594:	2b00      	cmp	r3, #0
 800c596:	d05b      	beq.n	800c650 <__multiply+0x148>
 800c598:	6106      	str	r6, [r0, #16]
 800c59a:	b005      	add	sp, #20
 800c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a0:	f843 2b04 	str.w	r2, [r3], #4
 800c5a4:	e7d8      	b.n	800c558 <__multiply+0x50>
 800c5a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c5aa:	f1ba 0f00 	cmp.w	sl, #0
 800c5ae:	d024      	beq.n	800c5fa <__multiply+0xf2>
 800c5b0:	f104 0e14 	add.w	lr, r4, #20
 800c5b4:	46a9      	mov	r9, r5
 800c5b6:	f04f 0c00 	mov.w	ip, #0
 800c5ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5be:	f8d9 3000 	ldr.w	r3, [r9]
 800c5c2:	fa1f fb87 	uxth.w	fp, r7
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c5cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c5d0:	f8d9 7000 	ldr.w	r7, [r9]
 800c5d4:	4463      	add	r3, ip
 800c5d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c5da:	fb0a c70b 	mla	r7, sl, fp, ip
 800c5de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c5e8:	4572      	cmp	r2, lr
 800c5ea:	f849 3b04 	str.w	r3, [r9], #4
 800c5ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c5f2:	d8e2      	bhi.n	800c5ba <__multiply+0xb2>
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	f845 c003 	str.w	ip, [r5, r3]
 800c5fa:	9b03      	ldr	r3, [sp, #12]
 800c5fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c600:	3104      	adds	r1, #4
 800c602:	f1b9 0f00 	cmp.w	r9, #0
 800c606:	d021      	beq.n	800c64c <__multiply+0x144>
 800c608:	682b      	ldr	r3, [r5, #0]
 800c60a:	f104 0c14 	add.w	ip, r4, #20
 800c60e:	46ae      	mov	lr, r5
 800c610:	f04f 0a00 	mov.w	sl, #0
 800c614:	f8bc b000 	ldrh.w	fp, [ip]
 800c618:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c61c:	fb09 770b 	mla	r7, r9, fp, r7
 800c620:	4457      	add	r7, sl
 800c622:	b29b      	uxth	r3, r3
 800c624:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c628:	f84e 3b04 	str.w	r3, [lr], #4
 800c62c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c634:	f8be 3000 	ldrh.w	r3, [lr]
 800c638:	fb09 330a 	mla	r3, r9, sl, r3
 800c63c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c640:	4562      	cmp	r2, ip
 800c642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c646:	d8e5      	bhi.n	800c614 <__multiply+0x10c>
 800c648:	9f01      	ldr	r7, [sp, #4]
 800c64a:	51eb      	str	r3, [r5, r7]
 800c64c:	3504      	adds	r5, #4
 800c64e:	e799      	b.n	800c584 <__multiply+0x7c>
 800c650:	3e01      	subs	r6, #1
 800c652:	e79b      	b.n	800c58c <__multiply+0x84>
 800c654:	0800ed30 	.word	0x0800ed30
 800c658:	0800ed41 	.word	0x0800ed41

0800c65c <__pow5mult>:
 800c65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c660:	4615      	mov	r5, r2
 800c662:	f012 0203 	ands.w	r2, r2, #3
 800c666:	4607      	mov	r7, r0
 800c668:	460e      	mov	r6, r1
 800c66a:	d007      	beq.n	800c67c <__pow5mult+0x20>
 800c66c:	4c25      	ldr	r4, [pc, #148]	@ (800c704 <__pow5mult+0xa8>)
 800c66e:	3a01      	subs	r2, #1
 800c670:	2300      	movs	r3, #0
 800c672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c676:	f7ff fe55 	bl	800c324 <__multadd>
 800c67a:	4606      	mov	r6, r0
 800c67c:	10ad      	asrs	r5, r5, #2
 800c67e:	d03d      	beq.n	800c6fc <__pow5mult+0xa0>
 800c680:	69fc      	ldr	r4, [r7, #28]
 800c682:	b97c      	cbnz	r4, 800c6a4 <__pow5mult+0x48>
 800c684:	2010      	movs	r0, #16
 800c686:	f7ff fd35 	bl	800c0f4 <malloc>
 800c68a:	4602      	mov	r2, r0
 800c68c:	61f8      	str	r0, [r7, #28]
 800c68e:	b928      	cbnz	r0, 800c69c <__pow5mult+0x40>
 800c690:	4b1d      	ldr	r3, [pc, #116]	@ (800c708 <__pow5mult+0xac>)
 800c692:	481e      	ldr	r0, [pc, #120]	@ (800c70c <__pow5mult+0xb0>)
 800c694:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c698:	f7fe fe76 	bl	800b388 <__assert_func>
 800c69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6a0:	6004      	str	r4, [r0, #0]
 800c6a2:	60c4      	str	r4, [r0, #12]
 800c6a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6ac:	b94c      	cbnz	r4, 800c6c2 <__pow5mult+0x66>
 800c6ae:	f240 2171 	movw	r1, #625	@ 0x271
 800c6b2:	4638      	mov	r0, r7
 800c6b4:	f7ff ff12 	bl	800c4dc <__i2b>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6be:	4604      	mov	r4, r0
 800c6c0:	6003      	str	r3, [r0, #0]
 800c6c2:	f04f 0900 	mov.w	r9, #0
 800c6c6:	07eb      	lsls	r3, r5, #31
 800c6c8:	d50a      	bpl.n	800c6e0 <__pow5mult+0x84>
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4622      	mov	r2, r4
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	f7ff ff1a 	bl	800c508 <__multiply>
 800c6d4:	4631      	mov	r1, r6
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	4638      	mov	r0, r7
 800c6da:	f7ff fe01 	bl	800c2e0 <_Bfree>
 800c6de:	4646      	mov	r6, r8
 800c6e0:	106d      	asrs	r5, r5, #1
 800c6e2:	d00b      	beq.n	800c6fc <__pow5mult+0xa0>
 800c6e4:	6820      	ldr	r0, [r4, #0]
 800c6e6:	b938      	cbnz	r0, 800c6f8 <__pow5mult+0x9c>
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f7ff ff0b 	bl	800c508 <__multiply>
 800c6f2:	6020      	str	r0, [r4, #0]
 800c6f4:	f8c0 9000 	str.w	r9, [r0]
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	e7e4      	b.n	800c6c6 <__pow5mult+0x6a>
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c702:	bf00      	nop
 800c704:	0800ed9c 	.word	0x0800ed9c
 800c708:	0800ec1e 	.word	0x0800ec1e
 800c70c:	0800ed41 	.word	0x0800ed41

0800c710 <__lshift>:
 800c710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	6849      	ldr	r1, [r1, #4]
 800c718:	6923      	ldr	r3, [r4, #16]
 800c71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c71e:	68a3      	ldr	r3, [r4, #8]
 800c720:	4607      	mov	r7, r0
 800c722:	4691      	mov	r9, r2
 800c724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c728:	f108 0601 	add.w	r6, r8, #1
 800c72c:	42b3      	cmp	r3, r6
 800c72e:	db0b      	blt.n	800c748 <__lshift+0x38>
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff fd95 	bl	800c260 <_Balloc>
 800c736:	4605      	mov	r5, r0
 800c738:	b948      	cbnz	r0, 800c74e <__lshift+0x3e>
 800c73a:	4602      	mov	r2, r0
 800c73c:	4b28      	ldr	r3, [pc, #160]	@ (800c7e0 <__lshift+0xd0>)
 800c73e:	4829      	ldr	r0, [pc, #164]	@ (800c7e4 <__lshift+0xd4>)
 800c740:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c744:	f7fe fe20 	bl	800b388 <__assert_func>
 800c748:	3101      	adds	r1, #1
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	e7ee      	b.n	800c72c <__lshift+0x1c>
 800c74e:	2300      	movs	r3, #0
 800c750:	f100 0114 	add.w	r1, r0, #20
 800c754:	f100 0210 	add.w	r2, r0, #16
 800c758:	4618      	mov	r0, r3
 800c75a:	4553      	cmp	r3, sl
 800c75c:	db33      	blt.n	800c7c6 <__lshift+0xb6>
 800c75e:	6920      	ldr	r0, [r4, #16]
 800c760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c764:	f104 0314 	add.w	r3, r4, #20
 800c768:	f019 091f 	ands.w	r9, r9, #31
 800c76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c774:	d02b      	beq.n	800c7ce <__lshift+0xbe>
 800c776:	f1c9 0e20 	rsb	lr, r9, #32
 800c77a:	468a      	mov	sl, r1
 800c77c:	2200      	movs	r2, #0
 800c77e:	6818      	ldr	r0, [r3, #0]
 800c780:	fa00 f009 	lsl.w	r0, r0, r9
 800c784:	4310      	orrs	r0, r2
 800c786:	f84a 0b04 	str.w	r0, [sl], #4
 800c78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c78e:	459c      	cmp	ip, r3
 800c790:	fa22 f20e 	lsr.w	r2, r2, lr
 800c794:	d8f3      	bhi.n	800c77e <__lshift+0x6e>
 800c796:	ebac 0304 	sub.w	r3, ip, r4
 800c79a:	3b15      	subs	r3, #21
 800c79c:	f023 0303 	bic.w	r3, r3, #3
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	f104 0015 	add.w	r0, r4, #21
 800c7a6:	4584      	cmp	ip, r0
 800c7a8:	bf38      	it	cc
 800c7aa:	2304      	movcc	r3, #4
 800c7ac:	50ca      	str	r2, [r1, r3]
 800c7ae:	b10a      	cbz	r2, 800c7b4 <__lshift+0xa4>
 800c7b0:	f108 0602 	add.w	r6, r8, #2
 800c7b4:	3e01      	subs	r6, #1
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	612e      	str	r6, [r5, #16]
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	f7ff fd90 	bl	800c2e0 <_Bfree>
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	e7c5      	b.n	800c75a <__lshift+0x4a>
 800c7ce:	3904      	subs	r1, #4
 800c7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7d8:	459c      	cmp	ip, r3
 800c7da:	d8f9      	bhi.n	800c7d0 <__lshift+0xc0>
 800c7dc:	e7ea      	b.n	800c7b4 <__lshift+0xa4>
 800c7de:	bf00      	nop
 800c7e0:	0800ed30 	.word	0x0800ed30
 800c7e4:	0800ed41 	.word	0x0800ed41

0800c7e8 <__mcmp>:
 800c7e8:	690a      	ldr	r2, [r1, #16]
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	6900      	ldr	r0, [r0, #16]
 800c7ee:	1a80      	subs	r0, r0, r2
 800c7f0:	b530      	push	{r4, r5, lr}
 800c7f2:	d10e      	bne.n	800c812 <__mcmp+0x2a>
 800c7f4:	3314      	adds	r3, #20
 800c7f6:	3114      	adds	r1, #20
 800c7f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c800:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c804:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c808:	4295      	cmp	r5, r2
 800c80a:	d003      	beq.n	800c814 <__mcmp+0x2c>
 800c80c:	d205      	bcs.n	800c81a <__mcmp+0x32>
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295
 800c812:	bd30      	pop	{r4, r5, pc}
 800c814:	42a3      	cmp	r3, r4
 800c816:	d3f3      	bcc.n	800c800 <__mcmp+0x18>
 800c818:	e7fb      	b.n	800c812 <__mcmp+0x2a>
 800c81a:	2001      	movs	r0, #1
 800c81c:	e7f9      	b.n	800c812 <__mcmp+0x2a>
	...

0800c820 <__mdiff>:
 800c820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	4689      	mov	r9, r1
 800c826:	4606      	mov	r6, r0
 800c828:	4611      	mov	r1, r2
 800c82a:	4648      	mov	r0, r9
 800c82c:	4614      	mov	r4, r2
 800c82e:	f7ff ffdb 	bl	800c7e8 <__mcmp>
 800c832:	1e05      	subs	r5, r0, #0
 800c834:	d112      	bne.n	800c85c <__mdiff+0x3c>
 800c836:	4629      	mov	r1, r5
 800c838:	4630      	mov	r0, r6
 800c83a:	f7ff fd11 	bl	800c260 <_Balloc>
 800c83e:	4602      	mov	r2, r0
 800c840:	b928      	cbnz	r0, 800c84e <__mdiff+0x2e>
 800c842:	4b3f      	ldr	r3, [pc, #252]	@ (800c940 <__mdiff+0x120>)
 800c844:	f240 2137 	movw	r1, #567	@ 0x237
 800c848:	483e      	ldr	r0, [pc, #248]	@ (800c944 <__mdiff+0x124>)
 800c84a:	f7fe fd9d 	bl	800b388 <__assert_func>
 800c84e:	2301      	movs	r3, #1
 800c850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c854:	4610      	mov	r0, r2
 800c856:	b003      	add	sp, #12
 800c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85c:	bfbc      	itt	lt
 800c85e:	464b      	movlt	r3, r9
 800c860:	46a1      	movlt	r9, r4
 800c862:	4630      	mov	r0, r6
 800c864:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c868:	bfba      	itte	lt
 800c86a:	461c      	movlt	r4, r3
 800c86c:	2501      	movlt	r5, #1
 800c86e:	2500      	movge	r5, #0
 800c870:	f7ff fcf6 	bl	800c260 <_Balloc>
 800c874:	4602      	mov	r2, r0
 800c876:	b918      	cbnz	r0, 800c880 <__mdiff+0x60>
 800c878:	4b31      	ldr	r3, [pc, #196]	@ (800c940 <__mdiff+0x120>)
 800c87a:	f240 2145 	movw	r1, #581	@ 0x245
 800c87e:	e7e3      	b.n	800c848 <__mdiff+0x28>
 800c880:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c884:	6926      	ldr	r6, [r4, #16]
 800c886:	60c5      	str	r5, [r0, #12]
 800c888:	f109 0310 	add.w	r3, r9, #16
 800c88c:	f109 0514 	add.w	r5, r9, #20
 800c890:	f104 0e14 	add.w	lr, r4, #20
 800c894:	f100 0b14 	add.w	fp, r0, #20
 800c898:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c89c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	46d9      	mov	r9, fp
 800c8a4:	f04f 0c00 	mov.w	ip, #0
 800c8a8:	9b01      	ldr	r3, [sp, #4]
 800c8aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c8ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c8b2:	9301      	str	r3, [sp, #4]
 800c8b4:	fa1f f38a 	uxth.w	r3, sl
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	b283      	uxth	r3, r0
 800c8bc:	1acb      	subs	r3, r1, r3
 800c8be:	0c00      	lsrs	r0, r0, #16
 800c8c0:	4463      	add	r3, ip
 800c8c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c8c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c8d0:	4576      	cmp	r6, lr
 800c8d2:	f849 3b04 	str.w	r3, [r9], #4
 800c8d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8da:	d8e5      	bhi.n	800c8a8 <__mdiff+0x88>
 800c8dc:	1b33      	subs	r3, r6, r4
 800c8de:	3b15      	subs	r3, #21
 800c8e0:	f023 0303 	bic.w	r3, r3, #3
 800c8e4:	3415      	adds	r4, #21
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	42a6      	cmp	r6, r4
 800c8ea:	bf38      	it	cc
 800c8ec:	2304      	movcc	r3, #4
 800c8ee:	441d      	add	r5, r3
 800c8f0:	445b      	add	r3, fp
 800c8f2:	461e      	mov	r6, r3
 800c8f4:	462c      	mov	r4, r5
 800c8f6:	4544      	cmp	r4, r8
 800c8f8:	d30e      	bcc.n	800c918 <__mdiff+0xf8>
 800c8fa:	f108 0103 	add.w	r1, r8, #3
 800c8fe:	1b49      	subs	r1, r1, r5
 800c900:	f021 0103 	bic.w	r1, r1, #3
 800c904:	3d03      	subs	r5, #3
 800c906:	45a8      	cmp	r8, r5
 800c908:	bf38      	it	cc
 800c90a:	2100      	movcc	r1, #0
 800c90c:	440b      	add	r3, r1
 800c90e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c912:	b191      	cbz	r1, 800c93a <__mdiff+0x11a>
 800c914:	6117      	str	r7, [r2, #16]
 800c916:	e79d      	b.n	800c854 <__mdiff+0x34>
 800c918:	f854 1b04 	ldr.w	r1, [r4], #4
 800c91c:	46e6      	mov	lr, ip
 800c91e:	0c08      	lsrs	r0, r1, #16
 800c920:	fa1c fc81 	uxtah	ip, ip, r1
 800c924:	4471      	add	r1, lr
 800c926:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c92a:	b289      	uxth	r1, r1
 800c92c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c930:	f846 1b04 	str.w	r1, [r6], #4
 800c934:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c938:	e7dd      	b.n	800c8f6 <__mdiff+0xd6>
 800c93a:	3f01      	subs	r7, #1
 800c93c:	e7e7      	b.n	800c90e <__mdiff+0xee>
 800c93e:	bf00      	nop
 800c940:	0800ed30 	.word	0x0800ed30
 800c944:	0800ed41 	.word	0x0800ed41

0800c948 <__ulp>:
 800c948:	b082      	sub	sp, #8
 800c94a:	ed8d 0b00 	vstr	d0, [sp]
 800c94e:	9a01      	ldr	r2, [sp, #4]
 800c950:	4b0f      	ldr	r3, [pc, #60]	@ (800c990 <__ulp+0x48>)
 800c952:	4013      	ands	r3, r2
 800c954:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	dc08      	bgt.n	800c96e <__ulp+0x26>
 800c95c:	425b      	negs	r3, r3
 800c95e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c962:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c966:	da04      	bge.n	800c972 <__ulp+0x2a>
 800c968:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c96c:	4113      	asrs	r3, r2
 800c96e:	2200      	movs	r2, #0
 800c970:	e008      	b.n	800c984 <__ulp+0x3c>
 800c972:	f1a2 0314 	sub.w	r3, r2, #20
 800c976:	2b1e      	cmp	r3, #30
 800c978:	bfda      	itte	le
 800c97a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c97e:	40da      	lsrle	r2, r3
 800c980:	2201      	movgt	r2, #1
 800c982:	2300      	movs	r3, #0
 800c984:	4619      	mov	r1, r3
 800c986:	4610      	mov	r0, r2
 800c988:	ec41 0b10 	vmov	d0, r0, r1
 800c98c:	b002      	add	sp, #8
 800c98e:	4770      	bx	lr
 800c990:	7ff00000 	.word	0x7ff00000

0800c994 <__b2d>:
 800c994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c998:	6906      	ldr	r6, [r0, #16]
 800c99a:	f100 0814 	add.w	r8, r0, #20
 800c99e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c9a2:	1f37      	subs	r7, r6, #4
 800c9a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	f7ff fd4b 	bl	800c444 <__hi0bits>
 800c9ae:	f1c0 0320 	rsb	r3, r0, #32
 800c9b2:	280a      	cmp	r0, #10
 800c9b4:	600b      	str	r3, [r1, #0]
 800c9b6:	491b      	ldr	r1, [pc, #108]	@ (800ca24 <__b2d+0x90>)
 800c9b8:	dc15      	bgt.n	800c9e6 <__b2d+0x52>
 800c9ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800c9be:	fa22 f30c 	lsr.w	r3, r2, ip
 800c9c2:	45b8      	cmp	r8, r7
 800c9c4:	ea43 0501 	orr.w	r5, r3, r1
 800c9c8:	bf34      	ite	cc
 800c9ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c9ce:	2300      	movcs	r3, #0
 800c9d0:	3015      	adds	r0, #21
 800c9d2:	fa02 f000 	lsl.w	r0, r2, r0
 800c9d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c9da:	4303      	orrs	r3, r0
 800c9dc:	461c      	mov	r4, r3
 800c9de:	ec45 4b10 	vmov	d0, r4, r5
 800c9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e6:	45b8      	cmp	r8, r7
 800c9e8:	bf3a      	itte	cc
 800c9ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c9ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800c9f2:	2300      	movcs	r3, #0
 800c9f4:	380b      	subs	r0, #11
 800c9f6:	d012      	beq.n	800ca1e <__b2d+0x8a>
 800c9f8:	f1c0 0120 	rsb	r1, r0, #32
 800c9fc:	fa23 f401 	lsr.w	r4, r3, r1
 800ca00:	4082      	lsls	r2, r0
 800ca02:	4322      	orrs	r2, r4
 800ca04:	4547      	cmp	r7, r8
 800ca06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ca0a:	bf8c      	ite	hi
 800ca0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ca10:	2200      	movls	r2, #0
 800ca12:	4083      	lsls	r3, r0
 800ca14:	40ca      	lsrs	r2, r1
 800ca16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	e7de      	b.n	800c9dc <__b2d+0x48>
 800ca1e:	ea42 0501 	orr.w	r5, r2, r1
 800ca22:	e7db      	b.n	800c9dc <__b2d+0x48>
 800ca24:	3ff00000 	.word	0x3ff00000

0800ca28 <__d2b>:
 800ca28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca2c:	460f      	mov	r7, r1
 800ca2e:	2101      	movs	r1, #1
 800ca30:	ec59 8b10 	vmov	r8, r9, d0
 800ca34:	4616      	mov	r6, r2
 800ca36:	f7ff fc13 	bl	800c260 <_Balloc>
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	b930      	cbnz	r0, 800ca4c <__d2b+0x24>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	4b23      	ldr	r3, [pc, #140]	@ (800cad0 <__d2b+0xa8>)
 800ca42:	4824      	ldr	r0, [pc, #144]	@ (800cad4 <__d2b+0xac>)
 800ca44:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca48:	f7fe fc9e 	bl	800b388 <__assert_func>
 800ca4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca54:	b10d      	cbz	r5, 800ca5a <__d2b+0x32>
 800ca56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	f1b8 0300 	subs.w	r3, r8, #0
 800ca60:	d023      	beq.n	800caaa <__d2b+0x82>
 800ca62:	4668      	mov	r0, sp
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	f7ff fd0c 	bl	800c482 <__lo0bits>
 800ca6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca6e:	b1d0      	cbz	r0, 800caa6 <__d2b+0x7e>
 800ca70:	f1c0 0320 	rsb	r3, r0, #32
 800ca74:	fa02 f303 	lsl.w	r3, r2, r3
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	40c2      	lsrs	r2, r0
 800ca7c:	6163      	str	r3, [r4, #20]
 800ca7e:	9201      	str	r2, [sp, #4]
 800ca80:	9b01      	ldr	r3, [sp, #4]
 800ca82:	61a3      	str	r3, [r4, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	bf0c      	ite	eq
 800ca88:	2201      	moveq	r2, #1
 800ca8a:	2202      	movne	r2, #2
 800ca8c:	6122      	str	r2, [r4, #16]
 800ca8e:	b1a5      	cbz	r5, 800caba <__d2b+0x92>
 800ca90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca94:	4405      	add	r5, r0
 800ca96:	603d      	str	r5, [r7, #0]
 800ca98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca9c:	6030      	str	r0, [r6, #0]
 800ca9e:	4620      	mov	r0, r4
 800caa0:	b003      	add	sp, #12
 800caa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caa6:	6161      	str	r1, [r4, #20]
 800caa8:	e7ea      	b.n	800ca80 <__d2b+0x58>
 800caaa:	a801      	add	r0, sp, #4
 800caac:	f7ff fce9 	bl	800c482 <__lo0bits>
 800cab0:	9b01      	ldr	r3, [sp, #4]
 800cab2:	6163      	str	r3, [r4, #20]
 800cab4:	3020      	adds	r0, #32
 800cab6:	2201      	movs	r2, #1
 800cab8:	e7e8      	b.n	800ca8c <__d2b+0x64>
 800caba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cabe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cac2:	6038      	str	r0, [r7, #0]
 800cac4:	6918      	ldr	r0, [r3, #16]
 800cac6:	f7ff fcbd 	bl	800c444 <__hi0bits>
 800caca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cace:	e7e5      	b.n	800ca9c <__d2b+0x74>
 800cad0:	0800ed30 	.word	0x0800ed30
 800cad4:	0800ed41 	.word	0x0800ed41

0800cad8 <__ratio>:
 800cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cadc:	b085      	sub	sp, #20
 800cade:	e9cd 1000 	strd	r1, r0, [sp]
 800cae2:	a902      	add	r1, sp, #8
 800cae4:	f7ff ff56 	bl	800c994 <__b2d>
 800cae8:	9800      	ldr	r0, [sp, #0]
 800caea:	a903      	add	r1, sp, #12
 800caec:	ec55 4b10 	vmov	r4, r5, d0
 800caf0:	f7ff ff50 	bl	800c994 <__b2d>
 800caf4:	9b01      	ldr	r3, [sp, #4]
 800caf6:	6919      	ldr	r1, [r3, #16]
 800caf8:	9b00      	ldr	r3, [sp, #0]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	1ac9      	subs	r1, r1, r3
 800cafe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cb02:	1a9b      	subs	r3, r3, r2
 800cb04:	ec5b ab10 	vmov	sl, fp, d0
 800cb08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	bfce      	itee	gt
 800cb10:	462a      	movgt	r2, r5
 800cb12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb16:	465a      	movle	r2, fp
 800cb18:	462f      	mov	r7, r5
 800cb1a:	46d9      	mov	r9, fp
 800cb1c:	bfcc      	ite	gt
 800cb1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cb26:	464b      	mov	r3, r9
 800cb28:	4652      	mov	r2, sl
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	f7f3 fec5 	bl	80008bc <__aeabi_ddiv>
 800cb32:	ec41 0b10 	vmov	d0, r0, r1
 800cb36:	b005      	add	sp, #20
 800cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb3c <__copybits>:
 800cb3c:	3901      	subs	r1, #1
 800cb3e:	b570      	push	{r4, r5, r6, lr}
 800cb40:	1149      	asrs	r1, r1, #5
 800cb42:	6914      	ldr	r4, [r2, #16]
 800cb44:	3101      	adds	r1, #1
 800cb46:	f102 0314 	add.w	r3, r2, #20
 800cb4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb52:	1f05      	subs	r5, r0, #4
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	d30c      	bcc.n	800cb72 <__copybits+0x36>
 800cb58:	1aa3      	subs	r3, r4, r2
 800cb5a:	3b11      	subs	r3, #17
 800cb5c:	f023 0303 	bic.w	r3, r3, #3
 800cb60:	3211      	adds	r2, #17
 800cb62:	42a2      	cmp	r2, r4
 800cb64:	bf88      	it	hi
 800cb66:	2300      	movhi	r3, #0
 800cb68:	4418      	add	r0, r3
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4288      	cmp	r0, r1
 800cb6e:	d305      	bcc.n	800cb7c <__copybits+0x40>
 800cb70:	bd70      	pop	{r4, r5, r6, pc}
 800cb72:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb76:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb7a:	e7eb      	b.n	800cb54 <__copybits+0x18>
 800cb7c:	f840 3b04 	str.w	r3, [r0], #4
 800cb80:	e7f4      	b.n	800cb6c <__copybits+0x30>

0800cb82 <__any_on>:
 800cb82:	f100 0214 	add.w	r2, r0, #20
 800cb86:	6900      	ldr	r0, [r0, #16]
 800cb88:	114b      	asrs	r3, r1, #5
 800cb8a:	4298      	cmp	r0, r3
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	db11      	blt.n	800cbb4 <__any_on+0x32>
 800cb90:	dd0a      	ble.n	800cba8 <__any_on+0x26>
 800cb92:	f011 011f 	ands.w	r1, r1, #31
 800cb96:	d007      	beq.n	800cba8 <__any_on+0x26>
 800cb98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb9c:	fa24 f001 	lsr.w	r0, r4, r1
 800cba0:	fa00 f101 	lsl.w	r1, r0, r1
 800cba4:	428c      	cmp	r4, r1
 800cba6:	d10b      	bne.n	800cbc0 <__any_on+0x3e>
 800cba8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d803      	bhi.n	800cbb8 <__any_on+0x36>
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	bd10      	pop	{r4, pc}
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	e7f7      	b.n	800cba8 <__any_on+0x26>
 800cbb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	d0f5      	beq.n	800cbac <__any_on+0x2a>
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	e7f6      	b.n	800cbb2 <__any_on+0x30>

0800cbc4 <sulp>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	460d      	mov	r5, r1
 800cbca:	ec45 4b10 	vmov	d0, r4, r5
 800cbce:	4616      	mov	r6, r2
 800cbd0:	f7ff feba 	bl	800c948 <__ulp>
 800cbd4:	ec51 0b10 	vmov	r0, r1, d0
 800cbd8:	b17e      	cbz	r6, 800cbfa <sulp+0x36>
 800cbda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cbde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	dd09      	ble.n	800cbfa <sulp+0x36>
 800cbe6:	051b      	lsls	r3, r3, #20
 800cbe8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cbec:	2400      	movs	r4, #0
 800cbee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	f7f3 fd37 	bl	8000668 <__aeabi_dmul>
 800cbfa:	ec41 0b10 	vmov	d0, r0, r1
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}

0800cc00 <_strtod_l>:
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	b09f      	sub	sp, #124	@ 0x7c
 800cc06:	460c      	mov	r4, r1
 800cc08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cc0e:	9005      	str	r0, [sp, #20]
 800cc10:	f04f 0a00 	mov.w	sl, #0
 800cc14:	f04f 0b00 	mov.w	fp, #0
 800cc18:	460a      	mov	r2, r1
 800cc1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc1c:	7811      	ldrb	r1, [r2, #0]
 800cc1e:	292b      	cmp	r1, #43	@ 0x2b
 800cc20:	d04a      	beq.n	800ccb8 <_strtod_l+0xb8>
 800cc22:	d838      	bhi.n	800cc96 <_strtod_l+0x96>
 800cc24:	290d      	cmp	r1, #13
 800cc26:	d832      	bhi.n	800cc8e <_strtod_l+0x8e>
 800cc28:	2908      	cmp	r1, #8
 800cc2a:	d832      	bhi.n	800cc92 <_strtod_l+0x92>
 800cc2c:	2900      	cmp	r1, #0
 800cc2e:	d03b      	beq.n	800cca8 <_strtod_l+0xa8>
 800cc30:	2200      	movs	r2, #0
 800cc32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cc36:	782a      	ldrb	r2, [r5, #0]
 800cc38:	2a30      	cmp	r2, #48	@ 0x30
 800cc3a:	f040 80b3 	bne.w	800cda4 <_strtod_l+0x1a4>
 800cc3e:	786a      	ldrb	r2, [r5, #1]
 800cc40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cc44:	2a58      	cmp	r2, #88	@ 0x58
 800cc46:	d16e      	bne.n	800cd26 <_strtod_l+0x126>
 800cc48:	9302      	str	r3, [sp, #8]
 800cc4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4a8e      	ldr	r2, [pc, #568]	@ (800ce8c <_strtod_l+0x28c>)
 800cc54:	9805      	ldr	r0, [sp, #20]
 800cc56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cc58:	a919      	add	r1, sp, #100	@ 0x64
 800cc5a:	f001 fa7b 	bl	800e154 <__gethex>
 800cc5e:	f010 060f 	ands.w	r6, r0, #15
 800cc62:	4604      	mov	r4, r0
 800cc64:	d005      	beq.n	800cc72 <_strtod_l+0x72>
 800cc66:	2e06      	cmp	r6, #6
 800cc68:	d128      	bne.n	800ccbc <_strtod_l+0xbc>
 800cc6a:	3501      	adds	r5, #1
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cc70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f040 858e 	bne.w	800d796 <_strtod_l+0xb96>
 800cc7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc7c:	b1cb      	cbz	r3, 800ccb2 <_strtod_l+0xb2>
 800cc7e:	4652      	mov	r2, sl
 800cc80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cc84:	ec43 2b10 	vmov	d0, r2, r3
 800cc88:	b01f      	add	sp, #124	@ 0x7c
 800cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8e:	2920      	cmp	r1, #32
 800cc90:	d1ce      	bne.n	800cc30 <_strtod_l+0x30>
 800cc92:	3201      	adds	r2, #1
 800cc94:	e7c1      	b.n	800cc1a <_strtod_l+0x1a>
 800cc96:	292d      	cmp	r1, #45	@ 0x2d
 800cc98:	d1ca      	bne.n	800cc30 <_strtod_l+0x30>
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cc9e:	1c51      	adds	r1, r2, #1
 800cca0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cca2:	7852      	ldrb	r2, [r2, #1]
 800cca4:	2a00      	cmp	r2, #0
 800cca6:	d1c5      	bne.n	800cc34 <_strtod_l+0x34>
 800cca8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ccaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f040 8570 	bne.w	800d792 <_strtod_l+0xb92>
 800ccb2:	4652      	mov	r2, sl
 800ccb4:	465b      	mov	r3, fp
 800ccb6:	e7e5      	b.n	800cc84 <_strtod_l+0x84>
 800ccb8:	2100      	movs	r1, #0
 800ccba:	e7ef      	b.n	800cc9c <_strtod_l+0x9c>
 800ccbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ccbe:	b13a      	cbz	r2, 800ccd0 <_strtod_l+0xd0>
 800ccc0:	2135      	movs	r1, #53	@ 0x35
 800ccc2:	a81c      	add	r0, sp, #112	@ 0x70
 800ccc4:	f7ff ff3a 	bl	800cb3c <__copybits>
 800ccc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccca:	9805      	ldr	r0, [sp, #20]
 800cccc:	f7ff fb08 	bl	800c2e0 <_Bfree>
 800ccd0:	3e01      	subs	r6, #1
 800ccd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ccd4:	2e04      	cmp	r6, #4
 800ccd6:	d806      	bhi.n	800cce6 <_strtod_l+0xe6>
 800ccd8:	e8df f006 	tbb	[pc, r6]
 800ccdc:	201d0314 	.word	0x201d0314
 800cce0:	14          	.byte	0x14
 800cce1:	00          	.byte	0x00
 800cce2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cce6:	05e1      	lsls	r1, r4, #23
 800cce8:	bf48      	it	mi
 800ccea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ccee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccf2:	0d1b      	lsrs	r3, r3, #20
 800ccf4:	051b      	lsls	r3, r3, #20
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1bb      	bne.n	800cc72 <_strtod_l+0x72>
 800ccfa:	f7fe fb11 	bl	800b320 <__errno>
 800ccfe:	2322      	movs	r3, #34	@ 0x22
 800cd00:	6003      	str	r3, [r0, #0]
 800cd02:	e7b6      	b.n	800cc72 <_strtod_l+0x72>
 800cd04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cd08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cd10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd14:	e7e7      	b.n	800cce6 <_strtod_l+0xe6>
 800cd16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ce94 <_strtod_l+0x294>
 800cd1a:	e7e4      	b.n	800cce6 <_strtod_l+0xe6>
 800cd1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cd20:	f04f 3aff 	mov.w	sl, #4294967295
 800cd24:	e7df      	b.n	800cce6 <_strtod_l+0xe6>
 800cd26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd2c:	785b      	ldrb	r3, [r3, #1]
 800cd2e:	2b30      	cmp	r3, #48	@ 0x30
 800cd30:	d0f9      	beq.n	800cd26 <_strtod_l+0x126>
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d09d      	beq.n	800cc72 <_strtod_l+0x72>
 800cd36:	2301      	movs	r3, #1
 800cd38:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd3e:	2300      	movs	r3, #0
 800cd40:	9308      	str	r3, [sp, #32]
 800cd42:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd44:	461f      	mov	r7, r3
 800cd46:	220a      	movs	r2, #10
 800cd48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cd4a:	7805      	ldrb	r5, [r0, #0]
 800cd4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cd50:	b2d9      	uxtb	r1, r3
 800cd52:	2909      	cmp	r1, #9
 800cd54:	d928      	bls.n	800cda8 <_strtod_l+0x1a8>
 800cd56:	494e      	ldr	r1, [pc, #312]	@ (800ce90 <_strtod_l+0x290>)
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f001 f941 	bl	800dfe0 <strncmp>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d032      	beq.n	800cdc8 <_strtod_l+0x1c8>
 800cd62:	2000      	movs	r0, #0
 800cd64:	462a      	mov	r2, r5
 800cd66:	4681      	mov	r9, r0
 800cd68:	463d      	mov	r5, r7
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2a65      	cmp	r2, #101	@ 0x65
 800cd6e:	d001      	beq.n	800cd74 <_strtod_l+0x174>
 800cd70:	2a45      	cmp	r2, #69	@ 0x45
 800cd72:	d114      	bne.n	800cd9e <_strtod_l+0x19e>
 800cd74:	b91d      	cbnz	r5, 800cd7e <_strtod_l+0x17e>
 800cd76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd78:	4302      	orrs	r2, r0
 800cd7a:	d095      	beq.n	800cca8 <_strtod_l+0xa8>
 800cd7c:	2500      	movs	r5, #0
 800cd7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cd80:	1c62      	adds	r2, r4, #1
 800cd82:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd84:	7862      	ldrb	r2, [r4, #1]
 800cd86:	2a2b      	cmp	r2, #43	@ 0x2b
 800cd88:	d077      	beq.n	800ce7a <_strtod_l+0x27a>
 800cd8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800cd8c:	d07b      	beq.n	800ce86 <_strtod_l+0x286>
 800cd8e:	f04f 0c00 	mov.w	ip, #0
 800cd92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cd96:	2909      	cmp	r1, #9
 800cd98:	f240 8082 	bls.w	800cea0 <_strtod_l+0x2a0>
 800cd9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cd9e:	f04f 0800 	mov.w	r8, #0
 800cda2:	e0a2      	b.n	800ceea <_strtod_l+0x2ea>
 800cda4:	2300      	movs	r3, #0
 800cda6:	e7c7      	b.n	800cd38 <_strtod_l+0x138>
 800cda8:	2f08      	cmp	r7, #8
 800cdaa:	bfd5      	itete	le
 800cdac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cdae:	9908      	ldrgt	r1, [sp, #32]
 800cdb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cdb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cdb8:	f100 0001 	add.w	r0, r0, #1
 800cdbc:	bfd4      	ite	le
 800cdbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cdc0:	9308      	strgt	r3, [sp, #32]
 800cdc2:	3701      	adds	r7, #1
 800cdc4:	9019      	str	r0, [sp, #100]	@ 0x64
 800cdc6:	e7bf      	b.n	800cd48 <_strtod_l+0x148>
 800cdc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdce:	785a      	ldrb	r2, [r3, #1]
 800cdd0:	b37f      	cbz	r7, 800ce32 <_strtod_l+0x232>
 800cdd2:	4681      	mov	r9, r0
 800cdd4:	463d      	mov	r5, r7
 800cdd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cdda:	2b09      	cmp	r3, #9
 800cddc:	d912      	bls.n	800ce04 <_strtod_l+0x204>
 800cdde:	2301      	movs	r3, #1
 800cde0:	e7c4      	b.n	800cd6c <_strtod_l+0x16c>
 800cde2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	9219      	str	r2, [sp, #100]	@ 0x64
 800cde8:	785a      	ldrb	r2, [r3, #1]
 800cdea:	3001      	adds	r0, #1
 800cdec:	2a30      	cmp	r2, #48	@ 0x30
 800cdee:	d0f8      	beq.n	800cde2 <_strtod_l+0x1e2>
 800cdf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	f200 84d3 	bhi.w	800d7a0 <_strtod_l+0xba0>
 800cdfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cdfe:	4681      	mov	r9, r0
 800ce00:	2000      	movs	r0, #0
 800ce02:	4605      	mov	r5, r0
 800ce04:	3a30      	subs	r2, #48	@ 0x30
 800ce06:	f100 0301 	add.w	r3, r0, #1
 800ce0a:	d02a      	beq.n	800ce62 <_strtod_l+0x262>
 800ce0c:	4499      	add	r9, r3
 800ce0e:	eb00 0c05 	add.w	ip, r0, r5
 800ce12:	462b      	mov	r3, r5
 800ce14:	210a      	movs	r1, #10
 800ce16:	4563      	cmp	r3, ip
 800ce18:	d10d      	bne.n	800ce36 <_strtod_l+0x236>
 800ce1a:	1c69      	adds	r1, r5, #1
 800ce1c:	4401      	add	r1, r0
 800ce1e:	4428      	add	r0, r5
 800ce20:	2808      	cmp	r0, #8
 800ce22:	dc16      	bgt.n	800ce52 <_strtod_l+0x252>
 800ce24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce26:	230a      	movs	r3, #10
 800ce28:	fb03 2300 	mla	r3, r3, r0, r2
 800ce2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e018      	b.n	800ce64 <_strtod_l+0x264>
 800ce32:	4638      	mov	r0, r7
 800ce34:	e7da      	b.n	800cdec <_strtod_l+0x1ec>
 800ce36:	2b08      	cmp	r3, #8
 800ce38:	f103 0301 	add.w	r3, r3, #1
 800ce3c:	dc03      	bgt.n	800ce46 <_strtod_l+0x246>
 800ce3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ce40:	434e      	muls	r6, r1
 800ce42:	960a      	str	r6, [sp, #40]	@ 0x28
 800ce44:	e7e7      	b.n	800ce16 <_strtod_l+0x216>
 800ce46:	2b10      	cmp	r3, #16
 800ce48:	bfde      	ittt	le
 800ce4a:	9e08      	ldrle	r6, [sp, #32]
 800ce4c:	434e      	mulle	r6, r1
 800ce4e:	9608      	strle	r6, [sp, #32]
 800ce50:	e7e1      	b.n	800ce16 <_strtod_l+0x216>
 800ce52:	280f      	cmp	r0, #15
 800ce54:	dceb      	bgt.n	800ce2e <_strtod_l+0x22e>
 800ce56:	9808      	ldr	r0, [sp, #32]
 800ce58:	230a      	movs	r3, #10
 800ce5a:	fb03 2300 	mla	r3, r3, r0, r2
 800ce5e:	9308      	str	r3, [sp, #32]
 800ce60:	e7e5      	b.n	800ce2e <_strtod_l+0x22e>
 800ce62:	4629      	mov	r1, r5
 800ce64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ce66:	1c50      	adds	r0, r2, #1
 800ce68:	9019      	str	r0, [sp, #100]	@ 0x64
 800ce6a:	7852      	ldrb	r2, [r2, #1]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	460d      	mov	r5, r1
 800ce70:	e7b1      	b.n	800cdd6 <_strtod_l+0x1d6>
 800ce72:	f04f 0900 	mov.w	r9, #0
 800ce76:	2301      	movs	r3, #1
 800ce78:	e77d      	b.n	800cd76 <_strtod_l+0x176>
 800ce7a:	f04f 0c00 	mov.w	ip, #0
 800ce7e:	1ca2      	adds	r2, r4, #2
 800ce80:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce82:	78a2      	ldrb	r2, [r4, #2]
 800ce84:	e785      	b.n	800cd92 <_strtod_l+0x192>
 800ce86:	f04f 0c01 	mov.w	ip, #1
 800ce8a:	e7f8      	b.n	800ce7e <_strtod_l+0x27e>
 800ce8c:	0800eeb0 	.word	0x0800eeb0
 800ce90:	0800ee98 	.word	0x0800ee98
 800ce94:	7ff00000 	.word	0x7ff00000
 800ce98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ce9a:	1c51      	adds	r1, r2, #1
 800ce9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ce9e:	7852      	ldrb	r2, [r2, #1]
 800cea0:	2a30      	cmp	r2, #48	@ 0x30
 800cea2:	d0f9      	beq.n	800ce98 <_strtod_l+0x298>
 800cea4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cea8:	2908      	cmp	r1, #8
 800ceaa:	f63f af78 	bhi.w	800cd9e <_strtod_l+0x19e>
 800ceae:	3a30      	subs	r2, #48	@ 0x30
 800ceb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ceb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ceb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ceb6:	f04f 080a 	mov.w	r8, #10
 800ceba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cebc:	1c56      	adds	r6, r2, #1
 800cebe:	9619      	str	r6, [sp, #100]	@ 0x64
 800cec0:	7852      	ldrb	r2, [r2, #1]
 800cec2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cec6:	f1be 0f09 	cmp.w	lr, #9
 800ceca:	d939      	bls.n	800cf40 <_strtod_l+0x340>
 800cecc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cece:	1a76      	subs	r6, r6, r1
 800ced0:	2e08      	cmp	r6, #8
 800ced2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ced6:	dc03      	bgt.n	800cee0 <_strtod_l+0x2e0>
 800ced8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ceda:	4588      	cmp	r8, r1
 800cedc:	bfa8      	it	ge
 800cede:	4688      	movge	r8, r1
 800cee0:	f1bc 0f00 	cmp.w	ip, #0
 800cee4:	d001      	beq.n	800ceea <_strtod_l+0x2ea>
 800cee6:	f1c8 0800 	rsb	r8, r8, #0
 800ceea:	2d00      	cmp	r5, #0
 800ceec:	d14e      	bne.n	800cf8c <_strtod_l+0x38c>
 800ceee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cef0:	4308      	orrs	r0, r1
 800cef2:	f47f aebe 	bne.w	800cc72 <_strtod_l+0x72>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f47f aed6 	bne.w	800cca8 <_strtod_l+0xa8>
 800cefc:	2a69      	cmp	r2, #105	@ 0x69
 800cefe:	d028      	beq.n	800cf52 <_strtod_l+0x352>
 800cf00:	dc25      	bgt.n	800cf4e <_strtod_l+0x34e>
 800cf02:	2a49      	cmp	r2, #73	@ 0x49
 800cf04:	d025      	beq.n	800cf52 <_strtod_l+0x352>
 800cf06:	2a4e      	cmp	r2, #78	@ 0x4e
 800cf08:	f47f aece 	bne.w	800cca8 <_strtod_l+0xa8>
 800cf0c:	499b      	ldr	r1, [pc, #620]	@ (800d17c <_strtod_l+0x57c>)
 800cf0e:	a819      	add	r0, sp, #100	@ 0x64
 800cf10:	f001 fb42 	bl	800e598 <__match>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	f43f aec7 	beq.w	800cca8 <_strtod_l+0xa8>
 800cf1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	2b28      	cmp	r3, #40	@ 0x28
 800cf20:	d12e      	bne.n	800cf80 <_strtod_l+0x380>
 800cf22:	4997      	ldr	r1, [pc, #604]	@ (800d180 <_strtod_l+0x580>)
 800cf24:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf26:	a819      	add	r0, sp, #100	@ 0x64
 800cf28:	f001 fb4a 	bl	800e5c0 <__hexnan>
 800cf2c:	2805      	cmp	r0, #5
 800cf2e:	d127      	bne.n	800cf80 <_strtod_l+0x380>
 800cf30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cf36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cf3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cf3e:	e698      	b.n	800cc72 <_strtod_l+0x72>
 800cf40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf42:	fb08 2101 	mla	r1, r8, r1, r2
 800cf46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cf4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf4c:	e7b5      	b.n	800ceba <_strtod_l+0x2ba>
 800cf4e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cf50:	e7da      	b.n	800cf08 <_strtod_l+0x308>
 800cf52:	498c      	ldr	r1, [pc, #560]	@ (800d184 <_strtod_l+0x584>)
 800cf54:	a819      	add	r0, sp, #100	@ 0x64
 800cf56:	f001 fb1f 	bl	800e598 <__match>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	f43f aea4 	beq.w	800cca8 <_strtod_l+0xa8>
 800cf60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf62:	4989      	ldr	r1, [pc, #548]	@ (800d188 <_strtod_l+0x588>)
 800cf64:	3b01      	subs	r3, #1
 800cf66:	a819      	add	r0, sp, #100	@ 0x64
 800cf68:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf6a:	f001 fb15 	bl	800e598 <__match>
 800cf6e:	b910      	cbnz	r0, 800cf76 <_strtod_l+0x376>
 800cf70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf72:	3301      	adds	r3, #1
 800cf74:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d198 <_strtod_l+0x598>
 800cf7a:	f04f 0a00 	mov.w	sl, #0
 800cf7e:	e678      	b.n	800cc72 <_strtod_l+0x72>
 800cf80:	4882      	ldr	r0, [pc, #520]	@ (800d18c <_strtod_l+0x58c>)
 800cf82:	f001 f85d 	bl	800e040 <nan>
 800cf86:	ec5b ab10 	vmov	sl, fp, d0
 800cf8a:	e672      	b.n	800cc72 <_strtod_l+0x72>
 800cf8c:	eba8 0309 	sub.w	r3, r8, r9
 800cf90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf92:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf94:	2f00      	cmp	r7, #0
 800cf96:	bf08      	it	eq
 800cf98:	462f      	moveq	r7, r5
 800cf9a:	2d10      	cmp	r5, #16
 800cf9c:	462c      	mov	r4, r5
 800cf9e:	bfa8      	it	ge
 800cfa0:	2410      	movge	r4, #16
 800cfa2:	f7f3 fae7 	bl	8000574 <__aeabi_ui2d>
 800cfa6:	2d09      	cmp	r5, #9
 800cfa8:	4682      	mov	sl, r0
 800cfaa:	468b      	mov	fp, r1
 800cfac:	dc13      	bgt.n	800cfd6 <_strtod_l+0x3d6>
 800cfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f43f ae5e 	beq.w	800cc72 <_strtod_l+0x72>
 800cfb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb8:	dd78      	ble.n	800d0ac <_strtod_l+0x4ac>
 800cfba:	2b16      	cmp	r3, #22
 800cfbc:	dc5f      	bgt.n	800d07e <_strtod_l+0x47e>
 800cfbe:	4974      	ldr	r1, [pc, #464]	@ (800d190 <_strtod_l+0x590>)
 800cfc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc8:	4652      	mov	r2, sl
 800cfca:	465b      	mov	r3, fp
 800cfcc:	f7f3 fb4c 	bl	8000668 <__aeabi_dmul>
 800cfd0:	4682      	mov	sl, r0
 800cfd2:	468b      	mov	fp, r1
 800cfd4:	e64d      	b.n	800cc72 <_strtod_l+0x72>
 800cfd6:	4b6e      	ldr	r3, [pc, #440]	@ (800d190 <_strtod_l+0x590>)
 800cfd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cfe0:	f7f3 fb42 	bl	8000668 <__aeabi_dmul>
 800cfe4:	4682      	mov	sl, r0
 800cfe6:	9808      	ldr	r0, [sp, #32]
 800cfe8:	468b      	mov	fp, r1
 800cfea:	f7f3 fac3 	bl	8000574 <__aeabi_ui2d>
 800cfee:	4602      	mov	r2, r0
 800cff0:	460b      	mov	r3, r1
 800cff2:	4650      	mov	r0, sl
 800cff4:	4659      	mov	r1, fp
 800cff6:	f7f3 f981 	bl	80002fc <__adddf3>
 800cffa:	2d0f      	cmp	r5, #15
 800cffc:	4682      	mov	sl, r0
 800cffe:	468b      	mov	fp, r1
 800d000:	ddd5      	ble.n	800cfae <_strtod_l+0x3ae>
 800d002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d004:	1b2c      	subs	r4, r5, r4
 800d006:	441c      	add	r4, r3
 800d008:	2c00      	cmp	r4, #0
 800d00a:	f340 8096 	ble.w	800d13a <_strtod_l+0x53a>
 800d00e:	f014 030f 	ands.w	r3, r4, #15
 800d012:	d00a      	beq.n	800d02a <_strtod_l+0x42a>
 800d014:	495e      	ldr	r1, [pc, #376]	@ (800d190 <_strtod_l+0x590>)
 800d016:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d01a:	4652      	mov	r2, sl
 800d01c:	465b      	mov	r3, fp
 800d01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d022:	f7f3 fb21 	bl	8000668 <__aeabi_dmul>
 800d026:	4682      	mov	sl, r0
 800d028:	468b      	mov	fp, r1
 800d02a:	f034 040f 	bics.w	r4, r4, #15
 800d02e:	d073      	beq.n	800d118 <_strtod_l+0x518>
 800d030:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d034:	dd48      	ble.n	800d0c8 <_strtod_l+0x4c8>
 800d036:	2400      	movs	r4, #0
 800d038:	46a0      	mov	r8, r4
 800d03a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d03c:	46a1      	mov	r9, r4
 800d03e:	9a05      	ldr	r2, [sp, #20]
 800d040:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d198 <_strtod_l+0x598>
 800d044:	2322      	movs	r3, #34	@ 0x22
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	f04f 0a00 	mov.w	sl, #0
 800d04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f43f ae0f 	beq.w	800cc72 <_strtod_l+0x72>
 800d054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d056:	9805      	ldr	r0, [sp, #20]
 800d058:	f7ff f942 	bl	800c2e0 <_Bfree>
 800d05c:	9805      	ldr	r0, [sp, #20]
 800d05e:	4649      	mov	r1, r9
 800d060:	f7ff f93e 	bl	800c2e0 <_Bfree>
 800d064:	9805      	ldr	r0, [sp, #20]
 800d066:	4641      	mov	r1, r8
 800d068:	f7ff f93a 	bl	800c2e0 <_Bfree>
 800d06c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d06e:	9805      	ldr	r0, [sp, #20]
 800d070:	f7ff f936 	bl	800c2e0 <_Bfree>
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	4621      	mov	r1, r4
 800d078:	f7ff f932 	bl	800c2e0 <_Bfree>
 800d07c:	e5f9      	b.n	800cc72 <_strtod_l+0x72>
 800d07e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d080:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d084:	4293      	cmp	r3, r2
 800d086:	dbbc      	blt.n	800d002 <_strtod_l+0x402>
 800d088:	4c41      	ldr	r4, [pc, #260]	@ (800d190 <_strtod_l+0x590>)
 800d08a:	f1c5 050f 	rsb	r5, r5, #15
 800d08e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d092:	4652      	mov	r2, sl
 800d094:	465b      	mov	r3, fp
 800d096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d09a:	f7f3 fae5 	bl	8000668 <__aeabi_dmul>
 800d09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a0:	1b5d      	subs	r5, r3, r5
 800d0a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0aa:	e78f      	b.n	800cfcc <_strtod_l+0x3cc>
 800d0ac:	3316      	adds	r3, #22
 800d0ae:	dba8      	blt.n	800d002 <_strtod_l+0x402>
 800d0b0:	4b37      	ldr	r3, [pc, #220]	@ (800d190 <_strtod_l+0x590>)
 800d0b2:	eba9 0808 	sub.w	r8, r9, r8
 800d0b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d0ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d0be:	4650      	mov	r0, sl
 800d0c0:	4659      	mov	r1, fp
 800d0c2:	f7f3 fbfb 	bl	80008bc <__aeabi_ddiv>
 800d0c6:	e783      	b.n	800cfd0 <_strtod_l+0x3d0>
 800d0c8:	4b32      	ldr	r3, [pc, #200]	@ (800d194 <_strtod_l+0x594>)
 800d0ca:	9308      	str	r3, [sp, #32]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	1124      	asrs	r4, r4, #4
 800d0d0:	4650      	mov	r0, sl
 800d0d2:	4659      	mov	r1, fp
 800d0d4:	461e      	mov	r6, r3
 800d0d6:	2c01      	cmp	r4, #1
 800d0d8:	dc21      	bgt.n	800d11e <_strtod_l+0x51e>
 800d0da:	b10b      	cbz	r3, 800d0e0 <_strtod_l+0x4e0>
 800d0dc:	4682      	mov	sl, r0
 800d0de:	468b      	mov	fp, r1
 800d0e0:	492c      	ldr	r1, [pc, #176]	@ (800d194 <_strtod_l+0x594>)
 800d0e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d0e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d0ea:	4652      	mov	r2, sl
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0f2:	f7f3 fab9 	bl	8000668 <__aeabi_dmul>
 800d0f6:	4b28      	ldr	r3, [pc, #160]	@ (800d198 <_strtod_l+0x598>)
 800d0f8:	460a      	mov	r2, r1
 800d0fa:	400b      	ands	r3, r1
 800d0fc:	4927      	ldr	r1, [pc, #156]	@ (800d19c <_strtod_l+0x59c>)
 800d0fe:	428b      	cmp	r3, r1
 800d100:	4682      	mov	sl, r0
 800d102:	d898      	bhi.n	800d036 <_strtod_l+0x436>
 800d104:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d108:	428b      	cmp	r3, r1
 800d10a:	bf86      	itte	hi
 800d10c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d1a0 <_strtod_l+0x5a0>
 800d110:	f04f 3aff 	movhi.w	sl, #4294967295
 800d114:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d118:	2300      	movs	r3, #0
 800d11a:	9308      	str	r3, [sp, #32]
 800d11c:	e07a      	b.n	800d214 <_strtod_l+0x614>
 800d11e:	07e2      	lsls	r2, r4, #31
 800d120:	d505      	bpl.n	800d12e <_strtod_l+0x52e>
 800d122:	9b08      	ldr	r3, [sp, #32]
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	f7f3 fa9e 	bl	8000668 <__aeabi_dmul>
 800d12c:	2301      	movs	r3, #1
 800d12e:	9a08      	ldr	r2, [sp, #32]
 800d130:	3208      	adds	r2, #8
 800d132:	3601      	adds	r6, #1
 800d134:	1064      	asrs	r4, r4, #1
 800d136:	9208      	str	r2, [sp, #32]
 800d138:	e7cd      	b.n	800d0d6 <_strtod_l+0x4d6>
 800d13a:	d0ed      	beq.n	800d118 <_strtod_l+0x518>
 800d13c:	4264      	negs	r4, r4
 800d13e:	f014 020f 	ands.w	r2, r4, #15
 800d142:	d00a      	beq.n	800d15a <_strtod_l+0x55a>
 800d144:	4b12      	ldr	r3, [pc, #72]	@ (800d190 <_strtod_l+0x590>)
 800d146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d14a:	4650      	mov	r0, sl
 800d14c:	4659      	mov	r1, fp
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7f3 fbb3 	bl	80008bc <__aeabi_ddiv>
 800d156:	4682      	mov	sl, r0
 800d158:	468b      	mov	fp, r1
 800d15a:	1124      	asrs	r4, r4, #4
 800d15c:	d0dc      	beq.n	800d118 <_strtod_l+0x518>
 800d15e:	2c1f      	cmp	r4, #31
 800d160:	dd20      	ble.n	800d1a4 <_strtod_l+0x5a4>
 800d162:	2400      	movs	r4, #0
 800d164:	46a0      	mov	r8, r4
 800d166:	940a      	str	r4, [sp, #40]	@ 0x28
 800d168:	46a1      	mov	r9, r4
 800d16a:	9a05      	ldr	r2, [sp, #20]
 800d16c:	2322      	movs	r3, #34	@ 0x22
 800d16e:	f04f 0a00 	mov.w	sl, #0
 800d172:	f04f 0b00 	mov.w	fp, #0
 800d176:	6013      	str	r3, [r2, #0]
 800d178:	e768      	b.n	800d04c <_strtod_l+0x44c>
 800d17a:	bf00      	nop
 800d17c:	0800ebf2 	.word	0x0800ebf2
 800d180:	0800ee9c 	.word	0x0800ee9c
 800d184:	0800ebea 	.word	0x0800ebea
 800d188:	0800ecce 	.word	0x0800ecce
 800d18c:	0800ecca 	.word	0x0800ecca
 800d190:	0800edd0 	.word	0x0800edd0
 800d194:	0800eda8 	.word	0x0800eda8
 800d198:	7ff00000 	.word	0x7ff00000
 800d19c:	7ca00000 	.word	0x7ca00000
 800d1a0:	7fefffff 	.word	0x7fefffff
 800d1a4:	f014 0310 	ands.w	r3, r4, #16
 800d1a8:	bf18      	it	ne
 800d1aa:	236a      	movne	r3, #106	@ 0x6a
 800d1ac:	4ea9      	ldr	r6, [pc, #676]	@ (800d454 <_strtod_l+0x854>)
 800d1ae:	9308      	str	r3, [sp, #32]
 800d1b0:	4650      	mov	r0, sl
 800d1b2:	4659      	mov	r1, fp
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	07e2      	lsls	r2, r4, #31
 800d1b8:	d504      	bpl.n	800d1c4 <_strtod_l+0x5c4>
 800d1ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1be:	f7f3 fa53 	bl	8000668 <__aeabi_dmul>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	1064      	asrs	r4, r4, #1
 800d1c6:	f106 0608 	add.w	r6, r6, #8
 800d1ca:	d1f4      	bne.n	800d1b6 <_strtod_l+0x5b6>
 800d1cc:	b10b      	cbz	r3, 800d1d2 <_strtod_l+0x5d2>
 800d1ce:	4682      	mov	sl, r0
 800d1d0:	468b      	mov	fp, r1
 800d1d2:	9b08      	ldr	r3, [sp, #32]
 800d1d4:	b1b3      	cbz	r3, 800d204 <_strtod_l+0x604>
 800d1d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d1da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	4659      	mov	r1, fp
 800d1e2:	dd0f      	ble.n	800d204 <_strtod_l+0x604>
 800d1e4:	2b1f      	cmp	r3, #31
 800d1e6:	dd55      	ble.n	800d294 <_strtod_l+0x694>
 800d1e8:	2b34      	cmp	r3, #52	@ 0x34
 800d1ea:	bfde      	ittt	le
 800d1ec:	f04f 33ff 	movle.w	r3, #4294967295
 800d1f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d1f4:	4093      	lslle	r3, r2
 800d1f6:	f04f 0a00 	mov.w	sl, #0
 800d1fa:	bfcc      	ite	gt
 800d1fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d200:	ea03 0b01 	andle.w	fp, r3, r1
 800d204:	2200      	movs	r2, #0
 800d206:	2300      	movs	r3, #0
 800d208:	4650      	mov	r0, sl
 800d20a:	4659      	mov	r1, fp
 800d20c:	f7f3 fc94 	bl	8000b38 <__aeabi_dcmpeq>
 800d210:	2800      	cmp	r0, #0
 800d212:	d1a6      	bne.n	800d162 <_strtod_l+0x562>
 800d214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d21a:	9805      	ldr	r0, [sp, #20]
 800d21c:	462b      	mov	r3, r5
 800d21e:	463a      	mov	r2, r7
 800d220:	f7ff f8c6 	bl	800c3b0 <__s2b>
 800d224:	900a      	str	r0, [sp, #40]	@ 0x28
 800d226:	2800      	cmp	r0, #0
 800d228:	f43f af05 	beq.w	800d036 <_strtod_l+0x436>
 800d22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d22e:	2a00      	cmp	r2, #0
 800d230:	eba9 0308 	sub.w	r3, r9, r8
 800d234:	bfa8      	it	ge
 800d236:	2300      	movge	r3, #0
 800d238:	9312      	str	r3, [sp, #72]	@ 0x48
 800d23a:	2400      	movs	r4, #0
 800d23c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d240:	9316      	str	r3, [sp, #88]	@ 0x58
 800d242:	46a0      	mov	r8, r4
 800d244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d246:	9805      	ldr	r0, [sp, #20]
 800d248:	6859      	ldr	r1, [r3, #4]
 800d24a:	f7ff f809 	bl	800c260 <_Balloc>
 800d24e:	4681      	mov	r9, r0
 800d250:	2800      	cmp	r0, #0
 800d252:	f43f aef4 	beq.w	800d03e <_strtod_l+0x43e>
 800d256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d258:	691a      	ldr	r2, [r3, #16]
 800d25a:	3202      	adds	r2, #2
 800d25c:	f103 010c 	add.w	r1, r3, #12
 800d260:	0092      	lsls	r2, r2, #2
 800d262:	300c      	adds	r0, #12
 800d264:	f000 fede 	bl	800e024 <memcpy>
 800d268:	ec4b ab10 	vmov	d0, sl, fp
 800d26c:	9805      	ldr	r0, [sp, #20]
 800d26e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d270:	a91b      	add	r1, sp, #108	@ 0x6c
 800d272:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d276:	f7ff fbd7 	bl	800ca28 <__d2b>
 800d27a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f43f aede 	beq.w	800d03e <_strtod_l+0x43e>
 800d282:	9805      	ldr	r0, [sp, #20]
 800d284:	2101      	movs	r1, #1
 800d286:	f7ff f929 	bl	800c4dc <__i2b>
 800d28a:	4680      	mov	r8, r0
 800d28c:	b948      	cbnz	r0, 800d2a2 <_strtod_l+0x6a2>
 800d28e:	f04f 0800 	mov.w	r8, #0
 800d292:	e6d4      	b.n	800d03e <_strtod_l+0x43e>
 800d294:	f04f 32ff 	mov.w	r2, #4294967295
 800d298:	fa02 f303 	lsl.w	r3, r2, r3
 800d29c:	ea03 0a0a 	and.w	sl, r3, sl
 800d2a0:	e7b0      	b.n	800d204 <_strtod_l+0x604>
 800d2a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d2a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d2a6:	2d00      	cmp	r5, #0
 800d2a8:	bfab      	itete	ge
 800d2aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d2ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d2ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d2b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d2b2:	bfac      	ite	ge
 800d2b4:	18ef      	addge	r7, r5, r3
 800d2b6:	1b5e      	sublt	r6, r3, r5
 800d2b8:	9b08      	ldr	r3, [sp, #32]
 800d2ba:	1aed      	subs	r5, r5, r3
 800d2bc:	4415      	add	r5, r2
 800d2be:	4b66      	ldr	r3, [pc, #408]	@ (800d458 <_strtod_l+0x858>)
 800d2c0:	3d01      	subs	r5, #1
 800d2c2:	429d      	cmp	r5, r3
 800d2c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d2c8:	da50      	bge.n	800d36c <_strtod_l+0x76c>
 800d2ca:	1b5b      	subs	r3, r3, r5
 800d2cc:	2b1f      	cmp	r3, #31
 800d2ce:	eba2 0203 	sub.w	r2, r2, r3
 800d2d2:	f04f 0101 	mov.w	r1, #1
 800d2d6:	dc3d      	bgt.n	800d354 <_strtod_l+0x754>
 800d2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d2dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2de:	2300      	movs	r3, #0
 800d2e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2e2:	18bd      	adds	r5, r7, r2
 800d2e4:	9b08      	ldr	r3, [sp, #32]
 800d2e6:	42af      	cmp	r7, r5
 800d2e8:	4416      	add	r6, r2
 800d2ea:	441e      	add	r6, r3
 800d2ec:	463b      	mov	r3, r7
 800d2ee:	bfa8      	it	ge
 800d2f0:	462b      	movge	r3, r5
 800d2f2:	42b3      	cmp	r3, r6
 800d2f4:	bfa8      	it	ge
 800d2f6:	4633      	movge	r3, r6
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	bfc2      	ittt	gt
 800d2fc:	1aed      	subgt	r5, r5, r3
 800d2fe:	1af6      	subgt	r6, r6, r3
 800d300:	1aff      	subgt	r7, r7, r3
 800d302:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d304:	2b00      	cmp	r3, #0
 800d306:	dd16      	ble.n	800d336 <_strtod_l+0x736>
 800d308:	4641      	mov	r1, r8
 800d30a:	9805      	ldr	r0, [sp, #20]
 800d30c:	461a      	mov	r2, r3
 800d30e:	f7ff f9a5 	bl	800c65c <__pow5mult>
 800d312:	4680      	mov	r8, r0
 800d314:	2800      	cmp	r0, #0
 800d316:	d0ba      	beq.n	800d28e <_strtod_l+0x68e>
 800d318:	4601      	mov	r1, r0
 800d31a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d31c:	9805      	ldr	r0, [sp, #20]
 800d31e:	f7ff f8f3 	bl	800c508 <__multiply>
 800d322:	900e      	str	r0, [sp, #56]	@ 0x38
 800d324:	2800      	cmp	r0, #0
 800d326:	f43f ae8a 	beq.w	800d03e <_strtod_l+0x43e>
 800d32a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d32c:	9805      	ldr	r0, [sp, #20]
 800d32e:	f7fe ffd7 	bl	800c2e0 <_Bfree>
 800d332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d334:	931a      	str	r3, [sp, #104]	@ 0x68
 800d336:	2d00      	cmp	r5, #0
 800d338:	dc1d      	bgt.n	800d376 <_strtod_l+0x776>
 800d33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dd23      	ble.n	800d388 <_strtod_l+0x788>
 800d340:	4649      	mov	r1, r9
 800d342:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d344:	9805      	ldr	r0, [sp, #20]
 800d346:	f7ff f989 	bl	800c65c <__pow5mult>
 800d34a:	4681      	mov	r9, r0
 800d34c:	b9e0      	cbnz	r0, 800d388 <_strtod_l+0x788>
 800d34e:	f04f 0900 	mov.w	r9, #0
 800d352:	e674      	b.n	800d03e <_strtod_l+0x43e>
 800d354:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d358:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d35c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d360:	35e2      	adds	r5, #226	@ 0xe2
 800d362:	fa01 f305 	lsl.w	r3, r1, r5
 800d366:	9310      	str	r3, [sp, #64]	@ 0x40
 800d368:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d36a:	e7ba      	b.n	800d2e2 <_strtod_l+0x6e2>
 800d36c:	2300      	movs	r3, #0
 800d36e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d370:	2301      	movs	r3, #1
 800d372:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d374:	e7b5      	b.n	800d2e2 <_strtod_l+0x6e2>
 800d376:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d378:	9805      	ldr	r0, [sp, #20]
 800d37a:	462a      	mov	r2, r5
 800d37c:	f7ff f9c8 	bl	800c710 <__lshift>
 800d380:	901a      	str	r0, [sp, #104]	@ 0x68
 800d382:	2800      	cmp	r0, #0
 800d384:	d1d9      	bne.n	800d33a <_strtod_l+0x73a>
 800d386:	e65a      	b.n	800d03e <_strtod_l+0x43e>
 800d388:	2e00      	cmp	r6, #0
 800d38a:	dd07      	ble.n	800d39c <_strtod_l+0x79c>
 800d38c:	4649      	mov	r1, r9
 800d38e:	9805      	ldr	r0, [sp, #20]
 800d390:	4632      	mov	r2, r6
 800d392:	f7ff f9bd 	bl	800c710 <__lshift>
 800d396:	4681      	mov	r9, r0
 800d398:	2800      	cmp	r0, #0
 800d39a:	d0d8      	beq.n	800d34e <_strtod_l+0x74e>
 800d39c:	2f00      	cmp	r7, #0
 800d39e:	dd08      	ble.n	800d3b2 <_strtod_l+0x7b2>
 800d3a0:	4641      	mov	r1, r8
 800d3a2:	9805      	ldr	r0, [sp, #20]
 800d3a4:	463a      	mov	r2, r7
 800d3a6:	f7ff f9b3 	bl	800c710 <__lshift>
 800d3aa:	4680      	mov	r8, r0
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	f43f ae46 	beq.w	800d03e <_strtod_l+0x43e>
 800d3b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3b4:	9805      	ldr	r0, [sp, #20]
 800d3b6:	464a      	mov	r2, r9
 800d3b8:	f7ff fa32 	bl	800c820 <__mdiff>
 800d3bc:	4604      	mov	r4, r0
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f43f ae3d 	beq.w	800d03e <_strtod_l+0x43e>
 800d3c4:	68c3      	ldr	r3, [r0, #12]
 800d3c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	60c3      	str	r3, [r0, #12]
 800d3cc:	4641      	mov	r1, r8
 800d3ce:	f7ff fa0b 	bl	800c7e8 <__mcmp>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	da46      	bge.n	800d464 <_strtod_l+0x864>
 800d3d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3d8:	ea53 030a 	orrs.w	r3, r3, sl
 800d3dc:	d16c      	bne.n	800d4b8 <_strtod_l+0x8b8>
 800d3de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d168      	bne.n	800d4b8 <_strtod_l+0x8b8>
 800d3e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d3ea:	0d1b      	lsrs	r3, r3, #20
 800d3ec:	051b      	lsls	r3, r3, #20
 800d3ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d3f2:	d961      	bls.n	800d4b8 <_strtod_l+0x8b8>
 800d3f4:	6963      	ldr	r3, [r4, #20]
 800d3f6:	b913      	cbnz	r3, 800d3fe <_strtod_l+0x7fe>
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	dd5c      	ble.n	800d4b8 <_strtod_l+0x8b8>
 800d3fe:	4621      	mov	r1, r4
 800d400:	2201      	movs	r2, #1
 800d402:	9805      	ldr	r0, [sp, #20]
 800d404:	f7ff f984 	bl	800c710 <__lshift>
 800d408:	4641      	mov	r1, r8
 800d40a:	4604      	mov	r4, r0
 800d40c:	f7ff f9ec 	bl	800c7e8 <__mcmp>
 800d410:	2800      	cmp	r0, #0
 800d412:	dd51      	ble.n	800d4b8 <_strtod_l+0x8b8>
 800d414:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d418:	9a08      	ldr	r2, [sp, #32]
 800d41a:	0d1b      	lsrs	r3, r3, #20
 800d41c:	051b      	lsls	r3, r3, #20
 800d41e:	2a00      	cmp	r2, #0
 800d420:	d06b      	beq.n	800d4fa <_strtod_l+0x8fa>
 800d422:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d426:	d868      	bhi.n	800d4fa <_strtod_l+0x8fa>
 800d428:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d42c:	f67f ae9d 	bls.w	800d16a <_strtod_l+0x56a>
 800d430:	4b0a      	ldr	r3, [pc, #40]	@ (800d45c <_strtod_l+0x85c>)
 800d432:	4650      	mov	r0, sl
 800d434:	4659      	mov	r1, fp
 800d436:	2200      	movs	r2, #0
 800d438:	f7f3 f916 	bl	8000668 <__aeabi_dmul>
 800d43c:	4b08      	ldr	r3, [pc, #32]	@ (800d460 <_strtod_l+0x860>)
 800d43e:	400b      	ands	r3, r1
 800d440:	4682      	mov	sl, r0
 800d442:	468b      	mov	fp, r1
 800d444:	2b00      	cmp	r3, #0
 800d446:	f47f ae05 	bne.w	800d054 <_strtod_l+0x454>
 800d44a:	9a05      	ldr	r2, [sp, #20]
 800d44c:	2322      	movs	r3, #34	@ 0x22
 800d44e:	6013      	str	r3, [r2, #0]
 800d450:	e600      	b.n	800d054 <_strtod_l+0x454>
 800d452:	bf00      	nop
 800d454:	0800eec8 	.word	0x0800eec8
 800d458:	fffffc02 	.word	0xfffffc02
 800d45c:	39500000 	.word	0x39500000
 800d460:	7ff00000 	.word	0x7ff00000
 800d464:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d468:	d165      	bne.n	800d536 <_strtod_l+0x936>
 800d46a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d46c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d470:	b35a      	cbz	r2, 800d4ca <_strtod_l+0x8ca>
 800d472:	4a9f      	ldr	r2, [pc, #636]	@ (800d6f0 <_strtod_l+0xaf0>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d12b      	bne.n	800d4d0 <_strtod_l+0x8d0>
 800d478:	9b08      	ldr	r3, [sp, #32]
 800d47a:	4651      	mov	r1, sl
 800d47c:	b303      	cbz	r3, 800d4c0 <_strtod_l+0x8c0>
 800d47e:	4b9d      	ldr	r3, [pc, #628]	@ (800d6f4 <_strtod_l+0xaf4>)
 800d480:	465a      	mov	r2, fp
 800d482:	4013      	ands	r3, r2
 800d484:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d488:	f04f 32ff 	mov.w	r2, #4294967295
 800d48c:	d81b      	bhi.n	800d4c6 <_strtod_l+0x8c6>
 800d48e:	0d1b      	lsrs	r3, r3, #20
 800d490:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d494:	fa02 f303 	lsl.w	r3, r2, r3
 800d498:	4299      	cmp	r1, r3
 800d49a:	d119      	bne.n	800d4d0 <_strtod_l+0x8d0>
 800d49c:	4b96      	ldr	r3, [pc, #600]	@ (800d6f8 <_strtod_l+0xaf8>)
 800d49e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d102      	bne.n	800d4aa <_strtod_l+0x8aa>
 800d4a4:	3101      	adds	r1, #1
 800d4a6:	f43f adca 	beq.w	800d03e <_strtod_l+0x43e>
 800d4aa:	4b92      	ldr	r3, [pc, #584]	@ (800d6f4 <_strtod_l+0xaf4>)
 800d4ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4ae:	401a      	ands	r2, r3
 800d4b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d4b4:	f04f 0a00 	mov.w	sl, #0
 800d4b8:	9b08      	ldr	r3, [sp, #32]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1b8      	bne.n	800d430 <_strtod_l+0x830>
 800d4be:	e5c9      	b.n	800d054 <_strtod_l+0x454>
 800d4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4c4:	e7e8      	b.n	800d498 <_strtod_l+0x898>
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	e7e6      	b.n	800d498 <_strtod_l+0x898>
 800d4ca:	ea53 030a 	orrs.w	r3, r3, sl
 800d4ce:	d0a1      	beq.n	800d414 <_strtod_l+0x814>
 800d4d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4d2:	b1db      	cbz	r3, 800d50c <_strtod_l+0x90c>
 800d4d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4d6:	4213      	tst	r3, r2
 800d4d8:	d0ee      	beq.n	800d4b8 <_strtod_l+0x8b8>
 800d4da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4dc:	9a08      	ldr	r2, [sp, #32]
 800d4de:	4650      	mov	r0, sl
 800d4e0:	4659      	mov	r1, fp
 800d4e2:	b1bb      	cbz	r3, 800d514 <_strtod_l+0x914>
 800d4e4:	f7ff fb6e 	bl	800cbc4 <sulp>
 800d4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4ec:	ec53 2b10 	vmov	r2, r3, d0
 800d4f0:	f7f2 ff04 	bl	80002fc <__adddf3>
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	468b      	mov	fp, r1
 800d4f8:	e7de      	b.n	800d4b8 <_strtod_l+0x8b8>
 800d4fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d4fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d502:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d506:	f04f 3aff 	mov.w	sl, #4294967295
 800d50a:	e7d5      	b.n	800d4b8 <_strtod_l+0x8b8>
 800d50c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d50e:	ea13 0f0a 	tst.w	r3, sl
 800d512:	e7e1      	b.n	800d4d8 <_strtod_l+0x8d8>
 800d514:	f7ff fb56 	bl	800cbc4 <sulp>
 800d518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d51c:	ec53 2b10 	vmov	r2, r3, d0
 800d520:	f7f2 feea 	bl	80002f8 <__aeabi_dsub>
 800d524:	2200      	movs	r2, #0
 800d526:	2300      	movs	r3, #0
 800d528:	4682      	mov	sl, r0
 800d52a:	468b      	mov	fp, r1
 800d52c:	f7f3 fb04 	bl	8000b38 <__aeabi_dcmpeq>
 800d530:	2800      	cmp	r0, #0
 800d532:	d0c1      	beq.n	800d4b8 <_strtod_l+0x8b8>
 800d534:	e619      	b.n	800d16a <_strtod_l+0x56a>
 800d536:	4641      	mov	r1, r8
 800d538:	4620      	mov	r0, r4
 800d53a:	f7ff facd 	bl	800cad8 <__ratio>
 800d53e:	ec57 6b10 	vmov	r6, r7, d0
 800d542:	2200      	movs	r2, #0
 800d544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d548:	4630      	mov	r0, r6
 800d54a:	4639      	mov	r1, r7
 800d54c:	f7f3 fb08 	bl	8000b60 <__aeabi_dcmple>
 800d550:	2800      	cmp	r0, #0
 800d552:	d06f      	beq.n	800d634 <_strtod_l+0xa34>
 800d554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d17a      	bne.n	800d650 <_strtod_l+0xa50>
 800d55a:	f1ba 0f00 	cmp.w	sl, #0
 800d55e:	d158      	bne.n	800d612 <_strtod_l+0xa12>
 800d560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d566:	2b00      	cmp	r3, #0
 800d568:	d15a      	bne.n	800d620 <_strtod_l+0xa20>
 800d56a:	4b64      	ldr	r3, [pc, #400]	@ (800d6fc <_strtod_l+0xafc>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	4630      	mov	r0, r6
 800d570:	4639      	mov	r1, r7
 800d572:	f7f3 faeb 	bl	8000b4c <__aeabi_dcmplt>
 800d576:	2800      	cmp	r0, #0
 800d578:	d159      	bne.n	800d62e <_strtod_l+0xa2e>
 800d57a:	4630      	mov	r0, r6
 800d57c:	4639      	mov	r1, r7
 800d57e:	4b60      	ldr	r3, [pc, #384]	@ (800d700 <_strtod_l+0xb00>)
 800d580:	2200      	movs	r2, #0
 800d582:	f7f3 f871 	bl	8000668 <__aeabi_dmul>
 800d586:	4606      	mov	r6, r0
 800d588:	460f      	mov	r7, r1
 800d58a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d58e:	9606      	str	r6, [sp, #24]
 800d590:	9307      	str	r3, [sp, #28]
 800d592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d596:	4d57      	ldr	r5, [pc, #348]	@ (800d6f4 <_strtod_l+0xaf4>)
 800d598:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d59c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d59e:	401d      	ands	r5, r3
 800d5a0:	4b58      	ldr	r3, [pc, #352]	@ (800d704 <_strtod_l+0xb04>)
 800d5a2:	429d      	cmp	r5, r3
 800d5a4:	f040 80b2 	bne.w	800d70c <_strtod_l+0xb0c>
 800d5a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d5ae:	ec4b ab10 	vmov	d0, sl, fp
 800d5b2:	f7ff f9c9 	bl	800c948 <__ulp>
 800d5b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5ba:	ec51 0b10 	vmov	r0, r1, d0
 800d5be:	f7f3 f853 	bl	8000668 <__aeabi_dmul>
 800d5c2:	4652      	mov	r2, sl
 800d5c4:	465b      	mov	r3, fp
 800d5c6:	f7f2 fe99 	bl	80002fc <__adddf3>
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4949      	ldr	r1, [pc, #292]	@ (800d6f4 <_strtod_l+0xaf4>)
 800d5ce:	4a4e      	ldr	r2, [pc, #312]	@ (800d708 <_strtod_l+0xb08>)
 800d5d0:	4019      	ands	r1, r3
 800d5d2:	4291      	cmp	r1, r2
 800d5d4:	4682      	mov	sl, r0
 800d5d6:	d942      	bls.n	800d65e <_strtod_l+0xa5e>
 800d5d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5da:	4b47      	ldr	r3, [pc, #284]	@ (800d6f8 <_strtod_l+0xaf8>)
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d103      	bne.n	800d5e8 <_strtod_l+0x9e8>
 800d5e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	f43f ad2b 	beq.w	800d03e <_strtod_l+0x43e>
 800d5e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d6f8 <_strtod_l+0xaf8>
 800d5ec:	f04f 3aff 	mov.w	sl, #4294967295
 800d5f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5f2:	9805      	ldr	r0, [sp, #20]
 800d5f4:	f7fe fe74 	bl	800c2e0 <_Bfree>
 800d5f8:	9805      	ldr	r0, [sp, #20]
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	f7fe fe70 	bl	800c2e0 <_Bfree>
 800d600:	9805      	ldr	r0, [sp, #20]
 800d602:	4641      	mov	r1, r8
 800d604:	f7fe fe6c 	bl	800c2e0 <_Bfree>
 800d608:	9805      	ldr	r0, [sp, #20]
 800d60a:	4621      	mov	r1, r4
 800d60c:	f7fe fe68 	bl	800c2e0 <_Bfree>
 800d610:	e618      	b.n	800d244 <_strtod_l+0x644>
 800d612:	f1ba 0f01 	cmp.w	sl, #1
 800d616:	d103      	bne.n	800d620 <_strtod_l+0xa20>
 800d618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f43f ada5 	beq.w	800d16a <_strtod_l+0x56a>
 800d620:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d6d0 <_strtod_l+0xad0>
 800d624:	4f35      	ldr	r7, [pc, #212]	@ (800d6fc <_strtod_l+0xafc>)
 800d626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d62a:	2600      	movs	r6, #0
 800d62c:	e7b1      	b.n	800d592 <_strtod_l+0x992>
 800d62e:	4f34      	ldr	r7, [pc, #208]	@ (800d700 <_strtod_l+0xb00>)
 800d630:	2600      	movs	r6, #0
 800d632:	e7aa      	b.n	800d58a <_strtod_l+0x98a>
 800d634:	4b32      	ldr	r3, [pc, #200]	@ (800d700 <_strtod_l+0xb00>)
 800d636:	4630      	mov	r0, r6
 800d638:	4639      	mov	r1, r7
 800d63a:	2200      	movs	r2, #0
 800d63c:	f7f3 f814 	bl	8000668 <__aeabi_dmul>
 800d640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d642:	4606      	mov	r6, r0
 800d644:	460f      	mov	r7, r1
 800d646:	2b00      	cmp	r3, #0
 800d648:	d09f      	beq.n	800d58a <_strtod_l+0x98a>
 800d64a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d64e:	e7a0      	b.n	800d592 <_strtod_l+0x992>
 800d650:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d6d8 <_strtod_l+0xad8>
 800d654:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d658:	ec57 6b17 	vmov	r6, r7, d7
 800d65c:	e799      	b.n	800d592 <_strtod_l+0x992>
 800d65e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d662:	9b08      	ldr	r3, [sp, #32]
 800d664:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1c1      	bne.n	800d5f0 <_strtod_l+0x9f0>
 800d66c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d670:	0d1b      	lsrs	r3, r3, #20
 800d672:	051b      	lsls	r3, r3, #20
 800d674:	429d      	cmp	r5, r3
 800d676:	d1bb      	bne.n	800d5f0 <_strtod_l+0x9f0>
 800d678:	4630      	mov	r0, r6
 800d67a:	4639      	mov	r1, r7
 800d67c:	f7f3 fb54 	bl	8000d28 <__aeabi_d2lz>
 800d680:	f7f2 ffc4 	bl	800060c <__aeabi_l2d>
 800d684:	4602      	mov	r2, r0
 800d686:	460b      	mov	r3, r1
 800d688:	4630      	mov	r0, r6
 800d68a:	4639      	mov	r1, r7
 800d68c:	f7f2 fe34 	bl	80002f8 <__aeabi_dsub>
 800d690:	460b      	mov	r3, r1
 800d692:	4602      	mov	r2, r0
 800d694:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d698:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d69e:	ea46 060a 	orr.w	r6, r6, sl
 800d6a2:	431e      	orrs	r6, r3
 800d6a4:	d06f      	beq.n	800d786 <_strtod_l+0xb86>
 800d6a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d6e0 <_strtod_l+0xae0>)
 800d6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ac:	f7f3 fa4e 	bl	8000b4c <__aeabi_dcmplt>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	f47f accf 	bne.w	800d054 <_strtod_l+0x454>
 800d6b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d6e8 <_strtod_l+0xae8>)
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6c0:	f7f3 fa62 	bl	8000b88 <__aeabi_dcmpgt>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d093      	beq.n	800d5f0 <_strtod_l+0x9f0>
 800d6c8:	e4c4      	b.n	800d054 <_strtod_l+0x454>
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	00000000 	.word	0x00000000
 800d6d4:	bff00000 	.word	0xbff00000
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	3ff00000 	.word	0x3ff00000
 800d6e0:	94a03595 	.word	0x94a03595
 800d6e4:	3fdfffff 	.word	0x3fdfffff
 800d6e8:	35afe535 	.word	0x35afe535
 800d6ec:	3fe00000 	.word	0x3fe00000
 800d6f0:	000fffff 	.word	0x000fffff
 800d6f4:	7ff00000 	.word	0x7ff00000
 800d6f8:	7fefffff 	.word	0x7fefffff
 800d6fc:	3ff00000 	.word	0x3ff00000
 800d700:	3fe00000 	.word	0x3fe00000
 800d704:	7fe00000 	.word	0x7fe00000
 800d708:	7c9fffff 	.word	0x7c9fffff
 800d70c:	9b08      	ldr	r3, [sp, #32]
 800d70e:	b323      	cbz	r3, 800d75a <_strtod_l+0xb5a>
 800d710:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d714:	d821      	bhi.n	800d75a <_strtod_l+0xb5a>
 800d716:	a328      	add	r3, pc, #160	@ (adr r3, 800d7b8 <_strtod_l+0xbb8>)
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	4630      	mov	r0, r6
 800d71e:	4639      	mov	r1, r7
 800d720:	f7f3 fa1e 	bl	8000b60 <__aeabi_dcmple>
 800d724:	b1a0      	cbz	r0, 800d750 <_strtod_l+0xb50>
 800d726:	4639      	mov	r1, r7
 800d728:	4630      	mov	r0, r6
 800d72a:	f7f3 fa75 	bl	8000c18 <__aeabi_d2uiz>
 800d72e:	2801      	cmp	r0, #1
 800d730:	bf38      	it	cc
 800d732:	2001      	movcc	r0, #1
 800d734:	f7f2 ff1e 	bl	8000574 <__aeabi_ui2d>
 800d738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d73a:	4606      	mov	r6, r0
 800d73c:	460f      	mov	r7, r1
 800d73e:	b9fb      	cbnz	r3, 800d780 <_strtod_l+0xb80>
 800d740:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d744:	9014      	str	r0, [sp, #80]	@ 0x50
 800d746:	9315      	str	r3, [sp, #84]	@ 0x54
 800d748:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d74c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d750:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d752:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d756:	1b5b      	subs	r3, r3, r5
 800d758:	9311      	str	r3, [sp, #68]	@ 0x44
 800d75a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d75e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d762:	f7ff f8f1 	bl	800c948 <__ulp>
 800d766:	4650      	mov	r0, sl
 800d768:	ec53 2b10 	vmov	r2, r3, d0
 800d76c:	4659      	mov	r1, fp
 800d76e:	f7f2 ff7b 	bl	8000668 <__aeabi_dmul>
 800d772:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d776:	f7f2 fdc1 	bl	80002fc <__adddf3>
 800d77a:	4682      	mov	sl, r0
 800d77c:	468b      	mov	fp, r1
 800d77e:	e770      	b.n	800d662 <_strtod_l+0xa62>
 800d780:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d784:	e7e0      	b.n	800d748 <_strtod_l+0xb48>
 800d786:	a30e      	add	r3, pc, #56	@ (adr r3, 800d7c0 <_strtod_l+0xbc0>)
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f7f3 f9de 	bl	8000b4c <__aeabi_dcmplt>
 800d790:	e798      	b.n	800d6c4 <_strtod_l+0xac4>
 800d792:	2300      	movs	r3, #0
 800d794:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d796:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d79a:	6013      	str	r3, [r2, #0]
 800d79c:	f7ff ba6d 	b.w	800cc7a <_strtod_l+0x7a>
 800d7a0:	2a65      	cmp	r2, #101	@ 0x65
 800d7a2:	f43f ab66 	beq.w	800ce72 <_strtod_l+0x272>
 800d7a6:	2a45      	cmp	r2, #69	@ 0x45
 800d7a8:	f43f ab63 	beq.w	800ce72 <_strtod_l+0x272>
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	f7ff bb9e 	b.w	800ceee <_strtod_l+0x2ee>
 800d7b2:	bf00      	nop
 800d7b4:	f3af 8000 	nop.w
 800d7b8:	ffc00000 	.word	0xffc00000
 800d7bc:	41dfffff 	.word	0x41dfffff
 800d7c0:	94a03595 	.word	0x94a03595
 800d7c4:	3fcfffff 	.word	0x3fcfffff

0800d7c8 <_strtod_r>:
 800d7c8:	4b01      	ldr	r3, [pc, #4]	@ (800d7d0 <_strtod_r+0x8>)
 800d7ca:	f7ff ba19 	b.w	800cc00 <_strtod_l>
 800d7ce:	bf00      	nop
 800d7d0:	20000124 	.word	0x20000124

0800d7d4 <__ssputs_r>:
 800d7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d8:	688e      	ldr	r6, [r1, #8]
 800d7da:	461f      	mov	r7, r3
 800d7dc:	42be      	cmp	r6, r7
 800d7de:	680b      	ldr	r3, [r1, #0]
 800d7e0:	4682      	mov	sl, r0
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	4690      	mov	r8, r2
 800d7e6:	d82d      	bhi.n	800d844 <__ssputs_r+0x70>
 800d7e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d7f0:	d026      	beq.n	800d840 <__ssputs_r+0x6c>
 800d7f2:	6965      	ldr	r5, [r4, #20]
 800d7f4:	6909      	ldr	r1, [r1, #16]
 800d7f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7fa:	eba3 0901 	sub.w	r9, r3, r1
 800d7fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d802:	1c7b      	adds	r3, r7, #1
 800d804:	444b      	add	r3, r9
 800d806:	106d      	asrs	r5, r5, #1
 800d808:	429d      	cmp	r5, r3
 800d80a:	bf38      	it	cc
 800d80c:	461d      	movcc	r5, r3
 800d80e:	0553      	lsls	r3, r2, #21
 800d810:	d527      	bpl.n	800d862 <__ssputs_r+0x8e>
 800d812:	4629      	mov	r1, r5
 800d814:	f7fe fc98 	bl	800c148 <_malloc_r>
 800d818:	4606      	mov	r6, r0
 800d81a:	b360      	cbz	r0, 800d876 <__ssputs_r+0xa2>
 800d81c:	6921      	ldr	r1, [r4, #16]
 800d81e:	464a      	mov	r2, r9
 800d820:	f000 fc00 	bl	800e024 <memcpy>
 800d824:	89a3      	ldrh	r3, [r4, #12]
 800d826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d82e:	81a3      	strh	r3, [r4, #12]
 800d830:	6126      	str	r6, [r4, #16]
 800d832:	6165      	str	r5, [r4, #20]
 800d834:	444e      	add	r6, r9
 800d836:	eba5 0509 	sub.w	r5, r5, r9
 800d83a:	6026      	str	r6, [r4, #0]
 800d83c:	60a5      	str	r5, [r4, #8]
 800d83e:	463e      	mov	r6, r7
 800d840:	42be      	cmp	r6, r7
 800d842:	d900      	bls.n	800d846 <__ssputs_r+0x72>
 800d844:	463e      	mov	r6, r7
 800d846:	6820      	ldr	r0, [r4, #0]
 800d848:	4632      	mov	r2, r6
 800d84a:	4641      	mov	r1, r8
 800d84c:	f000 fbae 	bl	800dfac <memmove>
 800d850:	68a3      	ldr	r3, [r4, #8]
 800d852:	1b9b      	subs	r3, r3, r6
 800d854:	60a3      	str	r3, [r4, #8]
 800d856:	6823      	ldr	r3, [r4, #0]
 800d858:	4433      	add	r3, r6
 800d85a:	6023      	str	r3, [r4, #0]
 800d85c:	2000      	movs	r0, #0
 800d85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d862:	462a      	mov	r2, r5
 800d864:	f000 ff59 	bl	800e71a <_realloc_r>
 800d868:	4606      	mov	r6, r0
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d1e0      	bne.n	800d830 <__ssputs_r+0x5c>
 800d86e:	6921      	ldr	r1, [r4, #16]
 800d870:	4650      	mov	r0, sl
 800d872:	f7fe fbf5 	bl	800c060 <_free_r>
 800d876:	230c      	movs	r3, #12
 800d878:	f8ca 3000 	str.w	r3, [sl]
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d882:	81a3      	strh	r3, [r4, #12]
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	e7e9      	b.n	800d85e <__ssputs_r+0x8a>
	...

0800d88c <_svfiprintf_r>:
 800d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d890:	4698      	mov	r8, r3
 800d892:	898b      	ldrh	r3, [r1, #12]
 800d894:	061b      	lsls	r3, r3, #24
 800d896:	b09d      	sub	sp, #116	@ 0x74
 800d898:	4607      	mov	r7, r0
 800d89a:	460d      	mov	r5, r1
 800d89c:	4614      	mov	r4, r2
 800d89e:	d510      	bpl.n	800d8c2 <_svfiprintf_r+0x36>
 800d8a0:	690b      	ldr	r3, [r1, #16]
 800d8a2:	b973      	cbnz	r3, 800d8c2 <_svfiprintf_r+0x36>
 800d8a4:	2140      	movs	r1, #64	@ 0x40
 800d8a6:	f7fe fc4f 	bl	800c148 <_malloc_r>
 800d8aa:	6028      	str	r0, [r5, #0]
 800d8ac:	6128      	str	r0, [r5, #16]
 800d8ae:	b930      	cbnz	r0, 800d8be <_svfiprintf_r+0x32>
 800d8b0:	230c      	movs	r3, #12
 800d8b2:	603b      	str	r3, [r7, #0]
 800d8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b8:	b01d      	add	sp, #116	@ 0x74
 800d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8be:	2340      	movs	r3, #64	@ 0x40
 800d8c0:	616b      	str	r3, [r5, #20]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8c6:	2320      	movs	r3, #32
 800d8c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8d0:	2330      	movs	r3, #48	@ 0x30
 800d8d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da70 <_svfiprintf_r+0x1e4>
 800d8d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8da:	f04f 0901 	mov.w	r9, #1
 800d8de:	4623      	mov	r3, r4
 800d8e0:	469a      	mov	sl, r3
 800d8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8e6:	b10a      	cbz	r2, 800d8ec <_svfiprintf_r+0x60>
 800d8e8:	2a25      	cmp	r2, #37	@ 0x25
 800d8ea:	d1f9      	bne.n	800d8e0 <_svfiprintf_r+0x54>
 800d8ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d8f0:	d00b      	beq.n	800d90a <_svfiprintf_r+0x7e>
 800d8f2:	465b      	mov	r3, fp
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	f7ff ff6b 	bl	800d7d4 <__ssputs_r>
 800d8fe:	3001      	adds	r0, #1
 800d900:	f000 80a7 	beq.w	800da52 <_svfiprintf_r+0x1c6>
 800d904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d906:	445a      	add	r2, fp
 800d908:	9209      	str	r2, [sp, #36]	@ 0x24
 800d90a:	f89a 3000 	ldrb.w	r3, [sl]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f000 809f 	beq.w	800da52 <_svfiprintf_r+0x1c6>
 800d914:	2300      	movs	r3, #0
 800d916:	f04f 32ff 	mov.w	r2, #4294967295
 800d91a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d91e:	f10a 0a01 	add.w	sl, sl, #1
 800d922:	9304      	str	r3, [sp, #16]
 800d924:	9307      	str	r3, [sp, #28]
 800d926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d92a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d92c:	4654      	mov	r4, sl
 800d92e:	2205      	movs	r2, #5
 800d930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d934:	484e      	ldr	r0, [pc, #312]	@ (800da70 <_svfiprintf_r+0x1e4>)
 800d936:	f7f2 fc83 	bl	8000240 <memchr>
 800d93a:	9a04      	ldr	r2, [sp, #16]
 800d93c:	b9d8      	cbnz	r0, 800d976 <_svfiprintf_r+0xea>
 800d93e:	06d0      	lsls	r0, r2, #27
 800d940:	bf44      	itt	mi
 800d942:	2320      	movmi	r3, #32
 800d944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d948:	0711      	lsls	r1, r2, #28
 800d94a:	bf44      	itt	mi
 800d94c:	232b      	movmi	r3, #43	@ 0x2b
 800d94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d952:	f89a 3000 	ldrb.w	r3, [sl]
 800d956:	2b2a      	cmp	r3, #42	@ 0x2a
 800d958:	d015      	beq.n	800d986 <_svfiprintf_r+0xfa>
 800d95a:	9a07      	ldr	r2, [sp, #28]
 800d95c:	4654      	mov	r4, sl
 800d95e:	2000      	movs	r0, #0
 800d960:	f04f 0c0a 	mov.w	ip, #10
 800d964:	4621      	mov	r1, r4
 800d966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d96a:	3b30      	subs	r3, #48	@ 0x30
 800d96c:	2b09      	cmp	r3, #9
 800d96e:	d94b      	bls.n	800da08 <_svfiprintf_r+0x17c>
 800d970:	b1b0      	cbz	r0, 800d9a0 <_svfiprintf_r+0x114>
 800d972:	9207      	str	r2, [sp, #28]
 800d974:	e014      	b.n	800d9a0 <_svfiprintf_r+0x114>
 800d976:	eba0 0308 	sub.w	r3, r0, r8
 800d97a:	fa09 f303 	lsl.w	r3, r9, r3
 800d97e:	4313      	orrs	r3, r2
 800d980:	9304      	str	r3, [sp, #16]
 800d982:	46a2      	mov	sl, r4
 800d984:	e7d2      	b.n	800d92c <_svfiprintf_r+0xa0>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	1d19      	adds	r1, r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	9103      	str	r1, [sp, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfbb      	ittet	lt
 800d992:	425b      	neglt	r3, r3
 800d994:	f042 0202 	orrlt.w	r2, r2, #2
 800d998:	9307      	strge	r3, [sp, #28]
 800d99a:	9307      	strlt	r3, [sp, #28]
 800d99c:	bfb8      	it	lt
 800d99e:	9204      	strlt	r2, [sp, #16]
 800d9a0:	7823      	ldrb	r3, [r4, #0]
 800d9a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9a4:	d10a      	bne.n	800d9bc <_svfiprintf_r+0x130>
 800d9a6:	7863      	ldrb	r3, [r4, #1]
 800d9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9aa:	d132      	bne.n	800da12 <_svfiprintf_r+0x186>
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	1d1a      	adds	r2, r3, #4
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	9203      	str	r2, [sp, #12]
 800d9b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9b8:	3402      	adds	r4, #2
 800d9ba:	9305      	str	r3, [sp, #20]
 800d9bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da80 <_svfiprintf_r+0x1f4>
 800d9c0:	7821      	ldrb	r1, [r4, #0]
 800d9c2:	2203      	movs	r2, #3
 800d9c4:	4650      	mov	r0, sl
 800d9c6:	f7f2 fc3b 	bl	8000240 <memchr>
 800d9ca:	b138      	cbz	r0, 800d9dc <_svfiprintf_r+0x150>
 800d9cc:	9b04      	ldr	r3, [sp, #16]
 800d9ce:	eba0 000a 	sub.w	r0, r0, sl
 800d9d2:	2240      	movs	r2, #64	@ 0x40
 800d9d4:	4082      	lsls	r2, r0
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	3401      	adds	r4, #1
 800d9da:	9304      	str	r3, [sp, #16]
 800d9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e0:	4824      	ldr	r0, [pc, #144]	@ (800da74 <_svfiprintf_r+0x1e8>)
 800d9e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9e6:	2206      	movs	r2, #6
 800d9e8:	f7f2 fc2a 	bl	8000240 <memchr>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	d036      	beq.n	800da5e <_svfiprintf_r+0x1d2>
 800d9f0:	4b21      	ldr	r3, [pc, #132]	@ (800da78 <_svfiprintf_r+0x1ec>)
 800d9f2:	bb1b      	cbnz	r3, 800da3c <_svfiprintf_r+0x1b0>
 800d9f4:	9b03      	ldr	r3, [sp, #12]
 800d9f6:	3307      	adds	r3, #7
 800d9f8:	f023 0307 	bic.w	r3, r3, #7
 800d9fc:	3308      	adds	r3, #8
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da02:	4433      	add	r3, r6
 800da04:	9309      	str	r3, [sp, #36]	@ 0x24
 800da06:	e76a      	b.n	800d8de <_svfiprintf_r+0x52>
 800da08:	fb0c 3202 	mla	r2, ip, r2, r3
 800da0c:	460c      	mov	r4, r1
 800da0e:	2001      	movs	r0, #1
 800da10:	e7a8      	b.n	800d964 <_svfiprintf_r+0xd8>
 800da12:	2300      	movs	r3, #0
 800da14:	3401      	adds	r4, #1
 800da16:	9305      	str	r3, [sp, #20]
 800da18:	4619      	mov	r1, r3
 800da1a:	f04f 0c0a 	mov.w	ip, #10
 800da1e:	4620      	mov	r0, r4
 800da20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da24:	3a30      	subs	r2, #48	@ 0x30
 800da26:	2a09      	cmp	r2, #9
 800da28:	d903      	bls.n	800da32 <_svfiprintf_r+0x1a6>
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d0c6      	beq.n	800d9bc <_svfiprintf_r+0x130>
 800da2e:	9105      	str	r1, [sp, #20]
 800da30:	e7c4      	b.n	800d9bc <_svfiprintf_r+0x130>
 800da32:	fb0c 2101 	mla	r1, ip, r1, r2
 800da36:	4604      	mov	r4, r0
 800da38:	2301      	movs	r3, #1
 800da3a:	e7f0      	b.n	800da1e <_svfiprintf_r+0x192>
 800da3c:	ab03      	add	r3, sp, #12
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	462a      	mov	r2, r5
 800da42:	4b0e      	ldr	r3, [pc, #56]	@ (800da7c <_svfiprintf_r+0x1f0>)
 800da44:	a904      	add	r1, sp, #16
 800da46:	4638      	mov	r0, r7
 800da48:	f7fc fc84 	bl	800a354 <_printf_float>
 800da4c:	1c42      	adds	r2, r0, #1
 800da4e:	4606      	mov	r6, r0
 800da50:	d1d6      	bne.n	800da00 <_svfiprintf_r+0x174>
 800da52:	89ab      	ldrh	r3, [r5, #12]
 800da54:	065b      	lsls	r3, r3, #25
 800da56:	f53f af2d 	bmi.w	800d8b4 <_svfiprintf_r+0x28>
 800da5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da5c:	e72c      	b.n	800d8b8 <_svfiprintf_r+0x2c>
 800da5e:	ab03      	add	r3, sp, #12
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	462a      	mov	r2, r5
 800da64:	4b05      	ldr	r3, [pc, #20]	@ (800da7c <_svfiprintf_r+0x1f0>)
 800da66:	a904      	add	r1, sp, #16
 800da68:	4638      	mov	r0, r7
 800da6a:	f7fc ff0b 	bl	800a884 <_printf_i>
 800da6e:	e7ed      	b.n	800da4c <_svfiprintf_r+0x1c0>
 800da70:	0800eef0 	.word	0x0800eef0
 800da74:	0800eefa 	.word	0x0800eefa
 800da78:	0800a355 	.word	0x0800a355
 800da7c:	0800d7d5 	.word	0x0800d7d5
 800da80:	0800eef6 	.word	0x0800eef6

0800da84 <__sfputc_r>:
 800da84:	6893      	ldr	r3, [r2, #8]
 800da86:	3b01      	subs	r3, #1
 800da88:	2b00      	cmp	r3, #0
 800da8a:	b410      	push	{r4}
 800da8c:	6093      	str	r3, [r2, #8]
 800da8e:	da08      	bge.n	800daa2 <__sfputc_r+0x1e>
 800da90:	6994      	ldr	r4, [r2, #24]
 800da92:	42a3      	cmp	r3, r4
 800da94:	db01      	blt.n	800da9a <__sfputc_r+0x16>
 800da96:	290a      	cmp	r1, #10
 800da98:	d103      	bne.n	800daa2 <__sfputc_r+0x1e>
 800da9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da9e:	f000 b9f1 	b.w	800de84 <__swbuf_r>
 800daa2:	6813      	ldr	r3, [r2, #0]
 800daa4:	1c58      	adds	r0, r3, #1
 800daa6:	6010      	str	r0, [r2, #0]
 800daa8:	7019      	strb	r1, [r3, #0]
 800daaa:	4608      	mov	r0, r1
 800daac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <__sfputs_r>:
 800dab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab4:	4606      	mov	r6, r0
 800dab6:	460f      	mov	r7, r1
 800dab8:	4614      	mov	r4, r2
 800daba:	18d5      	adds	r5, r2, r3
 800dabc:	42ac      	cmp	r4, r5
 800dabe:	d101      	bne.n	800dac4 <__sfputs_r+0x12>
 800dac0:	2000      	movs	r0, #0
 800dac2:	e007      	b.n	800dad4 <__sfputs_r+0x22>
 800dac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac8:	463a      	mov	r2, r7
 800daca:	4630      	mov	r0, r6
 800dacc:	f7ff ffda 	bl	800da84 <__sfputc_r>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d1f3      	bne.n	800dabc <__sfputs_r+0xa>
 800dad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dad8 <_vfiprintf_r>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	460d      	mov	r5, r1
 800dade:	b09d      	sub	sp, #116	@ 0x74
 800dae0:	4614      	mov	r4, r2
 800dae2:	4698      	mov	r8, r3
 800dae4:	4606      	mov	r6, r0
 800dae6:	b118      	cbz	r0, 800daf0 <_vfiprintf_r+0x18>
 800dae8:	6a03      	ldr	r3, [r0, #32]
 800daea:	b90b      	cbnz	r3, 800daf0 <_vfiprintf_r+0x18>
 800daec:	f7fd fa8a 	bl	800b004 <__sinit>
 800daf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daf2:	07d9      	lsls	r1, r3, #31
 800daf4:	d405      	bmi.n	800db02 <_vfiprintf_r+0x2a>
 800daf6:	89ab      	ldrh	r3, [r5, #12]
 800daf8:	059a      	lsls	r2, r3, #22
 800dafa:	d402      	bmi.n	800db02 <_vfiprintf_r+0x2a>
 800dafc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dafe:	f7fd fc3a 	bl	800b376 <__retarget_lock_acquire_recursive>
 800db02:	89ab      	ldrh	r3, [r5, #12]
 800db04:	071b      	lsls	r3, r3, #28
 800db06:	d501      	bpl.n	800db0c <_vfiprintf_r+0x34>
 800db08:	692b      	ldr	r3, [r5, #16]
 800db0a:	b99b      	cbnz	r3, 800db34 <_vfiprintf_r+0x5c>
 800db0c:	4629      	mov	r1, r5
 800db0e:	4630      	mov	r0, r6
 800db10:	f000 f9f6 	bl	800df00 <__swsetup_r>
 800db14:	b170      	cbz	r0, 800db34 <_vfiprintf_r+0x5c>
 800db16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db18:	07dc      	lsls	r4, r3, #31
 800db1a:	d504      	bpl.n	800db26 <_vfiprintf_r+0x4e>
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	b01d      	add	sp, #116	@ 0x74
 800db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db26:	89ab      	ldrh	r3, [r5, #12]
 800db28:	0598      	lsls	r0, r3, #22
 800db2a:	d4f7      	bmi.n	800db1c <_vfiprintf_r+0x44>
 800db2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db2e:	f7fd fc23 	bl	800b378 <__retarget_lock_release_recursive>
 800db32:	e7f3      	b.n	800db1c <_vfiprintf_r+0x44>
 800db34:	2300      	movs	r3, #0
 800db36:	9309      	str	r3, [sp, #36]	@ 0x24
 800db38:	2320      	movs	r3, #32
 800db3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db42:	2330      	movs	r3, #48	@ 0x30
 800db44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dcf4 <_vfiprintf_r+0x21c>
 800db48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db4c:	f04f 0901 	mov.w	r9, #1
 800db50:	4623      	mov	r3, r4
 800db52:	469a      	mov	sl, r3
 800db54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db58:	b10a      	cbz	r2, 800db5e <_vfiprintf_r+0x86>
 800db5a:	2a25      	cmp	r2, #37	@ 0x25
 800db5c:	d1f9      	bne.n	800db52 <_vfiprintf_r+0x7a>
 800db5e:	ebba 0b04 	subs.w	fp, sl, r4
 800db62:	d00b      	beq.n	800db7c <_vfiprintf_r+0xa4>
 800db64:	465b      	mov	r3, fp
 800db66:	4622      	mov	r2, r4
 800db68:	4629      	mov	r1, r5
 800db6a:	4630      	mov	r0, r6
 800db6c:	f7ff ffa1 	bl	800dab2 <__sfputs_r>
 800db70:	3001      	adds	r0, #1
 800db72:	f000 80a7 	beq.w	800dcc4 <_vfiprintf_r+0x1ec>
 800db76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db78:	445a      	add	r2, fp
 800db7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800db7c:	f89a 3000 	ldrb.w	r3, [sl]
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 809f 	beq.w	800dcc4 <_vfiprintf_r+0x1ec>
 800db86:	2300      	movs	r3, #0
 800db88:	f04f 32ff 	mov.w	r2, #4294967295
 800db8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db90:	f10a 0a01 	add.w	sl, sl, #1
 800db94:	9304      	str	r3, [sp, #16]
 800db96:	9307      	str	r3, [sp, #28]
 800db98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800db9e:	4654      	mov	r4, sl
 800dba0:	2205      	movs	r2, #5
 800dba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba6:	4853      	ldr	r0, [pc, #332]	@ (800dcf4 <_vfiprintf_r+0x21c>)
 800dba8:	f7f2 fb4a 	bl	8000240 <memchr>
 800dbac:	9a04      	ldr	r2, [sp, #16]
 800dbae:	b9d8      	cbnz	r0, 800dbe8 <_vfiprintf_r+0x110>
 800dbb0:	06d1      	lsls	r1, r2, #27
 800dbb2:	bf44      	itt	mi
 800dbb4:	2320      	movmi	r3, #32
 800dbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbba:	0713      	lsls	r3, r2, #28
 800dbbc:	bf44      	itt	mi
 800dbbe:	232b      	movmi	r3, #43	@ 0x2b
 800dbc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbc4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbca:	d015      	beq.n	800dbf8 <_vfiprintf_r+0x120>
 800dbcc:	9a07      	ldr	r2, [sp, #28]
 800dbce:	4654      	mov	r4, sl
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	f04f 0c0a 	mov.w	ip, #10
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbdc:	3b30      	subs	r3, #48	@ 0x30
 800dbde:	2b09      	cmp	r3, #9
 800dbe0:	d94b      	bls.n	800dc7a <_vfiprintf_r+0x1a2>
 800dbe2:	b1b0      	cbz	r0, 800dc12 <_vfiprintf_r+0x13a>
 800dbe4:	9207      	str	r2, [sp, #28]
 800dbe6:	e014      	b.n	800dc12 <_vfiprintf_r+0x13a>
 800dbe8:	eba0 0308 	sub.w	r3, r0, r8
 800dbec:	fa09 f303 	lsl.w	r3, r9, r3
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	9304      	str	r3, [sp, #16]
 800dbf4:	46a2      	mov	sl, r4
 800dbf6:	e7d2      	b.n	800db9e <_vfiprintf_r+0xc6>
 800dbf8:	9b03      	ldr	r3, [sp, #12]
 800dbfa:	1d19      	adds	r1, r3, #4
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	9103      	str	r1, [sp, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	bfbb      	ittet	lt
 800dc04:	425b      	neglt	r3, r3
 800dc06:	f042 0202 	orrlt.w	r2, r2, #2
 800dc0a:	9307      	strge	r3, [sp, #28]
 800dc0c:	9307      	strlt	r3, [sp, #28]
 800dc0e:	bfb8      	it	lt
 800dc10:	9204      	strlt	r2, [sp, #16]
 800dc12:	7823      	ldrb	r3, [r4, #0]
 800dc14:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc16:	d10a      	bne.n	800dc2e <_vfiprintf_r+0x156>
 800dc18:	7863      	ldrb	r3, [r4, #1]
 800dc1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc1c:	d132      	bne.n	800dc84 <_vfiprintf_r+0x1ac>
 800dc1e:	9b03      	ldr	r3, [sp, #12]
 800dc20:	1d1a      	adds	r2, r3, #4
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	9203      	str	r2, [sp, #12]
 800dc26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc2a:	3402      	adds	r4, #2
 800dc2c:	9305      	str	r3, [sp, #20]
 800dc2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd04 <_vfiprintf_r+0x22c>
 800dc32:	7821      	ldrb	r1, [r4, #0]
 800dc34:	2203      	movs	r2, #3
 800dc36:	4650      	mov	r0, sl
 800dc38:	f7f2 fb02 	bl	8000240 <memchr>
 800dc3c:	b138      	cbz	r0, 800dc4e <_vfiprintf_r+0x176>
 800dc3e:	9b04      	ldr	r3, [sp, #16]
 800dc40:	eba0 000a 	sub.w	r0, r0, sl
 800dc44:	2240      	movs	r2, #64	@ 0x40
 800dc46:	4082      	lsls	r2, r0
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	3401      	adds	r4, #1
 800dc4c:	9304      	str	r3, [sp, #16]
 800dc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc52:	4829      	ldr	r0, [pc, #164]	@ (800dcf8 <_vfiprintf_r+0x220>)
 800dc54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc58:	2206      	movs	r2, #6
 800dc5a:	f7f2 faf1 	bl	8000240 <memchr>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d03f      	beq.n	800dce2 <_vfiprintf_r+0x20a>
 800dc62:	4b26      	ldr	r3, [pc, #152]	@ (800dcfc <_vfiprintf_r+0x224>)
 800dc64:	bb1b      	cbnz	r3, 800dcae <_vfiprintf_r+0x1d6>
 800dc66:	9b03      	ldr	r3, [sp, #12]
 800dc68:	3307      	adds	r3, #7
 800dc6a:	f023 0307 	bic.w	r3, r3, #7
 800dc6e:	3308      	adds	r3, #8
 800dc70:	9303      	str	r3, [sp, #12]
 800dc72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc74:	443b      	add	r3, r7
 800dc76:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc78:	e76a      	b.n	800db50 <_vfiprintf_r+0x78>
 800dc7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc7e:	460c      	mov	r4, r1
 800dc80:	2001      	movs	r0, #1
 800dc82:	e7a8      	b.n	800dbd6 <_vfiprintf_r+0xfe>
 800dc84:	2300      	movs	r3, #0
 800dc86:	3401      	adds	r4, #1
 800dc88:	9305      	str	r3, [sp, #20]
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	f04f 0c0a 	mov.w	ip, #10
 800dc90:	4620      	mov	r0, r4
 800dc92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc96:	3a30      	subs	r2, #48	@ 0x30
 800dc98:	2a09      	cmp	r2, #9
 800dc9a:	d903      	bls.n	800dca4 <_vfiprintf_r+0x1cc>
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d0c6      	beq.n	800dc2e <_vfiprintf_r+0x156>
 800dca0:	9105      	str	r1, [sp, #20]
 800dca2:	e7c4      	b.n	800dc2e <_vfiprintf_r+0x156>
 800dca4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dca8:	4604      	mov	r4, r0
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e7f0      	b.n	800dc90 <_vfiprintf_r+0x1b8>
 800dcae:	ab03      	add	r3, sp, #12
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	462a      	mov	r2, r5
 800dcb4:	4b12      	ldr	r3, [pc, #72]	@ (800dd00 <_vfiprintf_r+0x228>)
 800dcb6:	a904      	add	r1, sp, #16
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7fc fb4b 	bl	800a354 <_printf_float>
 800dcbe:	4607      	mov	r7, r0
 800dcc0:	1c78      	adds	r0, r7, #1
 800dcc2:	d1d6      	bne.n	800dc72 <_vfiprintf_r+0x19a>
 800dcc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcc6:	07d9      	lsls	r1, r3, #31
 800dcc8:	d405      	bmi.n	800dcd6 <_vfiprintf_r+0x1fe>
 800dcca:	89ab      	ldrh	r3, [r5, #12]
 800dccc:	059a      	lsls	r2, r3, #22
 800dcce:	d402      	bmi.n	800dcd6 <_vfiprintf_r+0x1fe>
 800dcd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcd2:	f7fd fb51 	bl	800b378 <__retarget_lock_release_recursive>
 800dcd6:	89ab      	ldrh	r3, [r5, #12]
 800dcd8:	065b      	lsls	r3, r3, #25
 800dcda:	f53f af1f 	bmi.w	800db1c <_vfiprintf_r+0x44>
 800dcde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dce0:	e71e      	b.n	800db20 <_vfiprintf_r+0x48>
 800dce2:	ab03      	add	r3, sp, #12
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	462a      	mov	r2, r5
 800dce8:	4b05      	ldr	r3, [pc, #20]	@ (800dd00 <_vfiprintf_r+0x228>)
 800dcea:	a904      	add	r1, sp, #16
 800dcec:	4630      	mov	r0, r6
 800dcee:	f7fc fdc9 	bl	800a884 <_printf_i>
 800dcf2:	e7e4      	b.n	800dcbe <_vfiprintf_r+0x1e6>
 800dcf4:	0800eef0 	.word	0x0800eef0
 800dcf8:	0800eefa 	.word	0x0800eefa
 800dcfc:	0800a355 	.word	0x0800a355
 800dd00:	0800dab3 	.word	0x0800dab3
 800dd04:	0800eef6 	.word	0x0800eef6

0800dd08 <__sflush_r>:
 800dd08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd10:	0716      	lsls	r6, r2, #28
 800dd12:	4605      	mov	r5, r0
 800dd14:	460c      	mov	r4, r1
 800dd16:	d454      	bmi.n	800ddc2 <__sflush_r+0xba>
 800dd18:	684b      	ldr	r3, [r1, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dc02      	bgt.n	800dd24 <__sflush_r+0x1c>
 800dd1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dd48      	ble.n	800ddb6 <__sflush_r+0xae>
 800dd24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd26:	2e00      	cmp	r6, #0
 800dd28:	d045      	beq.n	800ddb6 <__sflush_r+0xae>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd30:	682f      	ldr	r7, [r5, #0]
 800dd32:	6a21      	ldr	r1, [r4, #32]
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	d030      	beq.n	800dd9a <__sflush_r+0x92>
 800dd38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd3a:	89a3      	ldrh	r3, [r4, #12]
 800dd3c:	0759      	lsls	r1, r3, #29
 800dd3e:	d505      	bpl.n	800dd4c <__sflush_r+0x44>
 800dd40:	6863      	ldr	r3, [r4, #4]
 800dd42:	1ad2      	subs	r2, r2, r3
 800dd44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd46:	b10b      	cbz	r3, 800dd4c <__sflush_r+0x44>
 800dd48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd4a:	1ad2      	subs	r2, r2, r3
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd50:	6a21      	ldr	r1, [r4, #32]
 800dd52:	4628      	mov	r0, r5
 800dd54:	47b0      	blx	r6
 800dd56:	1c43      	adds	r3, r0, #1
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	d106      	bne.n	800dd6a <__sflush_r+0x62>
 800dd5c:	6829      	ldr	r1, [r5, #0]
 800dd5e:	291d      	cmp	r1, #29
 800dd60:	d82b      	bhi.n	800ddba <__sflush_r+0xb2>
 800dd62:	4a2a      	ldr	r2, [pc, #168]	@ (800de0c <__sflush_r+0x104>)
 800dd64:	410a      	asrs	r2, r1
 800dd66:	07d6      	lsls	r6, r2, #31
 800dd68:	d427      	bmi.n	800ddba <__sflush_r+0xb2>
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	6062      	str	r2, [r4, #4]
 800dd6e:	04d9      	lsls	r1, r3, #19
 800dd70:	6922      	ldr	r2, [r4, #16]
 800dd72:	6022      	str	r2, [r4, #0]
 800dd74:	d504      	bpl.n	800dd80 <__sflush_r+0x78>
 800dd76:	1c42      	adds	r2, r0, #1
 800dd78:	d101      	bne.n	800dd7e <__sflush_r+0x76>
 800dd7a:	682b      	ldr	r3, [r5, #0]
 800dd7c:	b903      	cbnz	r3, 800dd80 <__sflush_r+0x78>
 800dd7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd82:	602f      	str	r7, [r5, #0]
 800dd84:	b1b9      	cbz	r1, 800ddb6 <__sflush_r+0xae>
 800dd86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd8a:	4299      	cmp	r1, r3
 800dd8c:	d002      	beq.n	800dd94 <__sflush_r+0x8c>
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f7fe f966 	bl	800c060 <_free_r>
 800dd94:	2300      	movs	r3, #0
 800dd96:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd98:	e00d      	b.n	800ddb6 <__sflush_r+0xae>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	47b0      	blx	r6
 800dda0:	4602      	mov	r2, r0
 800dda2:	1c50      	adds	r0, r2, #1
 800dda4:	d1c9      	bne.n	800dd3a <__sflush_r+0x32>
 800dda6:	682b      	ldr	r3, [r5, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d0c6      	beq.n	800dd3a <__sflush_r+0x32>
 800ddac:	2b1d      	cmp	r3, #29
 800ddae:	d001      	beq.n	800ddb4 <__sflush_r+0xac>
 800ddb0:	2b16      	cmp	r3, #22
 800ddb2:	d11e      	bne.n	800ddf2 <__sflush_r+0xea>
 800ddb4:	602f      	str	r7, [r5, #0]
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	e022      	b.n	800de00 <__sflush_r+0xf8>
 800ddba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddbe:	b21b      	sxth	r3, r3
 800ddc0:	e01b      	b.n	800ddfa <__sflush_r+0xf2>
 800ddc2:	690f      	ldr	r7, [r1, #16]
 800ddc4:	2f00      	cmp	r7, #0
 800ddc6:	d0f6      	beq.n	800ddb6 <__sflush_r+0xae>
 800ddc8:	0793      	lsls	r3, r2, #30
 800ddca:	680e      	ldr	r6, [r1, #0]
 800ddcc:	bf08      	it	eq
 800ddce:	694b      	ldreq	r3, [r1, #20]
 800ddd0:	600f      	str	r7, [r1, #0]
 800ddd2:	bf18      	it	ne
 800ddd4:	2300      	movne	r3, #0
 800ddd6:	eba6 0807 	sub.w	r8, r6, r7
 800ddda:	608b      	str	r3, [r1, #8]
 800dddc:	f1b8 0f00 	cmp.w	r8, #0
 800dde0:	dde9      	ble.n	800ddb6 <__sflush_r+0xae>
 800dde2:	6a21      	ldr	r1, [r4, #32]
 800dde4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dde6:	4643      	mov	r3, r8
 800dde8:	463a      	mov	r2, r7
 800ddea:	4628      	mov	r0, r5
 800ddec:	47b0      	blx	r6
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	dc08      	bgt.n	800de04 <__sflush_r+0xfc>
 800ddf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddfa:	81a3      	strh	r3, [r4, #12]
 800ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 800de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de04:	4407      	add	r7, r0
 800de06:	eba8 0800 	sub.w	r8, r8, r0
 800de0a:	e7e7      	b.n	800dddc <__sflush_r+0xd4>
 800de0c:	dfbffffe 	.word	0xdfbffffe

0800de10 <_fflush_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	690b      	ldr	r3, [r1, #16]
 800de14:	4605      	mov	r5, r0
 800de16:	460c      	mov	r4, r1
 800de18:	b913      	cbnz	r3, 800de20 <_fflush_r+0x10>
 800de1a:	2500      	movs	r5, #0
 800de1c:	4628      	mov	r0, r5
 800de1e:	bd38      	pop	{r3, r4, r5, pc}
 800de20:	b118      	cbz	r0, 800de2a <_fflush_r+0x1a>
 800de22:	6a03      	ldr	r3, [r0, #32]
 800de24:	b90b      	cbnz	r3, 800de2a <_fflush_r+0x1a>
 800de26:	f7fd f8ed 	bl	800b004 <__sinit>
 800de2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d0f3      	beq.n	800de1a <_fflush_r+0xa>
 800de32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de34:	07d0      	lsls	r0, r2, #31
 800de36:	d404      	bmi.n	800de42 <_fflush_r+0x32>
 800de38:	0599      	lsls	r1, r3, #22
 800de3a:	d402      	bmi.n	800de42 <_fflush_r+0x32>
 800de3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de3e:	f7fd fa9a 	bl	800b376 <__retarget_lock_acquire_recursive>
 800de42:	4628      	mov	r0, r5
 800de44:	4621      	mov	r1, r4
 800de46:	f7ff ff5f 	bl	800dd08 <__sflush_r>
 800de4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de4c:	07da      	lsls	r2, r3, #31
 800de4e:	4605      	mov	r5, r0
 800de50:	d4e4      	bmi.n	800de1c <_fflush_r+0xc>
 800de52:	89a3      	ldrh	r3, [r4, #12]
 800de54:	059b      	lsls	r3, r3, #22
 800de56:	d4e1      	bmi.n	800de1c <_fflush_r+0xc>
 800de58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de5a:	f7fd fa8d 	bl	800b378 <__retarget_lock_release_recursive>
 800de5e:	e7dd      	b.n	800de1c <_fflush_r+0xc>

0800de60 <fiprintf>:
 800de60:	b40e      	push	{r1, r2, r3}
 800de62:	b503      	push	{r0, r1, lr}
 800de64:	4601      	mov	r1, r0
 800de66:	ab03      	add	r3, sp, #12
 800de68:	4805      	ldr	r0, [pc, #20]	@ (800de80 <fiprintf+0x20>)
 800de6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de6e:	6800      	ldr	r0, [r0, #0]
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	f7ff fe31 	bl	800dad8 <_vfiprintf_r>
 800de76:	b002      	add	sp, #8
 800de78:	f85d eb04 	ldr.w	lr, [sp], #4
 800de7c:	b003      	add	sp, #12
 800de7e:	4770      	bx	lr
 800de80:	200000d4 	.word	0x200000d4

0800de84 <__swbuf_r>:
 800de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de86:	460e      	mov	r6, r1
 800de88:	4614      	mov	r4, r2
 800de8a:	4605      	mov	r5, r0
 800de8c:	b118      	cbz	r0, 800de96 <__swbuf_r+0x12>
 800de8e:	6a03      	ldr	r3, [r0, #32]
 800de90:	b90b      	cbnz	r3, 800de96 <__swbuf_r+0x12>
 800de92:	f7fd f8b7 	bl	800b004 <__sinit>
 800de96:	69a3      	ldr	r3, [r4, #24]
 800de98:	60a3      	str	r3, [r4, #8]
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	071a      	lsls	r2, r3, #28
 800de9e:	d501      	bpl.n	800dea4 <__swbuf_r+0x20>
 800dea0:	6923      	ldr	r3, [r4, #16]
 800dea2:	b943      	cbnz	r3, 800deb6 <__swbuf_r+0x32>
 800dea4:	4621      	mov	r1, r4
 800dea6:	4628      	mov	r0, r5
 800dea8:	f000 f82a 	bl	800df00 <__swsetup_r>
 800deac:	b118      	cbz	r0, 800deb6 <__swbuf_r+0x32>
 800deae:	f04f 37ff 	mov.w	r7, #4294967295
 800deb2:	4638      	mov	r0, r7
 800deb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	6922      	ldr	r2, [r4, #16]
 800deba:	1a98      	subs	r0, r3, r2
 800debc:	6963      	ldr	r3, [r4, #20]
 800debe:	b2f6      	uxtb	r6, r6
 800dec0:	4283      	cmp	r3, r0
 800dec2:	4637      	mov	r7, r6
 800dec4:	dc05      	bgt.n	800ded2 <__swbuf_r+0x4e>
 800dec6:	4621      	mov	r1, r4
 800dec8:	4628      	mov	r0, r5
 800deca:	f7ff ffa1 	bl	800de10 <_fflush_r>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d1ed      	bne.n	800deae <__swbuf_r+0x2a>
 800ded2:	68a3      	ldr	r3, [r4, #8]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	60a3      	str	r3, [r4, #8]
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	6022      	str	r2, [r4, #0]
 800dede:	701e      	strb	r6, [r3, #0]
 800dee0:	6962      	ldr	r2, [r4, #20]
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d004      	beq.n	800def2 <__swbuf_r+0x6e>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	07db      	lsls	r3, r3, #31
 800deec:	d5e1      	bpl.n	800deb2 <__swbuf_r+0x2e>
 800deee:	2e0a      	cmp	r6, #10
 800def0:	d1df      	bne.n	800deb2 <__swbuf_r+0x2e>
 800def2:	4621      	mov	r1, r4
 800def4:	4628      	mov	r0, r5
 800def6:	f7ff ff8b 	bl	800de10 <_fflush_r>
 800defa:	2800      	cmp	r0, #0
 800defc:	d0d9      	beq.n	800deb2 <__swbuf_r+0x2e>
 800defe:	e7d6      	b.n	800deae <__swbuf_r+0x2a>

0800df00 <__swsetup_r>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	4b29      	ldr	r3, [pc, #164]	@ (800dfa8 <__swsetup_r+0xa8>)
 800df04:	4605      	mov	r5, r0
 800df06:	6818      	ldr	r0, [r3, #0]
 800df08:	460c      	mov	r4, r1
 800df0a:	b118      	cbz	r0, 800df14 <__swsetup_r+0x14>
 800df0c:	6a03      	ldr	r3, [r0, #32]
 800df0e:	b90b      	cbnz	r3, 800df14 <__swsetup_r+0x14>
 800df10:	f7fd f878 	bl	800b004 <__sinit>
 800df14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df18:	0719      	lsls	r1, r3, #28
 800df1a:	d422      	bmi.n	800df62 <__swsetup_r+0x62>
 800df1c:	06da      	lsls	r2, r3, #27
 800df1e:	d407      	bmi.n	800df30 <__swsetup_r+0x30>
 800df20:	2209      	movs	r2, #9
 800df22:	602a      	str	r2, [r5, #0]
 800df24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df28:	81a3      	strh	r3, [r4, #12]
 800df2a:	f04f 30ff 	mov.w	r0, #4294967295
 800df2e:	e033      	b.n	800df98 <__swsetup_r+0x98>
 800df30:	0758      	lsls	r0, r3, #29
 800df32:	d512      	bpl.n	800df5a <__swsetup_r+0x5a>
 800df34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df36:	b141      	cbz	r1, 800df4a <__swsetup_r+0x4a>
 800df38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df3c:	4299      	cmp	r1, r3
 800df3e:	d002      	beq.n	800df46 <__swsetup_r+0x46>
 800df40:	4628      	mov	r0, r5
 800df42:	f7fe f88d 	bl	800c060 <_free_r>
 800df46:	2300      	movs	r3, #0
 800df48:	6363      	str	r3, [r4, #52]	@ 0x34
 800df4a:	89a3      	ldrh	r3, [r4, #12]
 800df4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df50:	81a3      	strh	r3, [r4, #12]
 800df52:	2300      	movs	r3, #0
 800df54:	6063      	str	r3, [r4, #4]
 800df56:	6923      	ldr	r3, [r4, #16]
 800df58:	6023      	str	r3, [r4, #0]
 800df5a:	89a3      	ldrh	r3, [r4, #12]
 800df5c:	f043 0308 	orr.w	r3, r3, #8
 800df60:	81a3      	strh	r3, [r4, #12]
 800df62:	6923      	ldr	r3, [r4, #16]
 800df64:	b94b      	cbnz	r3, 800df7a <__swsetup_r+0x7a>
 800df66:	89a3      	ldrh	r3, [r4, #12]
 800df68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df70:	d003      	beq.n	800df7a <__swsetup_r+0x7a>
 800df72:	4621      	mov	r1, r4
 800df74:	4628      	mov	r0, r5
 800df76:	f000 fc31 	bl	800e7dc <__smakebuf_r>
 800df7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df7e:	f013 0201 	ands.w	r2, r3, #1
 800df82:	d00a      	beq.n	800df9a <__swsetup_r+0x9a>
 800df84:	2200      	movs	r2, #0
 800df86:	60a2      	str	r2, [r4, #8]
 800df88:	6962      	ldr	r2, [r4, #20]
 800df8a:	4252      	negs	r2, r2
 800df8c:	61a2      	str	r2, [r4, #24]
 800df8e:	6922      	ldr	r2, [r4, #16]
 800df90:	b942      	cbnz	r2, 800dfa4 <__swsetup_r+0xa4>
 800df92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df96:	d1c5      	bne.n	800df24 <__swsetup_r+0x24>
 800df98:	bd38      	pop	{r3, r4, r5, pc}
 800df9a:	0799      	lsls	r1, r3, #30
 800df9c:	bf58      	it	pl
 800df9e:	6962      	ldrpl	r2, [r4, #20]
 800dfa0:	60a2      	str	r2, [r4, #8]
 800dfa2:	e7f4      	b.n	800df8e <__swsetup_r+0x8e>
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	e7f7      	b.n	800df98 <__swsetup_r+0x98>
 800dfa8:	200000d4 	.word	0x200000d4

0800dfac <memmove>:
 800dfac:	4288      	cmp	r0, r1
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	eb01 0402 	add.w	r4, r1, r2
 800dfb4:	d902      	bls.n	800dfbc <memmove+0x10>
 800dfb6:	4284      	cmp	r4, r0
 800dfb8:	4623      	mov	r3, r4
 800dfba:	d807      	bhi.n	800dfcc <memmove+0x20>
 800dfbc:	1e43      	subs	r3, r0, #1
 800dfbe:	42a1      	cmp	r1, r4
 800dfc0:	d008      	beq.n	800dfd4 <memmove+0x28>
 800dfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfca:	e7f8      	b.n	800dfbe <memmove+0x12>
 800dfcc:	4402      	add	r2, r0
 800dfce:	4601      	mov	r1, r0
 800dfd0:	428a      	cmp	r2, r1
 800dfd2:	d100      	bne.n	800dfd6 <memmove+0x2a>
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfde:	e7f7      	b.n	800dfd0 <memmove+0x24>

0800dfe0 <strncmp>:
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	b16a      	cbz	r2, 800e000 <strncmp+0x20>
 800dfe4:	3901      	subs	r1, #1
 800dfe6:	1884      	adds	r4, r0, r2
 800dfe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d103      	bne.n	800dffc <strncmp+0x1c>
 800dff4:	42a0      	cmp	r0, r4
 800dff6:	d001      	beq.n	800dffc <strncmp+0x1c>
 800dff8:	2a00      	cmp	r2, #0
 800dffa:	d1f5      	bne.n	800dfe8 <strncmp+0x8>
 800dffc:	1ad0      	subs	r0, r2, r3
 800dffe:	bd10      	pop	{r4, pc}
 800e000:	4610      	mov	r0, r2
 800e002:	e7fc      	b.n	800dffe <strncmp+0x1e>

0800e004 <_sbrk_r>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	4d06      	ldr	r5, [pc, #24]	@ (800e020 <_sbrk_r+0x1c>)
 800e008:	2300      	movs	r3, #0
 800e00a:	4604      	mov	r4, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	602b      	str	r3, [r5, #0]
 800e010:	f7f3 fca8 	bl	8001964 <_sbrk>
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	d102      	bne.n	800e01e <_sbrk_r+0x1a>
 800e018:	682b      	ldr	r3, [r5, #0]
 800e01a:	b103      	cbz	r3, 800e01e <_sbrk_r+0x1a>
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	bd38      	pop	{r3, r4, r5, pc}
 800e020:	2000078c 	.word	0x2000078c

0800e024 <memcpy>:
 800e024:	440a      	add	r2, r1
 800e026:	4291      	cmp	r1, r2
 800e028:	f100 33ff 	add.w	r3, r0, #4294967295
 800e02c:	d100      	bne.n	800e030 <memcpy+0xc>
 800e02e:	4770      	bx	lr
 800e030:	b510      	push	{r4, lr}
 800e032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e03a:	4291      	cmp	r1, r2
 800e03c:	d1f9      	bne.n	800e032 <memcpy+0xe>
 800e03e:	bd10      	pop	{r4, pc}

0800e040 <nan>:
 800e040:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e048 <nan+0x8>
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	00000000 	.word	0x00000000
 800e04c:	7ff80000 	.word	0x7ff80000

0800e050 <abort>:
 800e050:	b508      	push	{r3, lr}
 800e052:	2006      	movs	r0, #6
 800e054:	f000 fc26 	bl	800e8a4 <raise>
 800e058:	2001      	movs	r0, #1
 800e05a:	f7f3 fc0b 	bl	8001874 <_exit>

0800e05e <_calloc_r>:
 800e05e:	b570      	push	{r4, r5, r6, lr}
 800e060:	fba1 5402 	umull	r5, r4, r1, r2
 800e064:	b93c      	cbnz	r4, 800e076 <_calloc_r+0x18>
 800e066:	4629      	mov	r1, r5
 800e068:	f7fe f86e 	bl	800c148 <_malloc_r>
 800e06c:	4606      	mov	r6, r0
 800e06e:	b928      	cbnz	r0, 800e07c <_calloc_r+0x1e>
 800e070:	2600      	movs	r6, #0
 800e072:	4630      	mov	r0, r6
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	220c      	movs	r2, #12
 800e078:	6002      	str	r2, [r0, #0]
 800e07a:	e7f9      	b.n	800e070 <_calloc_r+0x12>
 800e07c:	462a      	mov	r2, r5
 800e07e:	4621      	mov	r1, r4
 800e080:	f7fd f89f 	bl	800b1c2 <memset>
 800e084:	e7f5      	b.n	800e072 <_calloc_r+0x14>

0800e086 <rshift>:
 800e086:	6903      	ldr	r3, [r0, #16]
 800e088:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e090:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e094:	f100 0414 	add.w	r4, r0, #20
 800e098:	dd45      	ble.n	800e126 <rshift+0xa0>
 800e09a:	f011 011f 	ands.w	r1, r1, #31
 800e09e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e0a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e0a6:	d10c      	bne.n	800e0c2 <rshift+0x3c>
 800e0a8:	f100 0710 	add.w	r7, r0, #16
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	42b1      	cmp	r1, r6
 800e0b0:	d334      	bcc.n	800e11c <rshift+0x96>
 800e0b2:	1a9b      	subs	r3, r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	1eea      	subs	r2, r5, #3
 800e0b8:	4296      	cmp	r6, r2
 800e0ba:	bf38      	it	cc
 800e0bc:	2300      	movcc	r3, #0
 800e0be:	4423      	add	r3, r4
 800e0c0:	e015      	b.n	800e0ee <rshift+0x68>
 800e0c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e0c6:	f1c1 0820 	rsb	r8, r1, #32
 800e0ca:	40cf      	lsrs	r7, r1
 800e0cc:	f105 0e04 	add.w	lr, r5, #4
 800e0d0:	46a1      	mov	r9, r4
 800e0d2:	4576      	cmp	r6, lr
 800e0d4:	46f4      	mov	ip, lr
 800e0d6:	d815      	bhi.n	800e104 <rshift+0x7e>
 800e0d8:	1a9a      	subs	r2, r3, r2
 800e0da:	0092      	lsls	r2, r2, #2
 800e0dc:	3a04      	subs	r2, #4
 800e0de:	3501      	adds	r5, #1
 800e0e0:	42ae      	cmp	r6, r5
 800e0e2:	bf38      	it	cc
 800e0e4:	2200      	movcc	r2, #0
 800e0e6:	18a3      	adds	r3, r4, r2
 800e0e8:	50a7      	str	r7, [r4, r2]
 800e0ea:	b107      	cbz	r7, 800e0ee <rshift+0x68>
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	1b1a      	subs	r2, r3, r4
 800e0f0:	42a3      	cmp	r3, r4
 800e0f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0f6:	bf08      	it	eq
 800e0f8:	2300      	moveq	r3, #0
 800e0fa:	6102      	str	r2, [r0, #16]
 800e0fc:	bf08      	it	eq
 800e0fe:	6143      	streq	r3, [r0, #20]
 800e100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e104:	f8dc c000 	ldr.w	ip, [ip]
 800e108:	fa0c fc08 	lsl.w	ip, ip, r8
 800e10c:	ea4c 0707 	orr.w	r7, ip, r7
 800e110:	f849 7b04 	str.w	r7, [r9], #4
 800e114:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e118:	40cf      	lsrs	r7, r1
 800e11a:	e7da      	b.n	800e0d2 <rshift+0x4c>
 800e11c:	f851 cb04 	ldr.w	ip, [r1], #4
 800e120:	f847 cf04 	str.w	ip, [r7, #4]!
 800e124:	e7c3      	b.n	800e0ae <rshift+0x28>
 800e126:	4623      	mov	r3, r4
 800e128:	e7e1      	b.n	800e0ee <rshift+0x68>

0800e12a <__hexdig_fun>:
 800e12a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e12e:	2b09      	cmp	r3, #9
 800e130:	d802      	bhi.n	800e138 <__hexdig_fun+0xe>
 800e132:	3820      	subs	r0, #32
 800e134:	b2c0      	uxtb	r0, r0
 800e136:	4770      	bx	lr
 800e138:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e13c:	2b05      	cmp	r3, #5
 800e13e:	d801      	bhi.n	800e144 <__hexdig_fun+0x1a>
 800e140:	3847      	subs	r0, #71	@ 0x47
 800e142:	e7f7      	b.n	800e134 <__hexdig_fun+0xa>
 800e144:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e148:	2b05      	cmp	r3, #5
 800e14a:	d801      	bhi.n	800e150 <__hexdig_fun+0x26>
 800e14c:	3827      	subs	r0, #39	@ 0x27
 800e14e:	e7f1      	b.n	800e134 <__hexdig_fun+0xa>
 800e150:	2000      	movs	r0, #0
 800e152:	4770      	bx	lr

0800e154 <__gethex>:
 800e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e158:	b085      	sub	sp, #20
 800e15a:	468a      	mov	sl, r1
 800e15c:	9302      	str	r3, [sp, #8]
 800e15e:	680b      	ldr	r3, [r1, #0]
 800e160:	9001      	str	r0, [sp, #4]
 800e162:	4690      	mov	r8, r2
 800e164:	1c9c      	adds	r4, r3, #2
 800e166:	46a1      	mov	r9, r4
 800e168:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e16c:	2830      	cmp	r0, #48	@ 0x30
 800e16e:	d0fa      	beq.n	800e166 <__gethex+0x12>
 800e170:	eba9 0303 	sub.w	r3, r9, r3
 800e174:	f1a3 0b02 	sub.w	fp, r3, #2
 800e178:	f7ff ffd7 	bl	800e12a <__hexdig_fun>
 800e17c:	4605      	mov	r5, r0
 800e17e:	2800      	cmp	r0, #0
 800e180:	d168      	bne.n	800e254 <__gethex+0x100>
 800e182:	49a0      	ldr	r1, [pc, #640]	@ (800e404 <__gethex+0x2b0>)
 800e184:	2201      	movs	r2, #1
 800e186:	4648      	mov	r0, r9
 800e188:	f7ff ff2a 	bl	800dfe0 <strncmp>
 800e18c:	4607      	mov	r7, r0
 800e18e:	2800      	cmp	r0, #0
 800e190:	d167      	bne.n	800e262 <__gethex+0x10e>
 800e192:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e196:	4626      	mov	r6, r4
 800e198:	f7ff ffc7 	bl	800e12a <__hexdig_fun>
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d062      	beq.n	800e266 <__gethex+0x112>
 800e1a0:	4623      	mov	r3, r4
 800e1a2:	7818      	ldrb	r0, [r3, #0]
 800e1a4:	2830      	cmp	r0, #48	@ 0x30
 800e1a6:	4699      	mov	r9, r3
 800e1a8:	f103 0301 	add.w	r3, r3, #1
 800e1ac:	d0f9      	beq.n	800e1a2 <__gethex+0x4e>
 800e1ae:	f7ff ffbc 	bl	800e12a <__hexdig_fun>
 800e1b2:	fab0 f580 	clz	r5, r0
 800e1b6:	096d      	lsrs	r5, r5, #5
 800e1b8:	f04f 0b01 	mov.w	fp, #1
 800e1bc:	464a      	mov	r2, r9
 800e1be:	4616      	mov	r6, r2
 800e1c0:	3201      	adds	r2, #1
 800e1c2:	7830      	ldrb	r0, [r6, #0]
 800e1c4:	f7ff ffb1 	bl	800e12a <__hexdig_fun>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d1f8      	bne.n	800e1be <__gethex+0x6a>
 800e1cc:	498d      	ldr	r1, [pc, #564]	@ (800e404 <__gethex+0x2b0>)
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f7ff ff05 	bl	800dfe0 <strncmp>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d13f      	bne.n	800e25a <__gethex+0x106>
 800e1da:	b944      	cbnz	r4, 800e1ee <__gethex+0x9a>
 800e1dc:	1c74      	adds	r4, r6, #1
 800e1de:	4622      	mov	r2, r4
 800e1e0:	4616      	mov	r6, r2
 800e1e2:	3201      	adds	r2, #1
 800e1e4:	7830      	ldrb	r0, [r6, #0]
 800e1e6:	f7ff ffa0 	bl	800e12a <__hexdig_fun>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d1f8      	bne.n	800e1e0 <__gethex+0x8c>
 800e1ee:	1ba4      	subs	r4, r4, r6
 800e1f0:	00a7      	lsls	r7, r4, #2
 800e1f2:	7833      	ldrb	r3, [r6, #0]
 800e1f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e1f8:	2b50      	cmp	r3, #80	@ 0x50
 800e1fa:	d13e      	bne.n	800e27a <__gethex+0x126>
 800e1fc:	7873      	ldrb	r3, [r6, #1]
 800e1fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800e200:	d033      	beq.n	800e26a <__gethex+0x116>
 800e202:	2b2d      	cmp	r3, #45	@ 0x2d
 800e204:	d034      	beq.n	800e270 <__gethex+0x11c>
 800e206:	1c71      	adds	r1, r6, #1
 800e208:	2400      	movs	r4, #0
 800e20a:	7808      	ldrb	r0, [r1, #0]
 800e20c:	f7ff ff8d 	bl	800e12a <__hexdig_fun>
 800e210:	1e43      	subs	r3, r0, #1
 800e212:	b2db      	uxtb	r3, r3
 800e214:	2b18      	cmp	r3, #24
 800e216:	d830      	bhi.n	800e27a <__gethex+0x126>
 800e218:	f1a0 0210 	sub.w	r2, r0, #16
 800e21c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e220:	f7ff ff83 	bl	800e12a <__hexdig_fun>
 800e224:	f100 3cff 	add.w	ip, r0, #4294967295
 800e228:	fa5f fc8c 	uxtb.w	ip, ip
 800e22c:	f1bc 0f18 	cmp.w	ip, #24
 800e230:	f04f 030a 	mov.w	r3, #10
 800e234:	d91e      	bls.n	800e274 <__gethex+0x120>
 800e236:	b104      	cbz	r4, 800e23a <__gethex+0xe6>
 800e238:	4252      	negs	r2, r2
 800e23a:	4417      	add	r7, r2
 800e23c:	f8ca 1000 	str.w	r1, [sl]
 800e240:	b1ed      	cbz	r5, 800e27e <__gethex+0x12a>
 800e242:	f1bb 0f00 	cmp.w	fp, #0
 800e246:	bf0c      	ite	eq
 800e248:	2506      	moveq	r5, #6
 800e24a:	2500      	movne	r5, #0
 800e24c:	4628      	mov	r0, r5
 800e24e:	b005      	add	sp, #20
 800e250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e254:	2500      	movs	r5, #0
 800e256:	462c      	mov	r4, r5
 800e258:	e7b0      	b.n	800e1bc <__gethex+0x68>
 800e25a:	2c00      	cmp	r4, #0
 800e25c:	d1c7      	bne.n	800e1ee <__gethex+0x9a>
 800e25e:	4627      	mov	r7, r4
 800e260:	e7c7      	b.n	800e1f2 <__gethex+0x9e>
 800e262:	464e      	mov	r6, r9
 800e264:	462f      	mov	r7, r5
 800e266:	2501      	movs	r5, #1
 800e268:	e7c3      	b.n	800e1f2 <__gethex+0x9e>
 800e26a:	2400      	movs	r4, #0
 800e26c:	1cb1      	adds	r1, r6, #2
 800e26e:	e7cc      	b.n	800e20a <__gethex+0xb6>
 800e270:	2401      	movs	r4, #1
 800e272:	e7fb      	b.n	800e26c <__gethex+0x118>
 800e274:	fb03 0002 	mla	r0, r3, r2, r0
 800e278:	e7ce      	b.n	800e218 <__gethex+0xc4>
 800e27a:	4631      	mov	r1, r6
 800e27c:	e7de      	b.n	800e23c <__gethex+0xe8>
 800e27e:	eba6 0309 	sub.w	r3, r6, r9
 800e282:	3b01      	subs	r3, #1
 800e284:	4629      	mov	r1, r5
 800e286:	2b07      	cmp	r3, #7
 800e288:	dc0a      	bgt.n	800e2a0 <__gethex+0x14c>
 800e28a:	9801      	ldr	r0, [sp, #4]
 800e28c:	f7fd ffe8 	bl	800c260 <_Balloc>
 800e290:	4604      	mov	r4, r0
 800e292:	b940      	cbnz	r0, 800e2a6 <__gethex+0x152>
 800e294:	4b5c      	ldr	r3, [pc, #368]	@ (800e408 <__gethex+0x2b4>)
 800e296:	4602      	mov	r2, r0
 800e298:	21e4      	movs	r1, #228	@ 0xe4
 800e29a:	485c      	ldr	r0, [pc, #368]	@ (800e40c <__gethex+0x2b8>)
 800e29c:	f7fd f874 	bl	800b388 <__assert_func>
 800e2a0:	3101      	adds	r1, #1
 800e2a2:	105b      	asrs	r3, r3, #1
 800e2a4:	e7ef      	b.n	800e286 <__gethex+0x132>
 800e2a6:	f100 0a14 	add.w	sl, r0, #20
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	4655      	mov	r5, sl
 800e2ae:	469b      	mov	fp, r3
 800e2b0:	45b1      	cmp	r9, r6
 800e2b2:	d337      	bcc.n	800e324 <__gethex+0x1d0>
 800e2b4:	f845 bb04 	str.w	fp, [r5], #4
 800e2b8:	eba5 050a 	sub.w	r5, r5, sl
 800e2bc:	10ad      	asrs	r5, r5, #2
 800e2be:	6125      	str	r5, [r4, #16]
 800e2c0:	4658      	mov	r0, fp
 800e2c2:	f7fe f8bf 	bl	800c444 <__hi0bits>
 800e2c6:	016d      	lsls	r5, r5, #5
 800e2c8:	f8d8 6000 	ldr.w	r6, [r8]
 800e2cc:	1a2d      	subs	r5, r5, r0
 800e2ce:	42b5      	cmp	r5, r6
 800e2d0:	dd54      	ble.n	800e37c <__gethex+0x228>
 800e2d2:	1bad      	subs	r5, r5, r6
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7fe fc53 	bl	800cb82 <__any_on>
 800e2dc:	4681      	mov	r9, r0
 800e2de:	b178      	cbz	r0, 800e300 <__gethex+0x1ac>
 800e2e0:	1e6b      	subs	r3, r5, #1
 800e2e2:	1159      	asrs	r1, r3, #5
 800e2e4:	f003 021f 	and.w	r2, r3, #31
 800e2e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e2ec:	f04f 0901 	mov.w	r9, #1
 800e2f0:	fa09 f202 	lsl.w	r2, r9, r2
 800e2f4:	420a      	tst	r2, r1
 800e2f6:	d003      	beq.n	800e300 <__gethex+0x1ac>
 800e2f8:	454b      	cmp	r3, r9
 800e2fa:	dc36      	bgt.n	800e36a <__gethex+0x216>
 800e2fc:	f04f 0902 	mov.w	r9, #2
 800e300:	4629      	mov	r1, r5
 800e302:	4620      	mov	r0, r4
 800e304:	f7ff febf 	bl	800e086 <rshift>
 800e308:	442f      	add	r7, r5
 800e30a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e30e:	42bb      	cmp	r3, r7
 800e310:	da42      	bge.n	800e398 <__gethex+0x244>
 800e312:	9801      	ldr	r0, [sp, #4]
 800e314:	4621      	mov	r1, r4
 800e316:	f7fd ffe3 	bl	800c2e0 <_Bfree>
 800e31a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e31c:	2300      	movs	r3, #0
 800e31e:	6013      	str	r3, [r2, #0]
 800e320:	25a3      	movs	r5, #163	@ 0xa3
 800e322:	e793      	b.n	800e24c <__gethex+0xf8>
 800e324:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e328:	2a2e      	cmp	r2, #46	@ 0x2e
 800e32a:	d012      	beq.n	800e352 <__gethex+0x1fe>
 800e32c:	2b20      	cmp	r3, #32
 800e32e:	d104      	bne.n	800e33a <__gethex+0x1e6>
 800e330:	f845 bb04 	str.w	fp, [r5], #4
 800e334:	f04f 0b00 	mov.w	fp, #0
 800e338:	465b      	mov	r3, fp
 800e33a:	7830      	ldrb	r0, [r6, #0]
 800e33c:	9303      	str	r3, [sp, #12]
 800e33e:	f7ff fef4 	bl	800e12a <__hexdig_fun>
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	f000 000f 	and.w	r0, r0, #15
 800e348:	4098      	lsls	r0, r3
 800e34a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e34e:	3304      	adds	r3, #4
 800e350:	e7ae      	b.n	800e2b0 <__gethex+0x15c>
 800e352:	45b1      	cmp	r9, r6
 800e354:	d8ea      	bhi.n	800e32c <__gethex+0x1d8>
 800e356:	492b      	ldr	r1, [pc, #172]	@ (800e404 <__gethex+0x2b0>)
 800e358:	9303      	str	r3, [sp, #12]
 800e35a:	2201      	movs	r2, #1
 800e35c:	4630      	mov	r0, r6
 800e35e:	f7ff fe3f 	bl	800dfe0 <strncmp>
 800e362:	9b03      	ldr	r3, [sp, #12]
 800e364:	2800      	cmp	r0, #0
 800e366:	d1e1      	bne.n	800e32c <__gethex+0x1d8>
 800e368:	e7a2      	b.n	800e2b0 <__gethex+0x15c>
 800e36a:	1ea9      	subs	r1, r5, #2
 800e36c:	4620      	mov	r0, r4
 800e36e:	f7fe fc08 	bl	800cb82 <__any_on>
 800e372:	2800      	cmp	r0, #0
 800e374:	d0c2      	beq.n	800e2fc <__gethex+0x1a8>
 800e376:	f04f 0903 	mov.w	r9, #3
 800e37a:	e7c1      	b.n	800e300 <__gethex+0x1ac>
 800e37c:	da09      	bge.n	800e392 <__gethex+0x23e>
 800e37e:	1b75      	subs	r5, r6, r5
 800e380:	4621      	mov	r1, r4
 800e382:	9801      	ldr	r0, [sp, #4]
 800e384:	462a      	mov	r2, r5
 800e386:	f7fe f9c3 	bl	800c710 <__lshift>
 800e38a:	1b7f      	subs	r7, r7, r5
 800e38c:	4604      	mov	r4, r0
 800e38e:	f100 0a14 	add.w	sl, r0, #20
 800e392:	f04f 0900 	mov.w	r9, #0
 800e396:	e7b8      	b.n	800e30a <__gethex+0x1b6>
 800e398:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e39c:	42bd      	cmp	r5, r7
 800e39e:	dd6f      	ble.n	800e480 <__gethex+0x32c>
 800e3a0:	1bed      	subs	r5, r5, r7
 800e3a2:	42ae      	cmp	r6, r5
 800e3a4:	dc34      	bgt.n	800e410 <__gethex+0x2bc>
 800e3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d022      	beq.n	800e3f4 <__gethex+0x2a0>
 800e3ae:	2b03      	cmp	r3, #3
 800e3b0:	d024      	beq.n	800e3fc <__gethex+0x2a8>
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d115      	bne.n	800e3e2 <__gethex+0x28e>
 800e3b6:	42ae      	cmp	r6, r5
 800e3b8:	d113      	bne.n	800e3e2 <__gethex+0x28e>
 800e3ba:	2e01      	cmp	r6, #1
 800e3bc:	d10b      	bne.n	800e3d6 <__gethex+0x282>
 800e3be:	9a02      	ldr	r2, [sp, #8]
 800e3c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e3c4:	6013      	str	r3, [r2, #0]
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	6123      	str	r3, [r4, #16]
 800e3ca:	f8ca 3000 	str.w	r3, [sl]
 800e3ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3d0:	2562      	movs	r5, #98	@ 0x62
 800e3d2:	601c      	str	r4, [r3, #0]
 800e3d4:	e73a      	b.n	800e24c <__gethex+0xf8>
 800e3d6:	1e71      	subs	r1, r6, #1
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f7fe fbd2 	bl	800cb82 <__any_on>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d1ed      	bne.n	800e3be <__gethex+0x26a>
 800e3e2:	9801      	ldr	r0, [sp, #4]
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	f7fd ff7b 	bl	800c2e0 <_Bfree>
 800e3ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	2550      	movs	r5, #80	@ 0x50
 800e3f2:	e72b      	b.n	800e24c <__gethex+0xf8>
 800e3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1f3      	bne.n	800e3e2 <__gethex+0x28e>
 800e3fa:	e7e0      	b.n	800e3be <__gethex+0x26a>
 800e3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d1dd      	bne.n	800e3be <__gethex+0x26a>
 800e402:	e7ee      	b.n	800e3e2 <__gethex+0x28e>
 800e404:	0800ee98 	.word	0x0800ee98
 800e408:	0800ed30 	.word	0x0800ed30
 800e40c:	0800ef09 	.word	0x0800ef09
 800e410:	1e6f      	subs	r7, r5, #1
 800e412:	f1b9 0f00 	cmp.w	r9, #0
 800e416:	d130      	bne.n	800e47a <__gethex+0x326>
 800e418:	b127      	cbz	r7, 800e424 <__gethex+0x2d0>
 800e41a:	4639      	mov	r1, r7
 800e41c:	4620      	mov	r0, r4
 800e41e:	f7fe fbb0 	bl	800cb82 <__any_on>
 800e422:	4681      	mov	r9, r0
 800e424:	117a      	asrs	r2, r7, #5
 800e426:	2301      	movs	r3, #1
 800e428:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e42c:	f007 071f 	and.w	r7, r7, #31
 800e430:	40bb      	lsls	r3, r7
 800e432:	4213      	tst	r3, r2
 800e434:	4629      	mov	r1, r5
 800e436:	4620      	mov	r0, r4
 800e438:	bf18      	it	ne
 800e43a:	f049 0902 	orrne.w	r9, r9, #2
 800e43e:	f7ff fe22 	bl	800e086 <rshift>
 800e442:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e446:	1b76      	subs	r6, r6, r5
 800e448:	2502      	movs	r5, #2
 800e44a:	f1b9 0f00 	cmp.w	r9, #0
 800e44e:	d047      	beq.n	800e4e0 <__gethex+0x38c>
 800e450:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d015      	beq.n	800e484 <__gethex+0x330>
 800e458:	2b03      	cmp	r3, #3
 800e45a:	d017      	beq.n	800e48c <__gethex+0x338>
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d109      	bne.n	800e474 <__gethex+0x320>
 800e460:	f019 0f02 	tst.w	r9, #2
 800e464:	d006      	beq.n	800e474 <__gethex+0x320>
 800e466:	f8da 3000 	ldr.w	r3, [sl]
 800e46a:	ea49 0903 	orr.w	r9, r9, r3
 800e46e:	f019 0f01 	tst.w	r9, #1
 800e472:	d10e      	bne.n	800e492 <__gethex+0x33e>
 800e474:	f045 0510 	orr.w	r5, r5, #16
 800e478:	e032      	b.n	800e4e0 <__gethex+0x38c>
 800e47a:	f04f 0901 	mov.w	r9, #1
 800e47e:	e7d1      	b.n	800e424 <__gethex+0x2d0>
 800e480:	2501      	movs	r5, #1
 800e482:	e7e2      	b.n	800e44a <__gethex+0x2f6>
 800e484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e486:	f1c3 0301 	rsb	r3, r3, #1
 800e48a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0f0      	beq.n	800e474 <__gethex+0x320>
 800e492:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e496:	f104 0314 	add.w	r3, r4, #20
 800e49a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e49e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e4a2:	f04f 0c00 	mov.w	ip, #0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e4b0:	d01b      	beq.n	800e4ea <__gethex+0x396>
 800e4b2:	3201      	adds	r2, #1
 800e4b4:	6002      	str	r2, [r0, #0]
 800e4b6:	2d02      	cmp	r5, #2
 800e4b8:	f104 0314 	add.w	r3, r4, #20
 800e4bc:	d13c      	bne.n	800e538 <__gethex+0x3e4>
 800e4be:	f8d8 2000 	ldr.w	r2, [r8]
 800e4c2:	3a01      	subs	r2, #1
 800e4c4:	42b2      	cmp	r2, r6
 800e4c6:	d109      	bne.n	800e4dc <__gethex+0x388>
 800e4c8:	1171      	asrs	r1, r6, #5
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4d0:	f006 061f 	and.w	r6, r6, #31
 800e4d4:	fa02 f606 	lsl.w	r6, r2, r6
 800e4d8:	421e      	tst	r6, r3
 800e4da:	d13a      	bne.n	800e552 <__gethex+0x3fe>
 800e4dc:	f045 0520 	orr.w	r5, r5, #32
 800e4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4e2:	601c      	str	r4, [r3, #0]
 800e4e4:	9b02      	ldr	r3, [sp, #8]
 800e4e6:	601f      	str	r7, [r3, #0]
 800e4e8:	e6b0      	b.n	800e24c <__gethex+0xf8>
 800e4ea:	4299      	cmp	r1, r3
 800e4ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800e4f0:	d8d9      	bhi.n	800e4a6 <__gethex+0x352>
 800e4f2:	68a3      	ldr	r3, [r4, #8]
 800e4f4:	459b      	cmp	fp, r3
 800e4f6:	db17      	blt.n	800e528 <__gethex+0x3d4>
 800e4f8:	6861      	ldr	r1, [r4, #4]
 800e4fa:	9801      	ldr	r0, [sp, #4]
 800e4fc:	3101      	adds	r1, #1
 800e4fe:	f7fd feaf 	bl	800c260 <_Balloc>
 800e502:	4681      	mov	r9, r0
 800e504:	b918      	cbnz	r0, 800e50e <__gethex+0x3ba>
 800e506:	4b1a      	ldr	r3, [pc, #104]	@ (800e570 <__gethex+0x41c>)
 800e508:	4602      	mov	r2, r0
 800e50a:	2184      	movs	r1, #132	@ 0x84
 800e50c:	e6c5      	b.n	800e29a <__gethex+0x146>
 800e50e:	6922      	ldr	r2, [r4, #16]
 800e510:	3202      	adds	r2, #2
 800e512:	f104 010c 	add.w	r1, r4, #12
 800e516:	0092      	lsls	r2, r2, #2
 800e518:	300c      	adds	r0, #12
 800e51a:	f7ff fd83 	bl	800e024 <memcpy>
 800e51e:	4621      	mov	r1, r4
 800e520:	9801      	ldr	r0, [sp, #4]
 800e522:	f7fd fedd 	bl	800c2e0 <_Bfree>
 800e526:	464c      	mov	r4, r9
 800e528:	6923      	ldr	r3, [r4, #16]
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e530:	6122      	str	r2, [r4, #16]
 800e532:	2201      	movs	r2, #1
 800e534:	615a      	str	r2, [r3, #20]
 800e536:	e7be      	b.n	800e4b6 <__gethex+0x362>
 800e538:	6922      	ldr	r2, [r4, #16]
 800e53a:	455a      	cmp	r2, fp
 800e53c:	dd0b      	ble.n	800e556 <__gethex+0x402>
 800e53e:	2101      	movs	r1, #1
 800e540:	4620      	mov	r0, r4
 800e542:	f7ff fda0 	bl	800e086 <rshift>
 800e546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e54a:	3701      	adds	r7, #1
 800e54c:	42bb      	cmp	r3, r7
 800e54e:	f6ff aee0 	blt.w	800e312 <__gethex+0x1be>
 800e552:	2501      	movs	r5, #1
 800e554:	e7c2      	b.n	800e4dc <__gethex+0x388>
 800e556:	f016 061f 	ands.w	r6, r6, #31
 800e55a:	d0fa      	beq.n	800e552 <__gethex+0x3fe>
 800e55c:	4453      	add	r3, sl
 800e55e:	f1c6 0620 	rsb	r6, r6, #32
 800e562:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e566:	f7fd ff6d 	bl	800c444 <__hi0bits>
 800e56a:	42b0      	cmp	r0, r6
 800e56c:	dbe7      	blt.n	800e53e <__gethex+0x3ea>
 800e56e:	e7f0      	b.n	800e552 <__gethex+0x3fe>
 800e570:	0800ed30 	.word	0x0800ed30

0800e574 <L_shift>:
 800e574:	f1c2 0208 	rsb	r2, r2, #8
 800e578:	0092      	lsls	r2, r2, #2
 800e57a:	b570      	push	{r4, r5, r6, lr}
 800e57c:	f1c2 0620 	rsb	r6, r2, #32
 800e580:	6843      	ldr	r3, [r0, #4]
 800e582:	6804      	ldr	r4, [r0, #0]
 800e584:	fa03 f506 	lsl.w	r5, r3, r6
 800e588:	432c      	orrs	r4, r5
 800e58a:	40d3      	lsrs	r3, r2
 800e58c:	6004      	str	r4, [r0, #0]
 800e58e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e592:	4288      	cmp	r0, r1
 800e594:	d3f4      	bcc.n	800e580 <L_shift+0xc>
 800e596:	bd70      	pop	{r4, r5, r6, pc}

0800e598 <__match>:
 800e598:	b530      	push	{r4, r5, lr}
 800e59a:	6803      	ldr	r3, [r0, #0]
 800e59c:	3301      	adds	r3, #1
 800e59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5a2:	b914      	cbnz	r4, 800e5aa <__match+0x12>
 800e5a4:	6003      	str	r3, [r0, #0]
 800e5a6:	2001      	movs	r0, #1
 800e5a8:	bd30      	pop	{r4, r5, pc}
 800e5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e5b2:	2d19      	cmp	r5, #25
 800e5b4:	bf98      	it	ls
 800e5b6:	3220      	addls	r2, #32
 800e5b8:	42a2      	cmp	r2, r4
 800e5ba:	d0f0      	beq.n	800e59e <__match+0x6>
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e7f3      	b.n	800e5a8 <__match+0x10>

0800e5c0 <__hexnan>:
 800e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c4:	680b      	ldr	r3, [r1, #0]
 800e5c6:	6801      	ldr	r1, [r0, #0]
 800e5c8:	115e      	asrs	r6, r3, #5
 800e5ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5ce:	f013 031f 	ands.w	r3, r3, #31
 800e5d2:	b087      	sub	sp, #28
 800e5d4:	bf18      	it	ne
 800e5d6:	3604      	addne	r6, #4
 800e5d8:	2500      	movs	r5, #0
 800e5da:	1f37      	subs	r7, r6, #4
 800e5dc:	4682      	mov	sl, r0
 800e5de:	4690      	mov	r8, r2
 800e5e0:	9301      	str	r3, [sp, #4]
 800e5e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e5e6:	46b9      	mov	r9, r7
 800e5e8:	463c      	mov	r4, r7
 800e5ea:	9502      	str	r5, [sp, #8]
 800e5ec:	46ab      	mov	fp, r5
 800e5ee:	784a      	ldrb	r2, [r1, #1]
 800e5f0:	1c4b      	adds	r3, r1, #1
 800e5f2:	9303      	str	r3, [sp, #12]
 800e5f4:	b342      	cbz	r2, 800e648 <__hexnan+0x88>
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	9105      	str	r1, [sp, #20]
 800e5fa:	9204      	str	r2, [sp, #16]
 800e5fc:	f7ff fd95 	bl	800e12a <__hexdig_fun>
 800e600:	2800      	cmp	r0, #0
 800e602:	d151      	bne.n	800e6a8 <__hexnan+0xe8>
 800e604:	9a04      	ldr	r2, [sp, #16]
 800e606:	9905      	ldr	r1, [sp, #20]
 800e608:	2a20      	cmp	r2, #32
 800e60a:	d818      	bhi.n	800e63e <__hexnan+0x7e>
 800e60c:	9b02      	ldr	r3, [sp, #8]
 800e60e:	459b      	cmp	fp, r3
 800e610:	dd13      	ble.n	800e63a <__hexnan+0x7a>
 800e612:	454c      	cmp	r4, r9
 800e614:	d206      	bcs.n	800e624 <__hexnan+0x64>
 800e616:	2d07      	cmp	r5, #7
 800e618:	dc04      	bgt.n	800e624 <__hexnan+0x64>
 800e61a:	462a      	mov	r2, r5
 800e61c:	4649      	mov	r1, r9
 800e61e:	4620      	mov	r0, r4
 800e620:	f7ff ffa8 	bl	800e574 <L_shift>
 800e624:	4544      	cmp	r4, r8
 800e626:	d952      	bls.n	800e6ce <__hexnan+0x10e>
 800e628:	2300      	movs	r3, #0
 800e62a:	f1a4 0904 	sub.w	r9, r4, #4
 800e62e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e632:	f8cd b008 	str.w	fp, [sp, #8]
 800e636:	464c      	mov	r4, r9
 800e638:	461d      	mov	r5, r3
 800e63a:	9903      	ldr	r1, [sp, #12]
 800e63c:	e7d7      	b.n	800e5ee <__hexnan+0x2e>
 800e63e:	2a29      	cmp	r2, #41	@ 0x29
 800e640:	d157      	bne.n	800e6f2 <__hexnan+0x132>
 800e642:	3102      	adds	r1, #2
 800e644:	f8ca 1000 	str.w	r1, [sl]
 800e648:	f1bb 0f00 	cmp.w	fp, #0
 800e64c:	d051      	beq.n	800e6f2 <__hexnan+0x132>
 800e64e:	454c      	cmp	r4, r9
 800e650:	d206      	bcs.n	800e660 <__hexnan+0xa0>
 800e652:	2d07      	cmp	r5, #7
 800e654:	dc04      	bgt.n	800e660 <__hexnan+0xa0>
 800e656:	462a      	mov	r2, r5
 800e658:	4649      	mov	r1, r9
 800e65a:	4620      	mov	r0, r4
 800e65c:	f7ff ff8a 	bl	800e574 <L_shift>
 800e660:	4544      	cmp	r4, r8
 800e662:	d936      	bls.n	800e6d2 <__hexnan+0x112>
 800e664:	f1a8 0204 	sub.w	r2, r8, #4
 800e668:	4623      	mov	r3, r4
 800e66a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e66e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e672:	429f      	cmp	r7, r3
 800e674:	d2f9      	bcs.n	800e66a <__hexnan+0xaa>
 800e676:	1b3b      	subs	r3, r7, r4
 800e678:	f023 0303 	bic.w	r3, r3, #3
 800e67c:	3304      	adds	r3, #4
 800e67e:	3401      	adds	r4, #1
 800e680:	3e03      	subs	r6, #3
 800e682:	42b4      	cmp	r4, r6
 800e684:	bf88      	it	hi
 800e686:	2304      	movhi	r3, #4
 800e688:	4443      	add	r3, r8
 800e68a:	2200      	movs	r2, #0
 800e68c:	f843 2b04 	str.w	r2, [r3], #4
 800e690:	429f      	cmp	r7, r3
 800e692:	d2fb      	bcs.n	800e68c <__hexnan+0xcc>
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	b91b      	cbnz	r3, 800e6a0 <__hexnan+0xe0>
 800e698:	4547      	cmp	r7, r8
 800e69a:	d128      	bne.n	800e6ee <__hexnan+0x12e>
 800e69c:	2301      	movs	r3, #1
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	2005      	movs	r0, #5
 800e6a2:	b007      	add	sp, #28
 800e6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a8:	3501      	adds	r5, #1
 800e6aa:	2d08      	cmp	r5, #8
 800e6ac:	f10b 0b01 	add.w	fp, fp, #1
 800e6b0:	dd06      	ble.n	800e6c0 <__hexnan+0x100>
 800e6b2:	4544      	cmp	r4, r8
 800e6b4:	d9c1      	bls.n	800e63a <__hexnan+0x7a>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6bc:	2501      	movs	r5, #1
 800e6be:	3c04      	subs	r4, #4
 800e6c0:	6822      	ldr	r2, [r4, #0]
 800e6c2:	f000 000f 	and.w	r0, r0, #15
 800e6c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e6ca:	6020      	str	r0, [r4, #0]
 800e6cc:	e7b5      	b.n	800e63a <__hexnan+0x7a>
 800e6ce:	2508      	movs	r5, #8
 800e6d0:	e7b3      	b.n	800e63a <__hexnan+0x7a>
 800e6d2:	9b01      	ldr	r3, [sp, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d0dd      	beq.n	800e694 <__hexnan+0xd4>
 800e6d8:	f1c3 0320 	rsb	r3, r3, #32
 800e6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e0:	40da      	lsrs	r2, r3
 800e6e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e6ec:	e7d2      	b.n	800e694 <__hexnan+0xd4>
 800e6ee:	3f04      	subs	r7, #4
 800e6f0:	e7d0      	b.n	800e694 <__hexnan+0xd4>
 800e6f2:	2004      	movs	r0, #4
 800e6f4:	e7d5      	b.n	800e6a2 <__hexnan+0xe2>

0800e6f6 <__ascii_mbtowc>:
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	b901      	cbnz	r1, 800e6fc <__ascii_mbtowc+0x6>
 800e6fa:	a901      	add	r1, sp, #4
 800e6fc:	b142      	cbz	r2, 800e710 <__ascii_mbtowc+0x1a>
 800e6fe:	b14b      	cbz	r3, 800e714 <__ascii_mbtowc+0x1e>
 800e700:	7813      	ldrb	r3, [r2, #0]
 800e702:	600b      	str	r3, [r1, #0]
 800e704:	7812      	ldrb	r2, [r2, #0]
 800e706:	1e10      	subs	r0, r2, #0
 800e708:	bf18      	it	ne
 800e70a:	2001      	movne	r0, #1
 800e70c:	b002      	add	sp, #8
 800e70e:	4770      	bx	lr
 800e710:	4610      	mov	r0, r2
 800e712:	e7fb      	b.n	800e70c <__ascii_mbtowc+0x16>
 800e714:	f06f 0001 	mvn.w	r0, #1
 800e718:	e7f8      	b.n	800e70c <__ascii_mbtowc+0x16>

0800e71a <_realloc_r>:
 800e71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e71e:	4680      	mov	r8, r0
 800e720:	4615      	mov	r5, r2
 800e722:	460c      	mov	r4, r1
 800e724:	b921      	cbnz	r1, 800e730 <_realloc_r+0x16>
 800e726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e72a:	4611      	mov	r1, r2
 800e72c:	f7fd bd0c 	b.w	800c148 <_malloc_r>
 800e730:	b92a      	cbnz	r2, 800e73e <_realloc_r+0x24>
 800e732:	f7fd fc95 	bl	800c060 <_free_r>
 800e736:	2400      	movs	r4, #0
 800e738:	4620      	mov	r0, r4
 800e73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e73e:	f000 f8ef 	bl	800e920 <_malloc_usable_size_r>
 800e742:	4285      	cmp	r5, r0
 800e744:	4606      	mov	r6, r0
 800e746:	d802      	bhi.n	800e74e <_realloc_r+0x34>
 800e748:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e74c:	d8f4      	bhi.n	800e738 <_realloc_r+0x1e>
 800e74e:	4629      	mov	r1, r5
 800e750:	4640      	mov	r0, r8
 800e752:	f7fd fcf9 	bl	800c148 <_malloc_r>
 800e756:	4607      	mov	r7, r0
 800e758:	2800      	cmp	r0, #0
 800e75a:	d0ec      	beq.n	800e736 <_realloc_r+0x1c>
 800e75c:	42b5      	cmp	r5, r6
 800e75e:	462a      	mov	r2, r5
 800e760:	4621      	mov	r1, r4
 800e762:	bf28      	it	cs
 800e764:	4632      	movcs	r2, r6
 800e766:	f7ff fc5d 	bl	800e024 <memcpy>
 800e76a:	4621      	mov	r1, r4
 800e76c:	4640      	mov	r0, r8
 800e76e:	f7fd fc77 	bl	800c060 <_free_r>
 800e772:	463c      	mov	r4, r7
 800e774:	e7e0      	b.n	800e738 <_realloc_r+0x1e>

0800e776 <__ascii_wctomb>:
 800e776:	4603      	mov	r3, r0
 800e778:	4608      	mov	r0, r1
 800e77a:	b141      	cbz	r1, 800e78e <__ascii_wctomb+0x18>
 800e77c:	2aff      	cmp	r2, #255	@ 0xff
 800e77e:	d904      	bls.n	800e78a <__ascii_wctomb+0x14>
 800e780:	228a      	movs	r2, #138	@ 0x8a
 800e782:	601a      	str	r2, [r3, #0]
 800e784:	f04f 30ff 	mov.w	r0, #4294967295
 800e788:	4770      	bx	lr
 800e78a:	700a      	strb	r2, [r1, #0]
 800e78c:	2001      	movs	r0, #1
 800e78e:	4770      	bx	lr

0800e790 <__swhatbuf_r>:
 800e790:	b570      	push	{r4, r5, r6, lr}
 800e792:	460c      	mov	r4, r1
 800e794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e798:	2900      	cmp	r1, #0
 800e79a:	b096      	sub	sp, #88	@ 0x58
 800e79c:	4615      	mov	r5, r2
 800e79e:	461e      	mov	r6, r3
 800e7a0:	da0d      	bge.n	800e7be <__swhatbuf_r+0x2e>
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7a8:	f04f 0100 	mov.w	r1, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2340      	movne	r3, #64	@ 0x40
 800e7b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	6031      	str	r1, [r6, #0]
 800e7b8:	602b      	str	r3, [r5, #0]
 800e7ba:	b016      	add	sp, #88	@ 0x58
 800e7bc:	bd70      	pop	{r4, r5, r6, pc}
 800e7be:	466a      	mov	r2, sp
 800e7c0:	f000 f878 	bl	800e8b4 <_fstat_r>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	dbec      	blt.n	800e7a2 <__swhatbuf_r+0x12>
 800e7c8:	9901      	ldr	r1, [sp, #4]
 800e7ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7d2:	4259      	negs	r1, r3
 800e7d4:	4159      	adcs	r1, r3
 800e7d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7da:	e7eb      	b.n	800e7b4 <__swhatbuf_r+0x24>

0800e7dc <__smakebuf_r>:
 800e7dc:	898b      	ldrh	r3, [r1, #12]
 800e7de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7e0:	079d      	lsls	r5, r3, #30
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	460c      	mov	r4, r1
 800e7e6:	d507      	bpl.n	800e7f8 <__smakebuf_r+0x1c>
 800e7e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	6123      	str	r3, [r4, #16]
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	6163      	str	r3, [r4, #20]
 800e7f4:	b003      	add	sp, #12
 800e7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7f8:	ab01      	add	r3, sp, #4
 800e7fa:	466a      	mov	r2, sp
 800e7fc:	f7ff ffc8 	bl	800e790 <__swhatbuf_r>
 800e800:	9f00      	ldr	r7, [sp, #0]
 800e802:	4605      	mov	r5, r0
 800e804:	4639      	mov	r1, r7
 800e806:	4630      	mov	r0, r6
 800e808:	f7fd fc9e 	bl	800c148 <_malloc_r>
 800e80c:	b948      	cbnz	r0, 800e822 <__smakebuf_r+0x46>
 800e80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e812:	059a      	lsls	r2, r3, #22
 800e814:	d4ee      	bmi.n	800e7f4 <__smakebuf_r+0x18>
 800e816:	f023 0303 	bic.w	r3, r3, #3
 800e81a:	f043 0302 	orr.w	r3, r3, #2
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	e7e2      	b.n	800e7e8 <__smakebuf_r+0xc>
 800e822:	89a3      	ldrh	r3, [r4, #12]
 800e824:	6020      	str	r0, [r4, #0]
 800e826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e82a:	81a3      	strh	r3, [r4, #12]
 800e82c:	9b01      	ldr	r3, [sp, #4]
 800e82e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e832:	b15b      	cbz	r3, 800e84c <__smakebuf_r+0x70>
 800e834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e838:	4630      	mov	r0, r6
 800e83a:	f000 f84d 	bl	800e8d8 <_isatty_r>
 800e83e:	b128      	cbz	r0, 800e84c <__smakebuf_r+0x70>
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	f023 0303 	bic.w	r3, r3, #3
 800e846:	f043 0301 	orr.w	r3, r3, #1
 800e84a:	81a3      	strh	r3, [r4, #12]
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	431d      	orrs	r5, r3
 800e850:	81a5      	strh	r5, [r4, #12]
 800e852:	e7cf      	b.n	800e7f4 <__smakebuf_r+0x18>

0800e854 <_raise_r>:
 800e854:	291f      	cmp	r1, #31
 800e856:	b538      	push	{r3, r4, r5, lr}
 800e858:	4605      	mov	r5, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	d904      	bls.n	800e868 <_raise_r+0x14>
 800e85e:	2316      	movs	r3, #22
 800e860:	6003      	str	r3, [r0, #0]
 800e862:	f04f 30ff 	mov.w	r0, #4294967295
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e86a:	b112      	cbz	r2, 800e872 <_raise_r+0x1e>
 800e86c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e870:	b94b      	cbnz	r3, 800e886 <_raise_r+0x32>
 800e872:	4628      	mov	r0, r5
 800e874:	f000 f852 	bl	800e91c <_getpid_r>
 800e878:	4622      	mov	r2, r4
 800e87a:	4601      	mov	r1, r0
 800e87c:	4628      	mov	r0, r5
 800e87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e882:	f000 b839 	b.w	800e8f8 <_kill_r>
 800e886:	2b01      	cmp	r3, #1
 800e888:	d00a      	beq.n	800e8a0 <_raise_r+0x4c>
 800e88a:	1c59      	adds	r1, r3, #1
 800e88c:	d103      	bne.n	800e896 <_raise_r+0x42>
 800e88e:	2316      	movs	r3, #22
 800e890:	6003      	str	r3, [r0, #0]
 800e892:	2001      	movs	r0, #1
 800e894:	e7e7      	b.n	800e866 <_raise_r+0x12>
 800e896:	2100      	movs	r1, #0
 800e898:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e89c:	4620      	mov	r0, r4
 800e89e:	4798      	blx	r3
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	e7e0      	b.n	800e866 <_raise_r+0x12>

0800e8a4 <raise>:
 800e8a4:	4b02      	ldr	r3, [pc, #8]	@ (800e8b0 <raise+0xc>)
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	6818      	ldr	r0, [r3, #0]
 800e8aa:	f7ff bfd3 	b.w	800e854 <_raise_r>
 800e8ae:	bf00      	nop
 800e8b0:	200000d4 	.word	0x200000d4

0800e8b4 <_fstat_r>:
 800e8b4:	b538      	push	{r3, r4, r5, lr}
 800e8b6:	4d07      	ldr	r5, [pc, #28]	@ (800e8d4 <_fstat_r+0x20>)
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	4608      	mov	r0, r1
 800e8be:	4611      	mov	r1, r2
 800e8c0:	602b      	str	r3, [r5, #0]
 800e8c2:	f7f3 f827 	bl	8001914 <_fstat>
 800e8c6:	1c43      	adds	r3, r0, #1
 800e8c8:	d102      	bne.n	800e8d0 <_fstat_r+0x1c>
 800e8ca:	682b      	ldr	r3, [r5, #0]
 800e8cc:	b103      	cbz	r3, 800e8d0 <_fstat_r+0x1c>
 800e8ce:	6023      	str	r3, [r4, #0]
 800e8d0:	bd38      	pop	{r3, r4, r5, pc}
 800e8d2:	bf00      	nop
 800e8d4:	2000078c 	.word	0x2000078c

0800e8d8 <_isatty_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d06      	ldr	r5, [pc, #24]	@ (800e8f4 <_isatty_r+0x1c>)
 800e8dc:	2300      	movs	r3, #0
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	602b      	str	r3, [r5, #0]
 800e8e4:	f7f3 f826 	bl	8001934 <_isatty>
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	d102      	bne.n	800e8f2 <_isatty_r+0x1a>
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	b103      	cbz	r3, 800e8f2 <_isatty_r+0x1a>
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	bd38      	pop	{r3, r4, r5, pc}
 800e8f4:	2000078c 	.word	0x2000078c

0800e8f8 <_kill_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4d07      	ldr	r5, [pc, #28]	@ (800e918 <_kill_r+0x20>)
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	4604      	mov	r4, r0
 800e900:	4608      	mov	r0, r1
 800e902:	4611      	mov	r1, r2
 800e904:	602b      	str	r3, [r5, #0]
 800e906:	f7f2 ffa5 	bl	8001854 <_kill>
 800e90a:	1c43      	adds	r3, r0, #1
 800e90c:	d102      	bne.n	800e914 <_kill_r+0x1c>
 800e90e:	682b      	ldr	r3, [r5, #0]
 800e910:	b103      	cbz	r3, 800e914 <_kill_r+0x1c>
 800e912:	6023      	str	r3, [r4, #0]
 800e914:	bd38      	pop	{r3, r4, r5, pc}
 800e916:	bf00      	nop
 800e918:	2000078c 	.word	0x2000078c

0800e91c <_getpid_r>:
 800e91c:	f7f2 bf92 	b.w	8001844 <_getpid>

0800e920 <_malloc_usable_size_r>:
 800e920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e924:	1f18      	subs	r0, r3, #4
 800e926:	2b00      	cmp	r3, #0
 800e928:	bfbc      	itt	lt
 800e92a:	580b      	ldrlt	r3, [r1, r0]
 800e92c:	18c0      	addlt	r0, r0, r3
 800e92e:	4770      	bx	lr

0800e930 <_init>:
 800e930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e932:	bf00      	nop
 800e934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e936:	bc08      	pop	{r3}
 800e938:	469e      	mov	lr, r3
 800e93a:	4770      	bx	lr

0800e93c <_fini>:
 800e93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93e:	bf00      	nop
 800e940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e942:	bc08      	pop	{r3}
 800e944:	469e      	mov	lr, r3
 800e946:	4770      	bx	lr
